
FreeRTOS_ThreadCreation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a18  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005bd8  08005bd8  00015bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000048  08005c40  08005c40  00015c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000e8  08005c88  08005c88  00015c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d70  08005d70  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d70  08005d70  00015d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d74  08005d74  00015d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005d78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00001390  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001410  20001410  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001184d  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000305c  00000000  00000000  00031940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001310  00000000  00000000  000349a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e9c  00000000  00000000  00035cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e2a2  00000000  00000000  00036b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014a11  00000000  00000000  00064dee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00106bd2  00000000  00000000  000797ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000559c  00000000  00000000  001803d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00185970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000080 	.word	0x20000080
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005bc0 	.word	0x08005bc0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000084 	.word	0x20000084
 80001fc:	08005bc0 	.word	0x08005bc0

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f001 b8de 	b.w	80013d4 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	460d      	mov	r5, r1
 8000238:	4604      	mov	r4, r0
 800023a:	460f      	mov	r7, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14a      	bne.n	80002d6 <__udivmoddi4+0xa6>
 8000240:	428a      	cmp	r2, r1
 8000242:	4694      	mov	ip, r2
 8000244:	d965      	bls.n	8000312 <__udivmoddi4+0xe2>
 8000246:	fab2 f382 	clz	r3, r2
 800024a:	b143      	cbz	r3, 800025e <__udivmoddi4+0x2e>
 800024c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000250:	f1c3 0220 	rsb	r2, r3, #32
 8000254:	409f      	lsls	r7, r3
 8000256:	fa20 f202 	lsr.w	r2, r0, r2
 800025a:	4317      	orrs	r7, r2
 800025c:	409c      	lsls	r4, r3
 800025e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000262:	fa1f f58c 	uxth.w	r5, ip
 8000266:	fbb7 f1fe 	udiv	r1, r7, lr
 800026a:	0c22      	lsrs	r2, r4, #16
 800026c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000270:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000274:	fb01 f005 	mul.w	r0, r1, r5
 8000278:	4290      	cmp	r0, r2
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x62>
 800027c:	eb1c 0202 	adds.w	r2, ip, r2
 8000280:	f101 37ff 	add.w	r7, r1, #4294967295
 8000284:	f080 811c 	bcs.w	80004c0 <__udivmoddi4+0x290>
 8000288:	4290      	cmp	r0, r2
 800028a:	f240 8119 	bls.w	80004c0 <__udivmoddi4+0x290>
 800028e:	3902      	subs	r1, #2
 8000290:	4462      	add	r2, ip
 8000292:	1a12      	subs	r2, r2, r0
 8000294:	b2a4      	uxth	r4, r4
 8000296:	fbb2 f0fe 	udiv	r0, r2, lr
 800029a:	fb0e 2210 	mls	r2, lr, r0, r2
 800029e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a2:	fb00 f505 	mul.w	r5, r0, r5
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x90>
 80002aa:	eb1c 0404 	adds.w	r4, ip, r4
 80002ae:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x294>
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x294>
 80002bc:	4464      	add	r4, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c4:	1b64      	subs	r4, r4, r5
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11e      	cbz	r6, 80002d2 <__udivmoddi4+0xa2>
 80002ca:	40dc      	lsrs	r4, r3
 80002cc:	2300      	movs	r3, #0
 80002ce:	e9c6 4300 	strd	r4, r3, [r6]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0xbc>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80ed 	beq.w	80004ba <__udivmoddi4+0x28a>
 80002e0:	2100      	movs	r1, #0
 80002e2:	e9c6 0500 	strd	r0, r5, [r6]
 80002e6:	4608      	mov	r0, r1
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	fab3 f183 	clz	r1, r3
 80002f0:	2900      	cmp	r1, #0
 80002f2:	d149      	bne.n	8000388 <__udivmoddi4+0x158>
 80002f4:	42ab      	cmp	r3, r5
 80002f6:	d302      	bcc.n	80002fe <__udivmoddi4+0xce>
 80002f8:	4282      	cmp	r2, r0
 80002fa:	f200 80f8 	bhi.w	80004ee <__udivmoddi4+0x2be>
 80002fe:	1a84      	subs	r4, r0, r2
 8000300:	eb65 0203 	sbc.w	r2, r5, r3
 8000304:	2001      	movs	r0, #1
 8000306:	4617      	mov	r7, r2
 8000308:	2e00      	cmp	r6, #0
 800030a:	d0e2      	beq.n	80002d2 <__udivmoddi4+0xa2>
 800030c:	e9c6 4700 	strd	r4, r7, [r6]
 8000310:	e7df      	b.n	80002d2 <__udivmoddi4+0xa2>
 8000312:	b902      	cbnz	r2, 8000316 <__udivmoddi4+0xe6>
 8000314:	deff      	udf	#255	; 0xff
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8090 	bne.w	8000440 <__udivmoddi4+0x210>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2101      	movs	r1, #1
 800032c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000330:	fb07 2015 	mls	r0, r7, r5, r2
 8000334:	0c22      	lsrs	r2, r4, #16
 8000336:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033a:	fb0e f005 	mul.w	r0, lr, r5
 800033e:	4290      	cmp	r0, r2
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x124>
 8000342:	eb1c 0202 	adds.w	r2, ip, r2
 8000346:	f105 38ff 	add.w	r8, r5, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4290      	cmp	r0, r2
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2b8>
 8000352:	4645      	mov	r5, r8
 8000354:	1a12      	subs	r2, r2, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb2 f0f7 	udiv	r0, r2, r7
 800035c:	fb07 2210 	mls	r2, r7, r0, r2
 8000360:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x14e>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 32ff 	add.w	r2, r0, #4294967295
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x14c>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2c2>
 800037c:	4610      	mov	r0, r2
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000386:	e79f      	b.n	80002c8 <__udivmoddi4+0x98>
 8000388:	f1c1 0720 	rsb	r7, r1, #32
 800038c:	408b      	lsls	r3, r1
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa05 f401 	lsl.w	r4, r5, r1
 800039a:	fa20 f307 	lsr.w	r3, r0, r7
 800039e:	40fd      	lsrs	r5, r7
 80003a0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a4:	4323      	orrs	r3, r4
 80003a6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003aa:	fa1f fe8c 	uxth.w	lr, ip
 80003ae:	fb09 5518 	mls	r5, r9, r8, r5
 80003b2:	0c1c      	lsrs	r4, r3, #16
 80003b4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003b8:	fb08 f50e 	mul.w	r5, r8, lr
 80003bc:	42a5      	cmp	r5, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	fa00 f001 	lsl.w	r0, r0, r1
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2b4>
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2b4>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4464      	add	r4, ip
 80003e0:	1b64      	subs	r4, r4, r5
 80003e2:	b29d      	uxth	r5, r3
 80003e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ec:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f103 35ff 	add.w	r5, r3, #4294967295
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2ac>
 8000402:	45a6      	cmp	lr, r4
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2ac>
 8000406:	3b02      	subs	r3, #2
 8000408:	4464      	add	r4, ip
 800040a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800040e:	fba3 9502 	umull	r9, r5, r3, r2
 8000412:	eba4 040e 	sub.w	r4, r4, lr
 8000416:	42ac      	cmp	r4, r5
 8000418:	46c8      	mov	r8, r9
 800041a:	46ae      	mov	lr, r5
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x29c>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x298>
 8000420:	b156      	cbz	r6, 8000438 <__udivmoddi4+0x208>
 8000422:	ebb0 0208 	subs.w	r2, r0, r8
 8000426:	eb64 040e 	sbc.w	r4, r4, lr
 800042a:	fa04 f707 	lsl.w	r7, r4, r7
 800042e:	40ca      	lsrs	r2, r1
 8000430:	40cc      	lsrs	r4, r1
 8000432:	4317      	orrs	r7, r2
 8000434:	e9c6 7400 	strd	r7, r4, [r6]
 8000438:	4618      	mov	r0, r3
 800043a:	2100      	movs	r1, #0
 800043c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000440:	f1c3 0120 	rsb	r1, r3, #32
 8000444:	fa02 fc03 	lsl.w	ip, r2, r3
 8000448:	fa20 f201 	lsr.w	r2, r0, r1
 800044c:	fa25 f101 	lsr.w	r1, r5, r1
 8000450:	409d      	lsls	r5, r3
 8000452:	432a      	orrs	r2, r5
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000460:	fb07 1510 	mls	r5, r7, r0, r1
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046a:	fb00 f50e 	mul.w	r5, r0, lr
 800046e:	428d      	cmp	r5, r1
 8000470:	fa04 f403 	lsl.w	r4, r4, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x258>
 8000476:	eb1c 0101 	adds.w	r1, ip, r1
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 8000480:	428d      	cmp	r5, r1
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 8000484:	3802      	subs	r0, #2
 8000486:	4461      	add	r1, ip
 8000488:	1b49      	subs	r1, r1, r5
 800048a:	b292      	uxth	r2, r2
 800048c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000490:	fb07 1115 	mls	r1, r7, r5, r1
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	fb05 f10e 	mul.w	r1, r5, lr
 800049c:	4291      	cmp	r1, r2
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x282>
 80004a0:	eb1c 0202 	adds.w	r2, ip, r2
 80004a4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2a8>
 80004aa:	4291      	cmp	r1, r2
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2a8>
 80004ae:	3d02      	subs	r5, #2
 80004b0:	4462      	add	r2, ip
 80004b2:	1a52      	subs	r2, r2, r1
 80004b4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0xfc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xa2>
 80004c0:	4639      	mov	r1, r7
 80004c2:	e6e6      	b.n	8000292 <__udivmoddi4+0x62>
 80004c4:	4610      	mov	r0, r2
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x90>
 80004c8:	4548      	cmp	r0, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d4:	3b01      	subs	r3, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d8:	4645      	mov	r5, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x282>
 80004dc:	462b      	mov	r3, r5
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1da>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x258>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e8:	3d02      	subs	r5, #2
 80004ea:	4462      	add	r2, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x124>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e70a      	b.n	8000308 <__udivmoddi4+0xd8>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x14e>

080004f8 <selfrel_offset31>:
 80004f8:	6803      	ldr	r3, [r0, #0]
 80004fa:	005a      	lsls	r2, r3, #1
 80004fc:	bf4c      	ite	mi
 80004fe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000502:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000506:	4418      	add	r0, r3
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <search_EIT_table>:
 800050c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000510:	b329      	cbz	r1, 800055e <search_EIT_table+0x52>
 8000512:	1e4f      	subs	r7, r1, #1
 8000514:	4604      	mov	r4, r0
 8000516:	4615      	mov	r5, r2
 8000518:	463e      	mov	r6, r7
 800051a:	f04f 0800 	mov.w	r8, #0
 800051e:	eb08 0106 	add.w	r1, r8, r6
 8000522:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000526:	1049      	asrs	r1, r1, #1
 8000528:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 800052c:	4648      	mov	r0, r9
 800052e:	f7ff ffe3 	bl	80004f8 <selfrel_offset31>
 8000532:	4603      	mov	r3, r0
 8000534:	00c8      	lsls	r0, r1, #3
 8000536:	3008      	adds	r0, #8
 8000538:	428f      	cmp	r7, r1
 800053a:	4420      	add	r0, r4
 800053c:	d009      	beq.n	8000552 <search_EIT_table+0x46>
 800053e:	42ab      	cmp	r3, r5
 8000540:	d809      	bhi.n	8000556 <search_EIT_table+0x4a>
 8000542:	f7ff ffd9 	bl	80004f8 <selfrel_offset31>
 8000546:	3801      	subs	r0, #1
 8000548:	42a8      	cmp	r0, r5
 800054a:	d20a      	bcs.n	8000562 <search_EIT_table+0x56>
 800054c:	f101 0801 	add.w	r8, r1, #1
 8000550:	e7e5      	b.n	800051e <search_EIT_table+0x12>
 8000552:	42ab      	cmp	r3, r5
 8000554:	d905      	bls.n	8000562 <search_EIT_table+0x56>
 8000556:	4588      	cmp	r8, r1
 8000558:	d001      	beq.n	800055e <search_EIT_table+0x52>
 800055a:	1e4e      	subs	r6, r1, #1
 800055c:	e7df      	b.n	800051e <search_EIT_table+0x12>
 800055e:	f04f 0900 	mov.w	r9, #0
 8000562:	4648      	mov	r0, r9
 8000564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000568 <__gnu_unwind_get_pr_addr>:
 8000568:	2801      	cmp	r0, #1
 800056a:	d007      	beq.n	800057c <__gnu_unwind_get_pr_addr+0x14>
 800056c:	2802      	cmp	r0, #2
 800056e:	d007      	beq.n	8000580 <__gnu_unwind_get_pr_addr+0x18>
 8000570:	4b04      	ldr	r3, [pc, #16]	; (8000584 <__gnu_unwind_get_pr_addr+0x1c>)
 8000572:	2800      	cmp	r0, #0
 8000574:	bf0c      	ite	eq
 8000576:	4618      	moveq	r0, r3
 8000578:	2000      	movne	r0, #0
 800057a:	4770      	bx	lr
 800057c:	4802      	ldr	r0, [pc, #8]	; (8000588 <__gnu_unwind_get_pr_addr+0x20>)
 800057e:	4770      	bx	lr
 8000580:	4802      	ldr	r0, [pc, #8]	; (800058c <__gnu_unwind_get_pr_addr+0x24>)
 8000582:	4770      	bx	lr
 8000584:	08000c3d 	.word	0x08000c3d
 8000588:	08000c41 	.word	0x08000c41
 800058c:	08000c45 	.word	0x08000c45

08000590 <get_eit_entry>:
 8000590:	b530      	push	{r4, r5, lr}
 8000592:	4b22      	ldr	r3, [pc, #136]	; (800061c <get_eit_entry+0x8c>)
 8000594:	b083      	sub	sp, #12
 8000596:	4604      	mov	r4, r0
 8000598:	1e8d      	subs	r5, r1, #2
 800059a:	b343      	cbz	r3, 80005ee <get_eit_entry+0x5e>
 800059c:	a901      	add	r1, sp, #4
 800059e:	4628      	mov	r0, r5
 80005a0:	f3af 8000 	nop.w
 80005a4:	b1f0      	cbz	r0, 80005e4 <get_eit_entry+0x54>
 80005a6:	9901      	ldr	r1, [sp, #4]
 80005a8:	462a      	mov	r2, r5
 80005aa:	f7ff ffaf 	bl	800050c <search_EIT_table>
 80005ae:	4601      	mov	r1, r0
 80005b0:	b1c0      	cbz	r0, 80005e4 <get_eit_entry+0x54>
 80005b2:	f7ff ffa1 	bl	80004f8 <selfrel_offset31>
 80005b6:	684b      	ldr	r3, [r1, #4]
 80005b8:	64a0      	str	r0, [r4, #72]	; 0x48
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d02b      	beq.n	8000616 <get_eit_entry+0x86>
 80005be:	2b00      	cmp	r3, #0
 80005c0:	f101 0004 	add.w	r0, r1, #4
 80005c4:	db25      	blt.n	8000612 <get_eit_entry+0x82>
 80005c6:	f7ff ff97 	bl	80004f8 <selfrel_offset31>
 80005ca:	2300      	movs	r3, #0
 80005cc:	6523      	str	r3, [r4, #80]	; 0x50
 80005ce:	6803      	ldr	r3, [r0, #0]
 80005d0:	64e0      	str	r0, [r4, #76]	; 0x4c
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	db12      	blt.n	80005fc <get_eit_entry+0x6c>
 80005d6:	f7ff ff8f 	bl	80004f8 <selfrel_offset31>
 80005da:	4603      	mov	r3, r0
 80005dc:	2000      	movs	r0, #0
 80005de:	6123      	str	r3, [r4, #16]
 80005e0:	b003      	add	sp, #12
 80005e2:	bd30      	pop	{r4, r5, pc}
 80005e4:	2300      	movs	r3, #0
 80005e6:	2009      	movs	r0, #9
 80005e8:	6123      	str	r3, [r4, #16]
 80005ea:	b003      	add	sp, #12
 80005ec:	bd30      	pop	{r4, r5, pc}
 80005ee:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <get_eit_entry+0x90>)
 80005f0:	490c      	ldr	r1, [pc, #48]	; (8000624 <get_eit_entry+0x94>)
 80005f2:	1ac9      	subs	r1, r1, r3
 80005f4:	10c9      	asrs	r1, r1, #3
 80005f6:	4618      	mov	r0, r3
 80005f8:	9101      	str	r1, [sp, #4]
 80005fa:	e7d5      	b.n	80005a8 <get_eit_entry+0x18>
 80005fc:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000600:	f7ff ffb2 	bl	8000568 <__gnu_unwind_get_pr_addr>
 8000604:	1e03      	subs	r3, r0, #0
 8000606:	bf0c      	ite	eq
 8000608:	2009      	moveq	r0, #9
 800060a:	2000      	movne	r0, #0
 800060c:	6123      	str	r3, [r4, #16]
 800060e:	b003      	add	sp, #12
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	2301      	movs	r3, #1
 8000614:	e7da      	b.n	80005cc <get_eit_entry+0x3c>
 8000616:	2300      	movs	r3, #0
 8000618:	2005      	movs	r0, #5
 800061a:	e7e0      	b.n	80005de <get_eit_entry+0x4e>
 800061c:	00000000 	.word	0x00000000
 8000620:	08005c88 	.word	0x08005c88
 8000624:	08005d70 	.word	0x08005d70

08000628 <restore_non_core_regs>:
 8000628:	6803      	ldr	r3, [r0, #0]
 800062a:	07da      	lsls	r2, r3, #31
 800062c:	b510      	push	{r4, lr}
 800062e:	4604      	mov	r4, r0
 8000630:	d406      	bmi.n	8000640 <restore_non_core_regs+0x18>
 8000632:	079b      	lsls	r3, r3, #30
 8000634:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000638:	d509      	bpl.n	800064e <restore_non_core_regs+0x26>
 800063a:	f000 fc71 	bl	8000f20 <__gnu_Unwind_Restore_VFP_D>
 800063e:	6823      	ldr	r3, [r4, #0]
 8000640:	0759      	lsls	r1, r3, #29
 8000642:	d509      	bpl.n	8000658 <restore_non_core_regs+0x30>
 8000644:	071a      	lsls	r2, r3, #28
 8000646:	d50e      	bpl.n	8000666 <restore_non_core_regs+0x3e>
 8000648:	06db      	lsls	r3, r3, #27
 800064a:	d513      	bpl.n	8000674 <restore_non_core_regs+0x4c>
 800064c:	bd10      	pop	{r4, pc}
 800064e:	f000 fc5f 	bl	8000f10 <__gnu_Unwind_Restore_VFP>
 8000652:	6823      	ldr	r3, [r4, #0]
 8000654:	0759      	lsls	r1, r3, #29
 8000656:	d4f5      	bmi.n	8000644 <restore_non_core_regs+0x1c>
 8000658:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800065c:	f000 fc68 	bl	8000f30 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000660:	6823      	ldr	r3, [r4, #0]
 8000662:	071a      	lsls	r2, r3, #28
 8000664:	d4f0      	bmi.n	8000648 <restore_non_core_regs+0x20>
 8000666:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800066a:	f000 fc69 	bl	8000f40 <__gnu_Unwind_Restore_WMMXD>
 800066e:	6823      	ldr	r3, [r4, #0]
 8000670:	06db      	lsls	r3, r3, #27
 8000672:	d4eb      	bmi.n	800064c <restore_non_core_regs+0x24>
 8000674:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800067c:	f000 bca4 	b.w	8000fc8 <__gnu_Unwind_Restore_WMMXC>

08000680 <__gnu_unwind_24bit.constprop.0>:
 8000680:	2009      	movs	r0, #9
 8000682:	4770      	bx	lr

08000684 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 8000684:	4603      	mov	r3, r0
 8000686:	6800      	ldr	r0, [r0, #0]
 8000688:	b100      	cbz	r0, 800068c <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 800068a:	4418      	add	r0, r3
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <_Unwind_DebugHook>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <unwind_phase2>:
 8000694:	b570      	push	{r4, r5, r6, lr}
 8000696:	4604      	mov	r4, r0
 8000698:	460e      	mov	r6, r1
 800069a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 800069c:	4620      	mov	r0, r4
 800069e:	f7ff ff77 	bl	8000590 <get_eit_entry>
 80006a2:	4605      	mov	r5, r0
 80006a4:	b988      	cbnz	r0, 80006ca <unwind_phase2+0x36>
 80006a6:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80006a8:	6162      	str	r2, [r4, #20]
 80006aa:	6923      	ldr	r3, [r4, #16]
 80006ac:	4632      	mov	r2, r6
 80006ae:	4621      	mov	r1, r4
 80006b0:	2001      	movs	r0, #1
 80006b2:	4798      	blx	r3
 80006b4:	2808      	cmp	r0, #8
 80006b6:	d0f0      	beq.n	800069a <unwind_phase2+0x6>
 80006b8:	2807      	cmp	r0, #7
 80006ba:	d106      	bne.n	80006ca <unwind_phase2+0x36>
 80006bc:	4628      	mov	r0, r5
 80006be:	6c31      	ldr	r1, [r6, #64]	; 0x40
 80006c0:	f7ff ffe6 	bl	8000690 <_Unwind_DebugHook>
 80006c4:	1d30      	adds	r0, r6, #4
 80006c6:	f000 fc17 	bl	8000ef8 <__restore_core_regs>
 80006ca:	f005 fa2d 	bl	8005b28 <abort>
 80006ce:	bf00      	nop

080006d0 <unwind_phase2_forced>:
 80006d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006d4:	1d0d      	adds	r5, r1, #4
 80006d6:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80006da:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80006de:	4607      	mov	r7, r0
 80006e0:	4614      	mov	r4, r2
 80006e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e4:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80006e8:	f10d 0c0c 	add.w	ip, sp, #12
 80006ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80006fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000700:	ae02      	add	r6, sp, #8
 8000702:	f04f 0e00 	mov.w	lr, #0
 8000706:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800070a:	f8c6 e000 	str.w	lr, [r6]
 800070e:	e020      	b.n	8000752 <unwind_phase2_forced+0x82>
 8000710:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000718:	4631      	mov	r1, r6
 800071a:	a87a      	add	r0, sp, #488	; 0x1e8
 800071c:	f005 f9f6 	bl	8005b0c <memcpy>
 8000720:	693b      	ldr	r3, [r7, #16]
 8000722:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000724:	4639      	mov	r1, r7
 8000726:	4650      	mov	r0, sl
 8000728:	4798      	blx	r3
 800072a:	9b88      	ldr	r3, [sp, #544]	; 0x220
 800072c:	6473      	str	r3, [r6, #68]	; 0x44
 800072e:	4621      	mov	r1, r4
 8000730:	e9cd 6900 	strd	r6, r9, [sp]
 8000734:	4605      	mov	r5, r0
 8000736:	463b      	mov	r3, r7
 8000738:	463a      	mov	r2, r7
 800073a:	2001      	movs	r0, #1
 800073c:	47c0      	blx	r8
 800073e:	4604      	mov	r4, r0
 8000740:	b9e0      	cbnz	r0, 800077c <unwind_phase2_forced+0xac>
 8000742:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000746:	a97a      	add	r1, sp, #488	; 0x1e8
 8000748:	4630      	mov	r0, r6
 800074a:	f005 f9df 	bl	8005b0c <memcpy>
 800074e:	2d08      	cmp	r5, #8
 8000750:	d11a      	bne.n	8000788 <unwind_phase2_forced+0xb8>
 8000752:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000754:	4638      	mov	r0, r7
 8000756:	f7ff ff1b 	bl	8000590 <get_eit_entry>
 800075a:	3409      	adds	r4, #9
 800075c:	fa5f fa84 	uxtb.w	sl, r4
 8000760:	4605      	mov	r5, r0
 8000762:	2800      	cmp	r0, #0
 8000764:	d0d4      	beq.n	8000710 <unwind_phase2_forced+0x40>
 8000766:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000768:	6473      	str	r3, [r6, #68]	; 0x44
 800076a:	463a      	mov	r2, r7
 800076c:	e9cd 6900 	strd	r6, r9, [sp]
 8000770:	463b      	mov	r3, r7
 8000772:	f04a 0110 	orr.w	r1, sl, #16
 8000776:	2001      	movs	r0, #1
 8000778:	47c0      	blx	r8
 800077a:	b100      	cbz	r0, 800077e <unwind_phase2_forced+0xae>
 800077c:	2509      	movs	r5, #9
 800077e:	4628      	mov	r0, r5
 8000780:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000788:	2d07      	cmp	r5, #7
 800078a:	d1f7      	bne.n	800077c <unwind_phase2_forced+0xac>
 800078c:	4620      	mov	r0, r4
 800078e:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000790:	f7ff ff7e 	bl	8000690 <_Unwind_DebugHook>
 8000794:	a803      	add	r0, sp, #12
 8000796:	f000 fbaf 	bl	8000ef8 <__restore_core_regs>
 800079a:	bf00      	nop

0800079c <_Unwind_GetCFA>:
 800079c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800079e:	4770      	bx	lr

080007a0 <__gnu_Unwind_RaiseException>:
 80007a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80007a4:	640b      	str	r3, [r1, #64]	; 0x40
 80007a6:	f101 0c04 	add.w	ip, r1, #4
 80007aa:	460e      	mov	r6, r1
 80007ac:	4605      	mov	r5, r0
 80007ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80007b2:	b0f9      	sub	sp, #484	; 0x1e4
 80007b4:	ac01      	add	r4, sp, #4
 80007b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80007bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80007c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c4:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80007c8:	f04f 37ff 	mov.w	r7, #4294967295
 80007cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80007d0:	9700      	str	r7, [sp, #0]
 80007d2:	e006      	b.n	80007e2 <__gnu_Unwind_RaiseException+0x42>
 80007d4:	692b      	ldr	r3, [r5, #16]
 80007d6:	466a      	mov	r2, sp
 80007d8:	4629      	mov	r1, r5
 80007da:	4798      	blx	r3
 80007dc:	2808      	cmp	r0, #8
 80007de:	4604      	mov	r4, r0
 80007e0:	d108      	bne.n	80007f4 <__gnu_Unwind_RaiseException+0x54>
 80007e2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80007e4:	4628      	mov	r0, r5
 80007e6:	f7ff fed3 	bl	8000590 <get_eit_entry>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d0f2      	beq.n	80007d4 <__gnu_Unwind_RaiseException+0x34>
 80007ee:	2009      	movs	r0, #9
 80007f0:	b079      	add	sp, #484	; 0x1e4
 80007f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f4:	4668      	mov	r0, sp
 80007f6:	f7ff ff17 	bl	8000628 <restore_non_core_regs>
 80007fa:	2c06      	cmp	r4, #6
 80007fc:	d1f7      	bne.n	80007ee <__gnu_Unwind_RaiseException+0x4e>
 80007fe:	4631      	mov	r1, r6
 8000800:	4628      	mov	r0, r5
 8000802:	f7ff ff47 	bl	8000694 <unwind_phase2>
 8000806:	bf00      	nop

08000808 <__gnu_Unwind_ForcedUnwind>:
 8000808:	60c1      	str	r1, [r0, #12]
 800080a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800080c:	6182      	str	r2, [r0, #24]
 800080e:	6419      	str	r1, [r3, #64]	; 0x40
 8000810:	2200      	movs	r2, #0
 8000812:	4619      	mov	r1, r3
 8000814:	e75c      	b.n	80006d0 <unwind_phase2_forced>
 8000816:	bf00      	nop

08000818 <__gnu_Unwind_Resume>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	68c6      	ldr	r6, [r0, #12]
 800081c:	6943      	ldr	r3, [r0, #20]
 800081e:	640b      	str	r3, [r1, #64]	; 0x40
 8000820:	b9ae      	cbnz	r6, 800084e <__gnu_Unwind_Resume+0x36>
 8000822:	6903      	ldr	r3, [r0, #16]
 8000824:	460a      	mov	r2, r1
 8000826:	4604      	mov	r4, r0
 8000828:	460d      	mov	r5, r1
 800082a:	4601      	mov	r1, r0
 800082c:	2002      	movs	r0, #2
 800082e:	4798      	blx	r3
 8000830:	2807      	cmp	r0, #7
 8000832:	d005      	beq.n	8000840 <__gnu_Unwind_Resume+0x28>
 8000834:	2808      	cmp	r0, #8
 8000836:	d10f      	bne.n	8000858 <__gnu_Unwind_Resume+0x40>
 8000838:	4629      	mov	r1, r5
 800083a:	4620      	mov	r0, r4
 800083c:	f7ff ff2a 	bl	8000694 <unwind_phase2>
 8000840:	4630      	mov	r0, r6
 8000842:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000844:	f7ff ff24 	bl	8000690 <_Unwind_DebugHook>
 8000848:	1d28      	adds	r0, r5, #4
 800084a:	f000 fb55 	bl	8000ef8 <__restore_core_regs>
 800084e:	2201      	movs	r2, #1
 8000850:	f7ff ff3e 	bl	80006d0 <unwind_phase2_forced>
 8000854:	f005 f968 	bl	8005b28 <abort>
 8000858:	f005 f966 	bl	8005b28 <abort>

0800085c <__gnu_Unwind_Resume_or_Rethrow>:
 800085c:	68c2      	ldr	r2, [r0, #12]
 800085e:	b11a      	cbz	r2, 8000868 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000860:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000862:	640a      	str	r2, [r1, #64]	; 0x40
 8000864:	2200      	movs	r2, #0
 8000866:	e733      	b.n	80006d0 <unwind_phase2_forced>
 8000868:	e79a      	b.n	80007a0 <__gnu_Unwind_RaiseException>
 800086a:	bf00      	nop

0800086c <_Unwind_Complete>:
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <_Unwind_DeleteException>:
 8000870:	6883      	ldr	r3, [r0, #8]
 8000872:	4601      	mov	r1, r0
 8000874:	b10b      	cbz	r3, 800087a <_Unwind_DeleteException+0xa>
 8000876:	2001      	movs	r0, #1
 8000878:	4718      	bx	r3
 800087a:	4770      	bx	lr

0800087c <_Unwind_VRS_Get>:
 800087c:	2901      	cmp	r1, #1
 800087e:	d012      	beq.n	80008a6 <_Unwind_VRS_Get+0x2a>
 8000880:	d809      	bhi.n	8000896 <_Unwind_VRS_Get+0x1a>
 8000882:	b973      	cbnz	r3, 80008a2 <_Unwind_VRS_Get+0x26>
 8000884:	2a0f      	cmp	r2, #15
 8000886:	d80c      	bhi.n	80008a2 <_Unwind_VRS_Get+0x26>
 8000888:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800088c:	4618      	mov	r0, r3
 800088e:	6853      	ldr	r3, [r2, #4]
 8000890:	9a00      	ldr	r2, [sp, #0]
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	4770      	bx	lr
 8000896:	3903      	subs	r1, #3
 8000898:	2901      	cmp	r1, #1
 800089a:	bf94      	ite	ls
 800089c:	2001      	movls	r0, #1
 800089e:	2002      	movhi	r0, #2
 80008a0:	4770      	bx	lr
 80008a2:	2002      	movs	r0, #2
 80008a4:	4770      	bx	lr
 80008a6:	4608      	mov	r0, r1
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <_Unwind_GetGR>:
 80008ac:	b500      	push	{lr}
 80008ae:	b085      	sub	sp, #20
 80008b0:	460a      	mov	r2, r1
 80008b2:	2300      	movs	r3, #0
 80008b4:	a903      	add	r1, sp, #12
 80008b6:	9100      	str	r1, [sp, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	f7ff ffdf 	bl	800087c <_Unwind_VRS_Get>
 80008be:	9803      	ldr	r0, [sp, #12]
 80008c0:	b005      	add	sp, #20
 80008c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80008c6:	bf00      	nop

080008c8 <_Unwind_VRS_Set>:
 80008c8:	2901      	cmp	r1, #1
 80008ca:	d012      	beq.n	80008f2 <_Unwind_VRS_Set+0x2a>
 80008cc:	d809      	bhi.n	80008e2 <_Unwind_VRS_Set+0x1a>
 80008ce:	b973      	cbnz	r3, 80008ee <_Unwind_VRS_Set+0x26>
 80008d0:	2a0f      	cmp	r2, #15
 80008d2:	d80c      	bhi.n	80008ee <_Unwind_VRS_Set+0x26>
 80008d4:	9900      	ldr	r1, [sp, #0]
 80008d6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80008da:	6809      	ldr	r1, [r1, #0]
 80008dc:	6051      	str	r1, [r2, #4]
 80008de:	4618      	mov	r0, r3
 80008e0:	4770      	bx	lr
 80008e2:	3903      	subs	r1, #3
 80008e4:	2901      	cmp	r1, #1
 80008e6:	bf94      	ite	ls
 80008e8:	2001      	movls	r0, #1
 80008ea:	2002      	movhi	r0, #2
 80008ec:	4770      	bx	lr
 80008ee:	2002      	movs	r0, #2
 80008f0:	4770      	bx	lr
 80008f2:	4608      	mov	r0, r1
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop

080008f8 <_Unwind_SetGR>:
 80008f8:	b510      	push	{r4, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	2300      	movs	r3, #0
 80008fe:	ac03      	add	r4, sp, #12
 8000900:	9203      	str	r2, [sp, #12]
 8000902:	9400      	str	r4, [sp, #0]
 8000904:	460a      	mov	r2, r1
 8000906:	4619      	mov	r1, r3
 8000908:	f7ff ffde 	bl	80008c8 <_Unwind_VRS_Set>
 800090c:	b004      	add	sp, #16
 800090e:	bd10      	pop	{r4, pc}

08000910 <__gnu_Unwind_Backtrace>:
 8000910:	b570      	push	{r4, r5, r6, lr}
 8000912:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	f102 0c04 	add.w	ip, r2, #4
 800091a:	4605      	mov	r5, r0
 800091c:	460c      	mov	r4, r1
 800091e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000922:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000926:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 800092a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800092e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000932:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000936:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800093a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800093e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000942:	f04f 36ff 	mov.w	r6, #4294967295
 8000946:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800094a:	9616      	str	r6, [sp, #88]	; 0x58
 800094c:	e010      	b.n	8000970 <__gnu_Unwind_Backtrace+0x60>
 800094e:	f7ff ffd3 	bl	80008f8 <_Unwind_SetGR>
 8000952:	4621      	mov	r1, r4
 8000954:	a816      	add	r0, sp, #88	; 0x58
 8000956:	47a8      	blx	r5
 8000958:	4603      	mov	r3, r0
 800095a:	aa16      	add	r2, sp, #88	; 0x58
 800095c:	4669      	mov	r1, sp
 800095e:	2008      	movs	r0, #8
 8000960:	b983      	cbnz	r3, 8000984 <__gnu_Unwind_Backtrace+0x74>
 8000962:	9b04      	ldr	r3, [sp, #16]
 8000964:	4798      	blx	r3
 8000966:	2805      	cmp	r0, #5
 8000968:	4606      	mov	r6, r0
 800096a:	d00c      	beq.n	8000986 <__gnu_Unwind_Backtrace+0x76>
 800096c:	2809      	cmp	r0, #9
 800096e:	d009      	beq.n	8000984 <__gnu_Unwind_Backtrace+0x74>
 8000970:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000972:	4668      	mov	r0, sp
 8000974:	f7ff fe0c 	bl	8000590 <get_eit_entry>
 8000978:	4603      	mov	r3, r0
 800097a:	466a      	mov	r2, sp
 800097c:	210c      	movs	r1, #12
 800097e:	a816      	add	r0, sp, #88	; 0x58
 8000980:	2b00      	cmp	r3, #0
 8000982:	d0e4      	beq.n	800094e <__gnu_Unwind_Backtrace+0x3e>
 8000984:	2609      	movs	r6, #9
 8000986:	a816      	add	r0, sp, #88	; 0x58
 8000988:	f7ff fe4e 	bl	8000628 <restore_non_core_regs>
 800098c:	4630      	mov	r0, r6
 800098e:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8000992:	bd70      	pop	{r4, r5, r6, pc}

08000994 <__gnu_unwind_pr_common>:
 8000994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000998:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 800099a:	b089      	sub	sp, #36	; 0x24
 800099c:	461e      	mov	r6, r3
 800099e:	f854 3b04 	ldr.w	r3, [r4], #4
 80009a2:	9406      	str	r4, [sp, #24]
 80009a4:	460d      	mov	r5, r1
 80009a6:	4617      	mov	r7, r2
 80009a8:	f000 0803 	and.w	r8, r0, #3
 80009ac:	2e00      	cmp	r6, #0
 80009ae:	d079      	beq.n	8000aa4 <__gnu_unwind_pr_common+0x110>
 80009b0:	0c1a      	lsrs	r2, r3, #16
 80009b2:	f88d 201d 	strb.w	r2, [sp, #29]
 80009b6:	041b      	lsls	r3, r3, #16
 80009b8:	b2d2      	uxtb	r2, r2
 80009ba:	9305      	str	r3, [sp, #20]
 80009bc:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80009c0:	2302      	movs	r3, #2
 80009c2:	f88d 301c 	strb.w	r3, [sp, #28]
 80009c6:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80009c8:	f1b8 0f02 	cmp.w	r8, #2
 80009cc:	bf08      	it	eq
 80009ce:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80009d0:	f013 0301 	ands.w	r3, r3, #1
 80009d4:	d00c      	beq.n	80009f0 <__gnu_unwind_pr_common+0x5c>
 80009d6:	a905      	add	r1, sp, #20
 80009d8:	4638      	mov	r0, r7
 80009da:	f000 fb8f 	bl	80010fc <__gnu_unwind_execute>
 80009de:	b918      	cbnz	r0, 80009e8 <__gnu_unwind_pr_common+0x54>
 80009e0:	2008      	movs	r0, #8
 80009e2:	b009      	add	sp, #36	; 0x24
 80009e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009e8:	2009      	movs	r0, #9
 80009ea:	b009      	add	sp, #36	; 0x24
 80009ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009f0:	f8d4 a000 	ldr.w	sl, [r4]
 80009f4:	f1ba 0f00 	cmp.w	sl, #0
 80009f8:	d0ed      	beq.n	80009d6 <__gnu_unwind_pr_common+0x42>
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	f000 0308 	and.w	r3, r0, #8
 8000a00:	9302      	str	r3, [sp, #8]
 8000a02:	2e02      	cmp	r6, #2
 8000a04:	d04a      	beq.n	8000a9c <__gnu_unwind_pr_common+0x108>
 8000a06:	f8b4 a000 	ldrh.w	sl, [r4]
 8000a0a:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000a0e:	3404      	adds	r4, #4
 8000a10:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000a12:	f029 0b01 	bic.w	fp, r9, #1
 8000a16:	210f      	movs	r1, #15
 8000a18:	4638      	mov	r0, r7
 8000a1a:	449b      	add	fp, r3
 8000a1c:	f7ff ff46 	bl	80008ac <_Unwind_GetGR>
 8000a20:	4583      	cmp	fp, r0
 8000a22:	d839      	bhi.n	8000a98 <__gnu_unwind_pr_common+0x104>
 8000a24:	f02a 0201 	bic.w	r2, sl, #1
 8000a28:	445a      	add	r2, fp
 8000a2a:	4282      	cmp	r2, r0
 8000a2c:	bf94      	ite	ls
 8000a2e:	2200      	movls	r2, #0
 8000a30:	2201      	movhi	r2, #1
 8000a32:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	f00a 0a01 	and.w	sl, sl, #1
 8000a3e:	ea43 030a 	orr.w	r3, r3, sl
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d04b      	beq.n	8000ade <__gnu_unwind_pr_common+0x14a>
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	d032      	beq.n	8000ab0 <__gnu_unwind_pr_common+0x11c>
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d1cc      	bne.n	80009e8 <__gnu_unwind_pr_common+0x54>
 8000a4e:	f1b8 0f00 	cmp.w	r8, #0
 8000a52:	d002      	beq.n	8000a5a <__gnu_unwind_pr_common+0xc6>
 8000a54:	2a00      	cmp	r2, #0
 8000a56:	f040 80cd 	bne.w	8000bf4 <__gnu_unwind_pr_common+0x260>
 8000a5a:	3404      	adds	r4, #4
 8000a5c:	f8d4 a000 	ldr.w	sl, [r4]
 8000a60:	f1ba 0f00 	cmp.w	sl, #0
 8000a64:	d1cd      	bne.n	8000a02 <__gnu_unwind_pr_common+0x6e>
 8000a66:	a905      	add	r1, sp, #20
 8000a68:	4638      	mov	r0, r7
 8000a6a:	f000 fb47 	bl	80010fc <__gnu_unwind_execute>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	d1ba      	bne.n	80009e8 <__gnu_unwind_pr_common+0x54>
 8000a72:	9b01      	ldr	r3, [sp, #4]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0b3      	beq.n	80009e0 <__gnu_unwind_pr_common+0x4c>
 8000a78:	210f      	movs	r1, #15
 8000a7a:	4638      	mov	r0, r7
 8000a7c:	f7ff ff16 	bl	80008ac <_Unwind_GetGR>
 8000a80:	210e      	movs	r1, #14
 8000a82:	4602      	mov	r2, r0
 8000a84:	4638      	mov	r0, r7
 8000a86:	f7ff ff37 	bl	80008f8 <_Unwind_SetGR>
 8000a8a:	4638      	mov	r0, r7
 8000a8c:	4a6a      	ldr	r2, [pc, #424]	; (8000c38 <__gnu_unwind_pr_common+0x2a4>)
 8000a8e:	210f      	movs	r1, #15
 8000a90:	f7ff ff32 	bl	80008f8 <_Unwind_SetGR>
 8000a94:	2007      	movs	r0, #7
 8000a96:	e7a8      	b.n	80009ea <__gnu_unwind_pr_common+0x56>
 8000a98:	2200      	movs	r2, #0
 8000a9a:	e7ca      	b.n	8000a32 <__gnu_unwind_pr_common+0x9e>
 8000a9c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000aa0:	3408      	adds	r4, #8
 8000aa2:	e7b5      	b.n	8000a10 <__gnu_unwind_pr_common+0x7c>
 8000aa4:	021b      	lsls	r3, r3, #8
 8000aa6:	9305      	str	r3, [sp, #20]
 8000aa8:	f88d 601d 	strb.w	r6, [sp, #29]
 8000aac:	2303      	movs	r3, #3
 8000aae:	e788      	b.n	80009c2 <__gnu_unwind_pr_common+0x2e>
 8000ab0:	f8d4 9000 	ldr.w	r9, [r4]
 8000ab4:	f029 4b00 	bic.w	fp, r9, #2147483648	; 0x80000000
 8000ab8:	f1b8 0f00 	cmp.w	r8, #0
 8000abc:	d146      	bne.n	8000b4c <__gnu_unwind_pr_common+0x1b8>
 8000abe:	b12a      	cbz	r2, 8000acc <__gnu_unwind_pr_common+0x138>
 8000ac0:	9b02      	ldr	r3, [sp, #8]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d05b      	beq.n	8000b7e <__gnu_unwind_pr_common+0x1ea>
 8000ac6:	f1bb 0f00 	cmp.w	fp, #0
 8000aca:	d073      	beq.n	8000bb4 <__gnu_unwind_pr_common+0x220>
 8000acc:	f1b9 0f00 	cmp.w	r9, #0
 8000ad0:	da00      	bge.n	8000ad4 <__gnu_unwind_pr_common+0x140>
 8000ad2:	3404      	adds	r4, #4
 8000ad4:	f10b 0b01 	add.w	fp, fp, #1
 8000ad8:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000adc:	e7be      	b.n	8000a5c <__gnu_unwind_pr_common+0xc8>
 8000ade:	f1b8 0f00 	cmp.w	r8, #0
 8000ae2:	d119      	bne.n	8000b18 <__gnu_unwind_pr_common+0x184>
 8000ae4:	b1b2      	cbz	r2, 8000b14 <__gnu_unwind_pr_common+0x180>
 8000ae6:	6861      	ldr	r1, [r4, #4]
 8000ae8:	6822      	ldr	r2, [r4, #0]
 8000aea:	1c88      	adds	r0, r1, #2
 8000aec:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000af0:	f43f af7a 	beq.w	80009e8 <__gnu_unwind_pr_common+0x54>
 8000af4:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000af8:	3101      	adds	r1, #1
 8000afa:	9304      	str	r3, [sp, #16]
 8000afc:	f000 808e 	beq.w	8000c1c <__gnu_unwind_pr_common+0x288>
 8000b00:	1d20      	adds	r0, r4, #4
 8000b02:	f7ff fdbf 	bl	8000684 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000b06:	ab04      	add	r3, sp, #16
 8000b08:	4601      	mov	r1, r0
 8000b0a:	4628      	mov	r0, r5
 8000b0c:	f3af 8000 	nop.w
 8000b10:	2800      	cmp	r0, #0
 8000b12:	d159      	bne.n	8000bc8 <__gnu_unwind_pr_common+0x234>
 8000b14:	3408      	adds	r4, #8
 8000b16:	e7a1      	b.n	8000a5c <__gnu_unwind_pr_common+0xc8>
 8000b18:	210d      	movs	r1, #13
 8000b1a:	4638      	mov	r0, r7
 8000b1c:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000b20:	f7ff fec4 	bl	80008ac <_Unwind_GetGR>
 8000b24:	4581      	cmp	r9, r0
 8000b26:	d1f5      	bne.n	8000b14 <__gnu_unwind_pr_common+0x180>
 8000b28:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b2a:	429c      	cmp	r4, r3
 8000b2c:	d1f2      	bne.n	8000b14 <__gnu_unwind_pr_common+0x180>
 8000b2e:	4620      	mov	r0, r4
 8000b30:	f7ff fce2 	bl	80004f8 <selfrel_offset31>
 8000b34:	210f      	movs	r1, #15
 8000b36:	4602      	mov	r2, r0
 8000b38:	4638      	mov	r0, r7
 8000b3a:	f7ff fedd 	bl	80008f8 <_Unwind_SetGR>
 8000b3e:	4638      	mov	r0, r7
 8000b40:	462a      	mov	r2, r5
 8000b42:	2100      	movs	r1, #0
 8000b44:	f7ff fed8 	bl	80008f8 <_Unwind_SetGR>
 8000b48:	2007      	movs	r0, #7
 8000b4a:	e74e      	b.n	80009ea <__gnu_unwind_pr_common+0x56>
 8000b4c:	210d      	movs	r1, #13
 8000b4e:	4638      	mov	r0, r7
 8000b50:	f8d5 a020 	ldr.w	sl, [r5, #32]
 8000b54:	f7ff feaa 	bl	80008ac <_Unwind_GetGR>
 8000b58:	4582      	cmp	sl, r0
 8000b5a:	d1b7      	bne.n	8000acc <__gnu_unwind_pr_common+0x138>
 8000b5c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b5e:	429c      	cmp	r4, r3
 8000b60:	d1b4      	bne.n	8000acc <__gnu_unwind_pr_common+0x138>
 8000b62:	2304      	movs	r3, #4
 8000b64:	2200      	movs	r2, #0
 8000b66:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 8000b6a:	18e3      	adds	r3, r4, r3
 8000b6c:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000b70:	636b      	str	r3, [r5, #52]	; 0x34
 8000b72:	6823      	ldr	r3, [r4, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db59      	blt.n	8000c2c <__gnu_unwind_pr_common+0x298>
 8000b78:	2301      	movs	r3, #1
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	e7aa      	b.n	8000ad4 <__gnu_unwind_pr_common+0x140>
 8000b7e:	4699      	mov	r9, r3
 8000b80:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000b84:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b88:	f104 0a04 	add.w	sl, r4, #4
 8000b8c:	46b0      	mov	r8, r6
 8000b8e:	461e      	mov	r6, r3
 8000b90:	e00e      	b.n	8000bb0 <__gnu_unwind_pr_common+0x21c>
 8000b92:	4650      	mov	r0, sl
 8000b94:	9604      	str	r6, [sp, #16]
 8000b96:	f7ff fd75 	bl	8000684 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4601      	mov	r1, r0
 8000b9e:	ab04      	add	r3, sp, #16
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	f109 0901 	add.w	r9, r9, #1
 8000ba6:	f10a 0a04 	add.w	sl, sl, #4
 8000baa:	f3af 8000 	nop.w
 8000bae:	b9d8      	cbnz	r0, 8000be8 <__gnu_unwind_pr_common+0x254>
 8000bb0:	45d9      	cmp	r9, fp
 8000bb2:	d1ee      	bne.n	8000b92 <__gnu_unwind_pr_common+0x1fe>
 8000bb4:	210d      	movs	r1, #13
 8000bb6:	4638      	mov	r0, r7
 8000bb8:	f7ff fe78 	bl	80008ac <_Unwind_GetGR>
 8000bbc:	9b04      	ldr	r3, [sp, #16]
 8000bbe:	6228      	str	r0, [r5, #32]
 8000bc0:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
 8000bc4:	2006      	movs	r0, #6
 8000bc6:	e710      	b.n	80009ea <__gnu_unwind_pr_common+0x56>
 8000bc8:	4681      	mov	r9, r0
 8000bca:	210d      	movs	r1, #13
 8000bcc:	4638      	mov	r0, r7
 8000bce:	f7ff fe6d 	bl	80008ac <_Unwind_GetGR>
 8000bd2:	f1b9 0f02 	cmp.w	r9, #2
 8000bd6:	bf04      	itt	eq
 8000bd8:	462b      	moveq	r3, r5
 8000bda:	9a04      	ldreq	r2, [sp, #16]
 8000bdc:	6228      	str	r0, [r5, #32]
 8000bde:	bf14      	ite	ne
 8000be0:	9b04      	ldrne	r3, [sp, #16]
 8000be2:	f843 2f2c 	streq.w	r2, [r3, #44]!
 8000be6:	e7eb      	b.n	8000bc0 <__gnu_unwind_pr_common+0x22c>
 8000be8:	4646      	mov	r6, r8
 8000bea:	f8d4 9000 	ldr.w	r9, [r4]
 8000bee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000bf2:	e76b      	b.n	8000acc <__gnu_unwind_pr_common+0x138>
 8000bf4:	4620      	mov	r0, r4
 8000bf6:	f7ff fc7f 	bl	80004f8 <selfrel_offset31>
 8000bfa:	3404      	adds	r4, #4
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	63ac      	str	r4, [r5, #56]	; 0x38
 8000c00:	4628      	mov	r0, r5
 8000c02:	4614      	mov	r4, r2
 8000c04:	f3af 8000 	nop.w
 8000c08:	2800      	cmp	r0, #0
 8000c0a:	f43f aeed 	beq.w	80009e8 <__gnu_unwind_pr_common+0x54>
 8000c0e:	4638      	mov	r0, r7
 8000c10:	4622      	mov	r2, r4
 8000c12:	210f      	movs	r1, #15
 8000c14:	f7ff fe70 	bl	80008f8 <_Unwind_SetGR>
 8000c18:	2007      	movs	r0, #7
 8000c1a:	e6e6      	b.n	80009ea <__gnu_unwind_pr_common+0x56>
 8000c1c:	210d      	movs	r1, #13
 8000c1e:	4638      	mov	r0, r7
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	f7ff fe43 	bl	80008ac <_Unwind_GetGR>
 8000c26:	9b01      	ldr	r3, [sp, #4]
 8000c28:	6228      	str	r0, [r5, #32]
 8000c2a:	e7c9      	b.n	8000bc0 <__gnu_unwind_pr_common+0x22c>
 8000c2c:	f10b 0001 	add.w	r0, fp, #1
 8000c30:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000c34:	e77c      	b.n	8000b30 <__gnu_unwind_pr_common+0x19c>
 8000c36:	bf00      	nop
 8000c38:	00000000 	.word	0x00000000

08000c3c <__aeabi_unwind_cpp_pr0>:
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e6a9      	b.n	8000994 <__gnu_unwind_pr_common>

08000c40 <__aeabi_unwind_cpp_pr1>:
 8000c40:	2301      	movs	r3, #1
 8000c42:	e6a7      	b.n	8000994 <__gnu_unwind_pr_common>

08000c44 <__aeabi_unwind_cpp_pr2>:
 8000c44:	2302      	movs	r3, #2
 8000c46:	e6a5      	b.n	8000994 <__gnu_unwind_pr_common>

08000c48 <_Unwind_VRS_Pop>:
 8000c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c4c:	4606      	mov	r6, r0
 8000c4e:	b0c3      	sub	sp, #268	; 0x10c
 8000c50:	4691      	mov	r9, r2
 8000c52:	461c      	mov	r4, r3
 8000c54:	2904      	cmp	r1, #4
 8000c56:	f200 809b 	bhi.w	8000d90 <_Unwind_VRS_Pop+0x148>
 8000c5a:	e8df f001 	tbb	[pc, r1]
 8000c5e:	567b      	.short	0x567b
 8000c60:	2e99      	.short	0x2e99
 8000c62:	03          	.byte	0x03
 8000c63:	00          	.byte	0x00
 8000c64:	2c00      	cmp	r4, #0
 8000c66:	f040 8093 	bne.w	8000d90 <_Unwind_VRS_Pop+0x148>
 8000c6a:	2a10      	cmp	r2, #16
 8000c6c:	f200 8090 	bhi.w	8000d90 <_Unwind_VRS_Pop+0x148>
 8000c70:	6803      	ldr	r3, [r0, #0]
 8000c72:	06dc      	lsls	r4, r3, #27
 8000c74:	f100 80f3 	bmi.w	8000e5e <_Unwind_VRS_Pop+0x216>
 8000c78:	af20      	add	r7, sp, #128	; 0x80
 8000c7a:	4638      	mov	r0, r7
 8000c7c:	f000 f9ae 	bl	8000fdc <__gnu_Unwind_Save_WMMXC>
 8000c80:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 8000c82:	4639      	mov	r1, r7
 8000c84:	2300      	movs	r3, #0
 8000c86:	f04f 0c01 	mov.w	ip, #1
 8000c8a:	fa0c f203 	lsl.w	r2, ip, r3
 8000c8e:	ea12 0f09 	tst.w	r2, r9
 8000c92:	4620      	mov	r0, r4
 8000c94:	f103 0301 	add.w	r3, r3, #1
 8000c98:	d003      	beq.n	8000ca2 <_Unwind_VRS_Pop+0x5a>
 8000c9a:	f850 2b04 	ldr.w	r2, [r0], #4
 8000c9e:	600a      	str	r2, [r1, #0]
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	f101 0104 	add.w	r1, r1, #4
 8000ca8:	d1ef      	bne.n	8000c8a <_Unwind_VRS_Pop+0x42>
 8000caa:	4638      	mov	r0, r7
 8000cac:	63b4      	str	r4, [r6, #56]	; 0x38
 8000cae:	f000 f98b 	bl	8000fc8 <__gnu_Unwind_Restore_WMMXC>
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	b043      	add	sp, #268	; 0x10c
 8000cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000cba:	2c03      	cmp	r4, #3
 8000cbc:	d168      	bne.n	8000d90 <_Unwind_VRS_Pop+0x148>
 8000cbe:	b294      	uxth	r4, r2
 8000cc0:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000cc4:	2b10      	cmp	r3, #16
 8000cc6:	ea4f 4912 	mov.w	r9, r2, lsr #16
 8000cca:	d861      	bhi.n	8000d90 <_Unwind_VRS_Pop+0x148>
 8000ccc:	6803      	ldr	r3, [r0, #0]
 8000cce:	071d      	lsls	r5, r3, #28
 8000cd0:	f100 80cd 	bmi.w	8000e6e <_Unwind_VRS_Pop+0x226>
 8000cd4:	af20      	add	r7, sp, #128	; 0x80
 8000cd6:	4638      	mov	r0, r7
 8000cd8:	f000 f954 	bl	8000f84 <__gnu_Unwind_Save_WMMXD>
 8000cdc:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000cde:	eb07 01c9 	add.w	r1, r7, r9, lsl #3
 8000ce2:	b154      	cbz	r4, 8000cfa <_Unwind_VRS_Pop+0xb2>
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	1ad0      	subs	r0, r2, r3
 8000ce8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000cec:	00e4      	lsls	r4, r4, #3
 8000cee:	581d      	ldr	r5, [r3, r0]
 8000cf0:	f843 5b04 	str.w	r5, [r3], #4
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	d1fa      	bne.n	8000cee <_Unwind_VRS_Pop+0xa6>
 8000cf8:	4422      	add	r2, r4
 8000cfa:	4638      	mov	r0, r7
 8000cfc:	63b2      	str	r2, [r6, #56]	; 0x38
 8000cfe:	f000 f91f 	bl	8000f40 <__gnu_Unwind_Restore_WMMXD>
 8000d02:	2000      	movs	r0, #0
 8000d04:	b043      	add	sp, #268	; 0x10c
 8000d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d0a:	2c01      	cmp	r4, #1
 8000d0c:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000d10:	fa1f f982 	uxth.w	r9, r2
 8000d14:	d038      	beq.n	8000d88 <_Unwind_VRS_Pop+0x140>
 8000d16:	2c05      	cmp	r4, #5
 8000d18:	d13a      	bne.n	8000d90 <_Unwind_VRS_Pop+0x148>
 8000d1a:	eb08 0309 	add.w	r3, r8, r9
 8000d1e:	2b20      	cmp	r3, #32
 8000d20:	d836      	bhi.n	8000d90 <_Unwind_VRS_Pop+0x148>
 8000d22:	f1b8 0f0f 	cmp.w	r8, #15
 8000d26:	d976      	bls.n	8000e16 <_Unwind_VRS_Pop+0x1ce>
 8000d28:	f1b9 0f00 	cmp.w	r9, #0
 8000d2c:	f040 8083 	bne.w	8000e36 <_Unwind_VRS_Pop+0x1ee>
 8000d30:	2b0f      	cmp	r3, #15
 8000d32:	d80b      	bhi.n	8000d4c <_Unwind_VRS_Pop+0x104>
 8000d34:	6833      	ldr	r3, [r6, #0]
 8000d36:	07d8      	lsls	r0, r3, #31
 8000d38:	d508      	bpl.n	8000d4c <_Unwind_VRS_Pop+0x104>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	f023 0301 	bic.w	r3, r3, #1
 8000d40:	f043 0302 	orr.w	r3, r3, #2
 8000d44:	f840 3b48 	str.w	r3, [r0], #72
 8000d48:	f000 f8ee 	bl	8000f28 <__gnu_Unwind_Save_VFP_D>
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	b043      	add	sp, #268	; 0x10c
 8000d50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d54:	b9e4      	cbnz	r4, 8000d90 <_Unwind_VRS_Pop+0x148>
 8000d56:	6b87      	ldr	r7, [r0, #56]	; 0x38
 8000d58:	4623      	mov	r3, r4
 8000d5a:	fa1f fc82 	uxth.w	ip, r2
 8000d5e:	2001      	movs	r0, #1
 8000d60:	1d34      	adds	r4, r6, #4
 8000d62:	fa00 f203 	lsl.w	r2, r0, r3
 8000d66:	ea12 0f0c 	tst.w	r2, ip
 8000d6a:	4639      	mov	r1, r7
 8000d6c:	d004      	beq.n	8000d78 <_Unwind_VRS_Pop+0x130>
 8000d6e:	f851 2b04 	ldr.w	r2, [r1], #4
 8000d72:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8000d76:	460f      	mov	r7, r1
 8000d78:	3301      	adds	r3, #1
 8000d7a:	2b10      	cmp	r3, #16
 8000d7c:	d1f1      	bne.n	8000d62 <_Unwind_VRS_Pop+0x11a>
 8000d7e:	f419 5000 	ands.w	r0, r9, #8192	; 0x2000
 8000d82:	d1e3      	bne.n	8000d4c <_Unwind_VRS_Pop+0x104>
 8000d84:	63b7      	str	r7, [r6, #56]	; 0x38
 8000d86:	e004      	b.n	8000d92 <_Unwind_VRS_Pop+0x14a>
 8000d88:	eb08 0309 	add.w	r3, r8, r9
 8000d8c:	2b10      	cmp	r3, #16
 8000d8e:	d903      	bls.n	8000d98 <_Unwind_VRS_Pop+0x150>
 8000d90:	2002      	movs	r0, #2
 8000d92:	b043      	add	sp, #268	; 0x10c
 8000d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d98:	f1b8 0f0f 	cmp.w	r8, #15
 8000d9c:	d8f8      	bhi.n	8000d90 <_Unwind_VRS_Pop+0x148>
 8000d9e:	6833      	ldr	r3, [r6, #0]
 8000da0:	07da      	lsls	r2, r3, #31
 8000da2:	d506      	bpl.n	8000db2 <_Unwind_VRS_Pop+0x16a>
 8000da4:	4630      	mov	r0, r6
 8000da6:	f023 0303 	bic.w	r3, r3, #3
 8000daa:	f840 3b48 	str.w	r3, [r0], #72
 8000dae:	f000 f8b3 	bl	8000f18 <__gnu_Unwind_Save_VFP>
 8000db2:	af20      	add	r7, sp, #128	; 0x80
 8000db4:	4638      	mov	r0, r7
 8000db6:	464d      	mov	r5, r9
 8000db8:	f000 f8ae 	bl	8000f18 <__gnu_Unwind_Save_VFP>
 8000dbc:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000dbe:	2d00      	cmp	r5, #0
 8000dc0:	d05e      	beq.n	8000e80 <_Unwind_VRS_Pop+0x238>
 8000dc2:	f04f 0900 	mov.w	r9, #0
 8000dc6:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
 8000dca:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
 8000dce:	3904      	subs	r1, #4
 8000dd0:	f852 0b04 	ldr.w	r0, [r2], #4
 8000dd4:	f841 0f04 	str.w	r0, [r1, #4]!
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d1f9      	bne.n	8000dd0 <_Unwind_VRS_Pop+0x188>
 8000ddc:	f1b9 0f00 	cmp.w	r9, #0
 8000de0:	d054      	beq.n	8000e8c <_Unwind_VRS_Pop+0x244>
 8000de2:	466f      	mov	r7, sp
 8000de4:	4641      	mov	r1, r8
 8000de6:	2910      	cmp	r1, #16
 8000de8:	bf38      	it	cc
 8000dea:	2110      	movcc	r1, #16
 8000dec:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8000df0:	3984      	subs	r1, #132	; 0x84
 8000df2:	eb03 02c9 	add.w	r2, r3, r9, lsl #3
 8000df6:	f853 5b04 	ldr.w	r5, [r3], #4
 8000dfa:	f841 5f04 	str.w	r5, [r1, #4]!
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d1f9      	bne.n	8000df6 <_Unwind_VRS_Pop+0x1ae>
 8000e02:	2c01      	cmp	r4, #1
 8000e04:	d03b      	beq.n	8000e7e <_Unwind_VRS_Pop+0x236>
 8000e06:	f1b8 0f0f 	cmp.w	r8, #15
 8000e0a:	63b2      	str	r2, [r6, #56]	; 0x38
 8000e0c:	d958      	bls.n	8000ec0 <_Unwind_VRS_Pop+0x278>
 8000e0e:	4638      	mov	r0, r7
 8000e10:	f000 f88e 	bl	8000f30 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000e14:	e79a      	b.n	8000d4c <_Unwind_VRS_Pop+0x104>
 8000e16:	2b10      	cmp	r3, #16
 8000e18:	d954      	bls.n	8000ec4 <_Unwind_VRS_Pop+0x27c>
 8000e1a:	6832      	ldr	r2, [r6, #0]
 8000e1c:	07d7      	lsls	r7, r2, #31
 8000e1e:	f1a3 0910 	sub.w	r9, r3, #16
 8000e22:	d509      	bpl.n	8000e38 <_Unwind_VRS_Pop+0x1f0>
 8000e24:	f022 0301 	bic.w	r3, r2, #1
 8000e28:	4630      	mov	r0, r6
 8000e2a:	f043 0302 	orr.w	r3, r3, #2
 8000e2e:	f840 3b48 	str.w	r3, [r0], #72
 8000e32:	f000 f879 	bl	8000f28 <__gnu_Unwind_Save_VFP_D>
 8000e36:	6832      	ldr	r2, [r6, #0]
 8000e38:	0753      	lsls	r3, r2, #29
 8000e3a:	d439      	bmi.n	8000eb0 <_Unwind_VRS_Pop+0x268>
 8000e3c:	f1b8 0f0f 	cmp.w	r8, #15
 8000e40:	d802      	bhi.n	8000e48 <_Unwind_VRS_Pop+0x200>
 8000e42:	a820      	add	r0, sp, #128	; 0x80
 8000e44:	f000 f870 	bl	8000f28 <__gnu_Unwind_Save_VFP_D>
 8000e48:	466f      	mov	r7, sp
 8000e4a:	4638      	mov	r0, r7
 8000e4c:	f1c8 0510 	rsb	r5, r8, #16
 8000e50:	f000 f872 	bl	8000f38 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e54:	2d00      	cmp	r5, #0
 8000e56:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000e58:	dd28      	ble.n	8000eac <_Unwind_VRS_Pop+0x264>
 8000e5a:	af20      	add	r7, sp, #128	; 0x80
 8000e5c:	e7b3      	b.n	8000dc6 <_Unwind_VRS_Pop+0x17e>
 8000e5e:	f023 0310 	bic.w	r3, r3, #16
 8000e62:	6003      	str	r3, [r0, #0]
 8000e64:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
 8000e68:	f000 f8b8 	bl	8000fdc <__gnu_Unwind_Save_WMMXC>
 8000e6c:	e704      	b.n	8000c78 <_Unwind_VRS_Pop+0x30>
 8000e6e:	f023 0308 	bic.w	r3, r3, #8
 8000e72:	6003      	str	r3, [r0, #0]
 8000e74:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000e78:	f000 f884 	bl	8000f84 <__gnu_Unwind_Save_WMMXD>
 8000e7c:	e72a      	b.n	8000cd4 <_Unwind_VRS_Pop+0x8c>
 8000e7e:	af20      	add	r7, sp, #128	; 0x80
 8000e80:	3204      	adds	r2, #4
 8000e82:	63b2      	str	r2, [r6, #56]	; 0x38
 8000e84:	4638      	mov	r0, r7
 8000e86:	f000 f843 	bl	8000f10 <__gnu_Unwind_Restore_VFP>
 8000e8a:	e75f      	b.n	8000d4c <_Unwind_VRS_Pop+0x104>
 8000e8c:	2c01      	cmp	r4, #1
 8000e8e:	d0f7      	beq.n	8000e80 <_Unwind_VRS_Pop+0x238>
 8000e90:	f1b8 0f0f 	cmp.w	r8, #15
 8000e94:	63b2      	str	r2, [r6, #56]	; 0x38
 8000e96:	f63f af59 	bhi.w	8000d4c <_Unwind_VRS_Pop+0x104>
 8000e9a:	4638      	mov	r0, r7
 8000e9c:	f000 f840 	bl	8000f20 <__gnu_Unwind_Restore_VFP_D>
 8000ea0:	f1b9 0f00 	cmp.w	r9, #0
 8000ea4:	f43f af52 	beq.w	8000d4c <_Unwind_VRS_Pop+0x104>
 8000ea8:	466f      	mov	r7, sp
 8000eaa:	e7b0      	b.n	8000e0e <_Unwind_VRS_Pop+0x1c6>
 8000eac:	4613      	mov	r3, r2
 8000eae:	e799      	b.n	8000de4 <_Unwind_VRS_Pop+0x19c>
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	f022 0204 	bic.w	r2, r2, #4
 8000eb6:	f840 2bd0 	str.w	r2, [r0], #208
 8000eba:	f000 f83d 	bl	8000f38 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ebe:	e7bd      	b.n	8000e3c <_Unwind_VRS_Pop+0x1f4>
 8000ec0:	af20      	add	r7, sp, #128	; 0x80
 8000ec2:	e7ea      	b.n	8000e9a <_Unwind_VRS_Pop+0x252>
 8000ec4:	6833      	ldr	r3, [r6, #0]
 8000ec6:	07d9      	lsls	r1, r3, #31
 8000ec8:	d508      	bpl.n	8000edc <_Unwind_VRS_Pop+0x294>
 8000eca:	f023 0301 	bic.w	r3, r3, #1
 8000ece:	4630      	mov	r0, r6
 8000ed0:	f043 0302 	orr.w	r3, r3, #2
 8000ed4:	f840 3b48 	str.w	r3, [r0], #72
 8000ed8:	f000 f826 	bl	8000f28 <__gnu_Unwind_Save_VFP_D>
 8000edc:	af20      	add	r7, sp, #128	; 0x80
 8000ede:	4638      	mov	r0, r7
 8000ee0:	464d      	mov	r5, r9
 8000ee2:	f000 f821 	bl	8000f28 <__gnu_Unwind_Save_VFP_D>
 8000ee6:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000ee8:	2d00      	cmp	r5, #0
 8000eea:	f47f af6a 	bne.w	8000dc2 <_Unwind_VRS_Pop+0x17a>
 8000eee:	4638      	mov	r0, r7
 8000ef0:	f000 f816 	bl	8000f20 <__gnu_Unwind_Restore_VFP_D>
 8000ef4:	e72a      	b.n	8000d4c <_Unwind_VRS_Pop+0x104>
 8000ef6:	bf00      	nop

08000ef8 <__restore_core_regs>:
 8000ef8:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000efc:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000f00:	469c      	mov	ip, r3
 8000f02:	46a6      	mov	lr, r4
 8000f04:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000f08:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000f0c:	46e5      	mov	sp, ip
 8000f0e:	bd00      	pop	{pc}

08000f10 <__gnu_Unwind_Restore_VFP>:
 8000f10:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <__gnu_Unwind_Save_VFP>:
 8000f18:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <__gnu_Unwind_Restore_VFP_D>:
 8000f20:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <__gnu_Unwind_Save_VFP_D>:
 8000f28:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop

08000f30 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f30:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f38:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <__gnu_Unwind_Restore_WMMXD>:
 8000f40:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f44:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f48:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f4c:	ecf0 3102 	ldfe	f3, [r0], #8
 8000f50:	ecf0 4102 	ldfe	f4, [r0], #8
 8000f54:	ecf0 5102 	ldfe	f5, [r0], #8
 8000f58:	ecf0 6102 	ldfe	f6, [r0], #8
 8000f5c:	ecf0 7102 	ldfe	f7, [r0], #8
 8000f60:	ecf0 8102 	ldfp	f0, [r0], #8
 8000f64:	ecf0 9102 	ldfp	f1, [r0], #8
 8000f68:	ecf0 a102 	ldfp	f2, [r0], #8
 8000f6c:	ecf0 b102 	ldfp	f3, [r0], #8
 8000f70:	ecf0 c102 	ldfp	f4, [r0], #8
 8000f74:	ecf0 d102 	ldfp	f5, [r0], #8
 8000f78:	ecf0 e102 	ldfp	f6, [r0], #8
 8000f7c:	ecf0 f102 	ldfp	f7, [r0], #8
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <__gnu_Unwind_Save_WMMXD>:
 8000f84:	ece0 0102 	stfe	f0, [r0], #8
 8000f88:	ece0 1102 	stfe	f1, [r0], #8
 8000f8c:	ece0 2102 	stfe	f2, [r0], #8
 8000f90:	ece0 3102 	stfe	f3, [r0], #8
 8000f94:	ece0 4102 	stfe	f4, [r0], #8
 8000f98:	ece0 5102 	stfe	f5, [r0], #8
 8000f9c:	ece0 6102 	stfe	f6, [r0], #8
 8000fa0:	ece0 7102 	stfe	f7, [r0], #8
 8000fa4:	ece0 8102 	stfp	f0, [r0], #8
 8000fa8:	ece0 9102 	stfp	f1, [r0], #8
 8000fac:	ece0 a102 	stfp	f2, [r0], #8
 8000fb0:	ece0 b102 	stfp	f3, [r0], #8
 8000fb4:	ece0 c102 	stfp	f4, [r0], #8
 8000fb8:	ece0 d102 	stfp	f5, [r0], #8
 8000fbc:	ece0 e102 	stfp	f6, [r0], #8
 8000fc0:	ece0 f102 	stfp	f7, [r0], #8
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <__gnu_Unwind_Restore_WMMXC>:
 8000fc8:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000fcc:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000fd0:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000fd4:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <__gnu_Unwind_Save_WMMXC>:
 8000fdc:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000fe0:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000fe4:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000fe8:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <_Unwind_RaiseException>:
 8000ff0:	46ec      	mov	ip, sp
 8000ff2:	b500      	push	{lr}
 8000ff4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000ff8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000ffc:	f04f 0300 	mov.w	r3, #0
 8001000:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001004:	a901      	add	r1, sp, #4
 8001006:	f7ff fbcb 	bl	80007a0 <__gnu_Unwind_RaiseException>
 800100a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800100e:	b012      	add	sp, #72	; 0x48
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <_Unwind_Resume>:
 8001014:	46ec      	mov	ip, sp
 8001016:	b500      	push	{lr}
 8001018:	e92d 5000 	stmdb	sp!, {ip, lr}
 800101c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001020:	f04f 0300 	mov.w	r3, #0
 8001024:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001028:	a901      	add	r1, sp, #4
 800102a:	f7ff fbf5 	bl	8000818 <__gnu_Unwind_Resume>
 800102e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001032:	b012      	add	sp, #72	; 0x48
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <_Unwind_Resume_or_Rethrow>:
 8001038:	46ec      	mov	ip, sp
 800103a:	b500      	push	{lr}
 800103c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001040:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	e92d 000c 	stmdb	sp!, {r2, r3}
 800104c:	a901      	add	r1, sp, #4
 800104e:	f7ff fc05 	bl	800085c <__gnu_Unwind_Resume_or_Rethrow>
 8001052:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001056:	b012      	add	sp, #72	; 0x48
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop

0800105c <_Unwind_ForcedUnwind>:
 800105c:	46ec      	mov	ip, sp
 800105e:	b500      	push	{lr}
 8001060:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001064:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001070:	ab01      	add	r3, sp, #4
 8001072:	f7ff fbc9 	bl	8000808 <__gnu_Unwind_ForcedUnwind>
 8001076:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800107a:	b012      	add	sp, #72	; 0x48
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <_Unwind_Backtrace>:
 8001080:	46ec      	mov	ip, sp
 8001082:	b500      	push	{lr}
 8001084:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001088:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001094:	aa01      	add	r2, sp, #4
 8001096:	f7ff fc3b 	bl	8000910 <__gnu_Unwind_Backtrace>
 800109a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800109e:	b012      	add	sp, #72	; 0x48
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop

080010a4 <next_unwind_byte>:
 80010a4:	7a02      	ldrb	r2, [r0, #8]
 80010a6:	4603      	mov	r3, r0
 80010a8:	b97a      	cbnz	r2, 80010ca <next_unwind_byte+0x26>
 80010aa:	7a42      	ldrb	r2, [r0, #9]
 80010ac:	b1a2      	cbz	r2, 80010d8 <next_unwind_byte+0x34>
 80010ae:	6841      	ldr	r1, [r0, #4]
 80010b0:	3a01      	subs	r2, #1
 80010b2:	b410      	push	{r4}
 80010b4:	7242      	strb	r2, [r0, #9]
 80010b6:	6808      	ldr	r0, [r1, #0]
 80010b8:	2203      	movs	r2, #3
 80010ba:	1d0c      	adds	r4, r1, #4
 80010bc:	721a      	strb	r2, [r3, #8]
 80010be:	0202      	lsls	r2, r0, #8
 80010c0:	605c      	str	r4, [r3, #4]
 80010c2:	0e00      	lsrs	r0, r0, #24
 80010c4:	bc10      	pop	{r4}
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	4770      	bx	lr
 80010ca:	6800      	ldr	r0, [r0, #0]
 80010cc:	3a01      	subs	r2, #1
 80010ce:	721a      	strb	r2, [r3, #8]
 80010d0:	0202      	lsls	r2, r0, #8
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	0e00      	lsrs	r0, r0, #24
 80010d6:	4770      	bx	lr
 80010d8:	20b0      	movs	r0, #176	; 0xb0
 80010da:	4770      	bx	lr

080010dc <_Unwind_GetGR.constprop.0>:
 80010dc:	b500      	push	{lr}
 80010de:	b085      	sub	sp, #20
 80010e0:	2300      	movs	r3, #0
 80010e2:	aa03      	add	r2, sp, #12
 80010e4:	9200      	str	r2, [sp, #0]
 80010e6:	4619      	mov	r1, r3
 80010e8:	220c      	movs	r2, #12
 80010ea:	f7ff fbc7 	bl	800087c <_Unwind_VRS_Get>
 80010ee:	9803      	ldr	r0, [sp, #12]
 80010f0:	b005      	add	sp, #20
 80010f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80010f6:	bf00      	nop

080010f8 <unwind_UCB_from_context>:
 80010f8:	e7f0      	b.n	80010dc <_Unwind_GetGR.constprop.0>
 80010fa:	bf00      	nop

080010fc <__gnu_unwind_execute>:
 80010fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001100:	b085      	sub	sp, #20
 8001102:	4607      	mov	r7, r0
 8001104:	460e      	mov	r6, r1
 8001106:	f04f 0800 	mov.w	r8, #0
 800110a:	ad03      	add	r5, sp, #12
 800110c:	4630      	mov	r0, r6
 800110e:	f7ff ffc9 	bl	80010a4 <next_unwind_byte>
 8001112:	28b0      	cmp	r0, #176	; 0xb0
 8001114:	4604      	mov	r4, r0
 8001116:	f000 80cb 	beq.w	80012b0 <__gnu_unwind_execute+0x1b4>
 800111a:	0603      	lsls	r3, r0, #24
 800111c:	d540      	bpl.n	80011a0 <__gnu_unwind_execute+0xa4>
 800111e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001122:	2b80      	cmp	r3, #128	; 0x80
 8001124:	d056      	beq.n	80011d4 <__gnu_unwind_execute+0xd8>
 8001126:	2bb0      	cmp	r3, #176	; 0xb0
 8001128:	d07d      	beq.n	8001226 <__gnu_unwind_execute+0x12a>
 800112a:	d81c      	bhi.n	8001166 <__gnu_unwind_execute+0x6a>
 800112c:	2b90      	cmp	r3, #144	; 0x90
 800112e:	f000 8093 	beq.w	8001258 <__gnu_unwind_execute+0x15c>
 8001132:	2ba0      	cmp	r3, #160	; 0xa0
 8001134:	d113      	bne.n	800115e <__gnu_unwind_execute+0x62>
 8001136:	43c3      	mvns	r3, r0
 8001138:	f003 0307 	and.w	r3, r3, #7
 800113c:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001140:	411a      	asrs	r2, r3
 8001142:	0701      	lsls	r1, r0, #28
 8001144:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001148:	f04f 0300 	mov.w	r3, #0
 800114c:	bf48      	it	mi
 800114e:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001152:	4619      	mov	r1, r3
 8001154:	4638      	mov	r0, r7
 8001156:	f7ff fd77 	bl	8000c48 <_Unwind_VRS_Pop>
 800115a:	2800      	cmp	r0, #0
 800115c:	d0d6      	beq.n	800110c <__gnu_unwind_execute+0x10>
 800115e:	2009      	movs	r0, #9
 8001160:	b005      	add	sp, #20
 8001162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001166:	2bc0      	cmp	r3, #192	; 0xc0
 8001168:	d14b      	bne.n	8001202 <__gnu_unwind_execute+0x106>
 800116a:	28c6      	cmp	r0, #198	; 0xc6
 800116c:	f000 8089 	beq.w	8001282 <__gnu_unwind_execute+0x186>
 8001170:	28c7      	cmp	r0, #199	; 0xc7
 8001172:	f000 80a2 	beq.w	80012ba <__gnu_unwind_execute+0x1be>
 8001176:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800117a:	2bc0      	cmp	r3, #192	; 0xc0
 800117c:	f000 80bc 	beq.w	80012f8 <__gnu_unwind_execute+0x1fc>
 8001180:	28c8      	cmp	r0, #200	; 0xc8
 8001182:	f000 80bf 	beq.w	8001304 <__gnu_unwind_execute+0x208>
 8001186:	28c9      	cmp	r0, #201	; 0xc9
 8001188:	d1e9      	bne.n	800115e <__gnu_unwind_execute+0x62>
 800118a:	4630      	mov	r0, r6
 800118c:	f7ff ff8a 	bl	80010a4 <next_unwind_byte>
 8001190:	0302      	lsls	r2, r0, #12
 8001192:	f000 000f 	and.w	r0, r0, #15
 8001196:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800119a:	3001      	adds	r0, #1
 800119c:	4302      	orrs	r2, r0
 800119e:	e039      	b.n	8001214 <__gnu_unwind_execute+0x118>
 80011a0:	0083      	lsls	r3, r0, #2
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f103 0904 	add.w	r9, r3, #4
 80011a8:	2300      	movs	r3, #0
 80011aa:	4619      	mov	r1, r3
 80011ac:	9500      	str	r5, [sp, #0]
 80011ae:	220d      	movs	r2, #13
 80011b0:	4638      	mov	r0, r7
 80011b2:	f7ff fb63 	bl	800087c <_Unwind_VRS_Get>
 80011b6:	9b03      	ldr	r3, [sp, #12]
 80011b8:	0660      	lsls	r0, r4, #25
 80011ba:	bf4c      	ite	mi
 80011bc:	eba3 0309 	submi.w	r3, r3, r9
 80011c0:	444b      	addpl	r3, r9
 80011c2:	9303      	str	r3, [sp, #12]
 80011c4:	2300      	movs	r3, #0
 80011c6:	9500      	str	r5, [sp, #0]
 80011c8:	220d      	movs	r2, #13
 80011ca:	4619      	mov	r1, r3
 80011cc:	4638      	mov	r0, r7
 80011ce:	f7ff fb7b 	bl	80008c8 <_Unwind_VRS_Set>
 80011d2:	e79b      	b.n	800110c <__gnu_unwind_execute+0x10>
 80011d4:	0204      	lsls	r4, r0, #8
 80011d6:	4630      	mov	r0, r6
 80011d8:	f7ff ff64 	bl	80010a4 <next_unwind_byte>
 80011dc:	4320      	orrs	r0, r4
 80011de:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80011e2:	d0bc      	beq.n	800115e <__gnu_unwind_execute+0x62>
 80011e4:	0104      	lsls	r4, r0, #4
 80011e6:	2300      	movs	r3, #0
 80011e8:	b2a2      	uxth	r2, r4
 80011ea:	4619      	mov	r1, r3
 80011ec:	4638      	mov	r0, r7
 80011ee:	f7ff fd2b 	bl	8000c48 <_Unwind_VRS_Pop>
 80011f2:	2800      	cmp	r0, #0
 80011f4:	d1b3      	bne.n	800115e <__gnu_unwind_execute+0x62>
 80011f6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80011fa:	bf18      	it	ne
 80011fc:	f04f 0801 	movne.w	r8, #1
 8001200:	e784      	b.n	800110c <__gnu_unwind_execute+0x10>
 8001202:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001206:	2bd0      	cmp	r3, #208	; 0xd0
 8001208:	d1a9      	bne.n	800115e <__gnu_unwind_execute+0x62>
 800120a:	f000 0207 	and.w	r2, r0, #7
 800120e:	3201      	adds	r2, #1
 8001210:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001214:	2305      	movs	r3, #5
 8001216:	2101      	movs	r1, #1
 8001218:	4638      	mov	r0, r7
 800121a:	f7ff fd15 	bl	8000c48 <_Unwind_VRS_Pop>
 800121e:	2800      	cmp	r0, #0
 8001220:	f43f af74 	beq.w	800110c <__gnu_unwind_execute+0x10>
 8001224:	e79b      	b.n	800115e <__gnu_unwind_execute+0x62>
 8001226:	28b1      	cmp	r0, #177	; 0xb1
 8001228:	d037      	beq.n	800129a <__gnu_unwind_execute+0x19e>
 800122a:	28b2      	cmp	r0, #178	; 0xb2
 800122c:	f000 8087 	beq.w	800133e <__gnu_unwind_execute+0x242>
 8001230:	28b3      	cmp	r0, #179	; 0xb3
 8001232:	d056      	beq.n	80012e2 <__gnu_unwind_execute+0x1e6>
 8001234:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001238:	2bb4      	cmp	r3, #180	; 0xb4
 800123a:	d090      	beq.n	800115e <__gnu_unwind_execute+0x62>
 800123c:	f000 0207 	and.w	r2, r0, #7
 8001240:	3201      	adds	r2, #1
 8001242:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001246:	2301      	movs	r3, #1
 8001248:	4619      	mov	r1, r3
 800124a:	4638      	mov	r0, r7
 800124c:	f7ff fcfc 	bl	8000c48 <_Unwind_VRS_Pop>
 8001250:	2800      	cmp	r0, #0
 8001252:	f43f af5b 	beq.w	800110c <__gnu_unwind_execute+0x10>
 8001256:	e782      	b.n	800115e <__gnu_unwind_execute+0x62>
 8001258:	f000 030d 	and.w	r3, r0, #13
 800125c:	2b0d      	cmp	r3, #13
 800125e:	f43f af7e 	beq.w	800115e <__gnu_unwind_execute+0x62>
 8001262:	2300      	movs	r3, #0
 8001264:	f000 020f 	and.w	r2, r0, #15
 8001268:	4619      	mov	r1, r3
 800126a:	9500      	str	r5, [sp, #0]
 800126c:	4638      	mov	r0, r7
 800126e:	f7ff fb05 	bl	800087c <_Unwind_VRS_Get>
 8001272:	2300      	movs	r3, #0
 8001274:	9500      	str	r5, [sp, #0]
 8001276:	220d      	movs	r2, #13
 8001278:	4619      	mov	r1, r3
 800127a:	4638      	mov	r0, r7
 800127c:	f7ff fb24 	bl	80008c8 <_Unwind_VRS_Set>
 8001280:	e744      	b.n	800110c <__gnu_unwind_execute+0x10>
 8001282:	4630      	mov	r0, r6
 8001284:	f7ff ff0e 	bl	80010a4 <next_unwind_byte>
 8001288:	0302      	lsls	r2, r0, #12
 800128a:	f000 000f 	and.w	r0, r0, #15
 800128e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001292:	3001      	adds	r0, #1
 8001294:	4302      	orrs	r2, r0
 8001296:	2303      	movs	r3, #3
 8001298:	e7d6      	b.n	8001248 <__gnu_unwind_execute+0x14c>
 800129a:	4630      	mov	r0, r6
 800129c:	f7ff ff02 	bl	80010a4 <next_unwind_byte>
 80012a0:	4602      	mov	r2, r0
 80012a2:	2800      	cmp	r0, #0
 80012a4:	f43f af5b 	beq.w	800115e <__gnu_unwind_execute+0x62>
 80012a8:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80012ac:	d0cc      	beq.n	8001248 <__gnu_unwind_execute+0x14c>
 80012ae:	e756      	b.n	800115e <__gnu_unwind_execute+0x62>
 80012b0:	f1b8 0f00 	cmp.w	r8, #0
 80012b4:	d032      	beq.n	800131c <__gnu_unwind_execute+0x220>
 80012b6:	2000      	movs	r0, #0
 80012b8:	e752      	b.n	8001160 <__gnu_unwind_execute+0x64>
 80012ba:	4630      	mov	r0, r6
 80012bc:	f7ff fef2 	bl	80010a4 <next_unwind_byte>
 80012c0:	4602      	mov	r2, r0
 80012c2:	2800      	cmp	r0, #0
 80012c4:	f43f af4b 	beq.w	800115e <__gnu_unwind_execute+0x62>
 80012c8:	f010 0ff0 	tst.w	r0, #240	; 0xf0
 80012cc:	f47f af47 	bne.w	800115e <__gnu_unwind_execute+0x62>
 80012d0:	2300      	movs	r3, #0
 80012d2:	2104      	movs	r1, #4
 80012d4:	4638      	mov	r0, r7
 80012d6:	f7ff fcb7 	bl	8000c48 <_Unwind_VRS_Pop>
 80012da:	2800      	cmp	r0, #0
 80012dc:	f43f af16 	beq.w	800110c <__gnu_unwind_execute+0x10>
 80012e0:	e73d      	b.n	800115e <__gnu_unwind_execute+0x62>
 80012e2:	4630      	mov	r0, r6
 80012e4:	f7ff fede 	bl	80010a4 <next_unwind_byte>
 80012e8:	0302      	lsls	r2, r0, #12
 80012ea:	f000 000f 	and.w	r0, r0, #15
 80012ee:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80012f2:	3001      	adds	r0, #1
 80012f4:	4302      	orrs	r2, r0
 80012f6:	e7a6      	b.n	8001246 <__gnu_unwind_execute+0x14a>
 80012f8:	f000 020f 	and.w	r2, r0, #15
 80012fc:	3201      	adds	r2, #1
 80012fe:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001302:	e7c8      	b.n	8001296 <__gnu_unwind_execute+0x19a>
 8001304:	4630      	mov	r0, r6
 8001306:	f7ff fecd 	bl	80010a4 <next_unwind_byte>
 800130a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800130e:	f000 030f 	and.w	r3, r0, #15
 8001312:	3210      	adds	r2, #16
 8001314:	3301      	adds	r3, #1
 8001316:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800131a:	e77b      	b.n	8001214 <__gnu_unwind_execute+0x118>
 800131c:	ac03      	add	r4, sp, #12
 800131e:	4643      	mov	r3, r8
 8001320:	220e      	movs	r2, #14
 8001322:	4641      	mov	r1, r8
 8001324:	9400      	str	r4, [sp, #0]
 8001326:	4638      	mov	r0, r7
 8001328:	f7ff faa8 	bl	800087c <_Unwind_VRS_Get>
 800132c:	9400      	str	r4, [sp, #0]
 800132e:	4643      	mov	r3, r8
 8001330:	220f      	movs	r2, #15
 8001332:	4641      	mov	r1, r8
 8001334:	4638      	mov	r0, r7
 8001336:	f7ff fac7 	bl	80008c8 <_Unwind_VRS_Set>
 800133a:	4640      	mov	r0, r8
 800133c:	e710      	b.n	8001160 <__gnu_unwind_execute+0x64>
 800133e:	2300      	movs	r3, #0
 8001340:	220d      	movs	r2, #13
 8001342:	4619      	mov	r1, r3
 8001344:	9500      	str	r5, [sp, #0]
 8001346:	4638      	mov	r0, r7
 8001348:	f7ff fa98 	bl	800087c <_Unwind_VRS_Get>
 800134c:	4630      	mov	r0, r6
 800134e:	f7ff fea9 	bl	80010a4 <next_unwind_byte>
 8001352:	0602      	lsls	r2, r0, #24
 8001354:	9c03      	ldr	r4, [sp, #12]
 8001356:	f04f 0902 	mov.w	r9, #2
 800135a:	d50c      	bpl.n	8001376 <__gnu_unwind_execute+0x27a>
 800135c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001360:	fa00 f009 	lsl.w	r0, r0, r9
 8001364:	4404      	add	r4, r0
 8001366:	4630      	mov	r0, r6
 8001368:	9403      	str	r4, [sp, #12]
 800136a:	f7ff fe9b 	bl	80010a4 <next_unwind_byte>
 800136e:	0603      	lsls	r3, r0, #24
 8001370:	f109 0907 	add.w	r9, r9, #7
 8001374:	d4f2      	bmi.n	800135c <__gnu_unwind_execute+0x260>
 8001376:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 800137a:	fa03 f309 	lsl.w	r3, r3, r9
 800137e:	f504 7401 	add.w	r4, r4, #516	; 0x204
 8001382:	4423      	add	r3, r4
 8001384:	e71d      	b.n	80011c2 <__gnu_unwind_execute+0xc6>
 8001386:	bf00      	nop

08001388 <__gnu_unwind_frame>:
 8001388:	b510      	push	{r4, lr}
 800138a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800138c:	6853      	ldr	r3, [r2, #4]
 800138e:	b084      	sub	sp, #16
 8001390:	f04f 0c03 	mov.w	ip, #3
 8001394:	3208      	adds	r2, #8
 8001396:	021c      	lsls	r4, r3, #8
 8001398:	4608      	mov	r0, r1
 800139a:	0e1b      	lsrs	r3, r3, #24
 800139c:	a901      	add	r1, sp, #4
 800139e:	9401      	str	r4, [sp, #4]
 80013a0:	9202      	str	r2, [sp, #8]
 80013a2:	f88d c00c 	strb.w	ip, [sp, #12]
 80013a6:	f88d 300d 	strb.w	r3, [sp, #13]
 80013aa:	f7ff fea7 	bl	80010fc <__gnu_unwind_execute>
 80013ae:	b004      	add	sp, #16
 80013b0:	bd10      	pop	{r4, pc}
 80013b2:	bf00      	nop

080013b4 <_Unwind_GetRegionStart>:
 80013b4:	b508      	push	{r3, lr}
 80013b6:	f7ff fe9f 	bl	80010f8 <unwind_UCB_from_context>
 80013ba:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80013bc:	bd08      	pop	{r3, pc}
 80013be:	bf00      	nop

080013c0 <_Unwind_GetLanguageSpecificData>:
 80013c0:	b508      	push	{r3, lr}
 80013c2:	f7ff fe99 	bl	80010f8 <unwind_UCB_from_context>
 80013c6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80013c8:	79c3      	ldrb	r3, [r0, #7]
 80013ca:	3302      	adds	r3, #2
 80013cc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80013d0:	bd08      	pop	{r3, pc}
 80013d2:	bf00      	nop

080013d4 <__aeabi_idiv0>:
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop

080013d8 <BSP_LED_Init>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08c      	sub	sp, #48	; 0x30
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  if (Led <= LED4)
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b03      	cmp	r3, #3
 80013e6:	d86d      	bhi.n	80014c4 <BSP_LED_Init+0xec>
  {
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = GPIO_PIN[Led];
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	4a38      	ldr	r2, [pc, #224]	; (80014cc <BSP_LED_Init+0xf4>)
 80013ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f0:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	62bb      	str	r3, [r7, #40]	; 0x28

    switch(Led)
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	2b03      	cmp	r3, #3
 8001402:	d847      	bhi.n	8001494 <BSP_LED_Init+0xbc>
 8001404:	a201      	add	r2, pc, #4	; (adr r2, 800140c <BSP_LED_Init+0x34>)
 8001406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140a:	bf00      	nop
 800140c:	0800141d 	.word	0x0800141d
 8001410:	0800143b 	.word	0x0800143b
 8001414:	08001459 	.word	0x08001459
 8001418:	08001477 	.word	0x08001477
    {
    case LED1 :
      LED1_GPIO_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	61bb      	str	r3, [r7, #24]
 8001420:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <BSP_LED_Init+0xf8>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	4a2a      	ldr	r2, [pc, #168]	; (80014d0 <BSP_LED_Init+0xf8>)
 8001426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800142a:	6313      	str	r3, [r2, #48]	; 0x30
 800142c:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <BSP_LED_Init+0xf8>)
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001434:	61bb      	str	r3, [r7, #24]
 8001436:	69bb      	ldr	r3, [r7, #24]
      break;
 8001438:	e02d      	b.n	8001496 <BSP_LED_Init+0xbe>
    case LED2 :
      LED2_GPIO_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <BSP_LED_Init+0xf8>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a23      	ldr	r2, [pc, #140]	; (80014d0 <BSP_LED_Init+0xf8>)
 8001444:	f043 0308 	orr.w	r3, r3, #8
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <BSP_LED_Init+0xf8>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697b      	ldr	r3, [r7, #20]
      break;
 8001456:	e01e      	b.n	8001496 <BSP_LED_Init+0xbe>
    case LED3 :
      LED3_GPIO_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <BSP_LED_Init+0xf8>)
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001460:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <BSP_LED_Init+0xf8>)
 8001462:	f043 0308 	orr.w	r3, r3, #8
 8001466:	6313      	str	r3, [r2, #48]	; 0x30
 8001468:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <BSP_LED_Init+0xf8>)
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	f003 0308 	and.w	r3, r3, #8
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]
      break;
 8001474:	e00f      	b.n	8001496 <BSP_LED_Init+0xbe>
    case LED4 :
      LED4_GPIO_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <BSP_LED_Init+0xf8>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a14      	ldr	r2, [pc, #80]	; (80014d0 <BSP_LED_Init+0xf8>)
 8001480:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <BSP_LED_Init+0xf8>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
      break;
 8001492:	e000      	b.n	8001496 <BSP_LED_Init+0xbe>
    default :
      break;
 8001494:	bf00      	nop

    } /* end switch */

    HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <BSP_LED_Init+0xfc>)
 800149a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149e:	f107 021c 	add.w	r2, r7, #28
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 f9d3 	bl	8001850 <HAL_GPIO_Init>

    /* By default, turn off LED by setting a high level on corresponding GPIO */
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	4a09      	ldr	r2, [pc, #36]	; (80014d4 <BSP_LED_Init+0xfc>)
 80014ae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	4a05      	ldr	r2, [pc, #20]	; (80014cc <BSP_LED_Init+0xf4>)
 80014b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	2201      	movs	r2, #1
 80014be:	4619      	mov	r1, r3
 80014c0:	f000 fb72 	bl	8001ba8 <HAL_GPIO_WritePin>

  } /* of if (Led <= LED4) */

}
 80014c4:	bf00      	nop
 80014c6:	3730      	adds	r7, #48	; 0x30
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20000000 	.word	0x20000000
 80014d0:	40023800 	.word	0x40023800
 80014d4:	20000010 	.word	0x20000010

080014d8 <BSP_LED_On>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
  if (Led <= LED4)
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2b03      	cmp	r3, #3
 80014e6:	d80c      	bhi.n	8001502 <BSP_LED_On+0x2a>
  {
     HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	4a08      	ldr	r2, [pc, #32]	; (800150c <BSP_LED_On+0x34>)
 80014ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	4a07      	ldr	r2, [pc, #28]	; (8001510 <BSP_LED_On+0x38>)
 80014f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	2200      	movs	r2, #0
 80014fc:	4619      	mov	r1, r3
 80014fe:	f000 fb53 	bl	8001ba8 <HAL_GPIO_WritePin>
  }

}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000010 	.word	0x20000010
 8001510:	20000000 	.word	0x20000000

08001514 <BSP_LED_Off>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  if (Led <= LED4)
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	2b03      	cmp	r3, #3
 8001522:	d80c      	bhi.n	800153e <BSP_LED_Off+0x2a>
  {
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	4a08      	ldr	r2, [pc, #32]	; (8001548 <BSP_LED_Off+0x34>)
 8001528:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	4a07      	ldr	r2, [pc, #28]	; (800154c <BSP_LED_Off+0x38>)
 8001530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001534:	b29b      	uxth	r3, r3
 8001536:	2201      	movs	r2, #1
 8001538:	4619      	mov	r1, r3
 800153a:	f000 fb35 	bl	8001ba8 <HAL_GPIO_WritePin>
  }
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000010 	.word	0x20000010
 800154c:	20000000 	.word	0x20000000

08001550 <BSP_LED_Toggle>:
  *            @arg  LED2
  *            @arg  LED3
  *            @arg  LED4
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	71fb      	strb	r3, [r7, #7]
  if (Led <= LED4)
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2b03      	cmp	r3, #3
 800155e:	d80c      	bhi.n	800157a <BSP_LED_Toggle+0x2a>
  {
     HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	4a08      	ldr	r2, [pc, #32]	; (8001584 <BSP_LED_Toggle+0x34>)
 8001564:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	4907      	ldr	r1, [pc, #28]	; (8001588 <BSP_LED_Toggle+0x38>)
 800156c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001570:	b29b      	uxth	r3, r3
 8001572:	4619      	mov	r1, r3
 8001574:	4610      	mov	r0, r2
 8001576:	f000 fb30 	bl	8001bda <HAL_GPIO_TogglePin>
  }
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000010 	.word	0x20000010
 8001588:	20000000 	.word	0x20000000

0800158c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <SystemInit+0x60>)
 8001592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001596:	4a15      	ldr	r2, [pc, #84]	; (80015ec <SystemInit+0x60>)
 8001598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800159c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <SystemInit+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a12      	ldr	r2, [pc, #72]	; (80015f0 <SystemInit+0x64>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015ac:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <SystemInit+0x64>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80015b2:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <SystemInit+0x64>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <SystemInit+0x64>)
 80015b8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80015bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <SystemInit+0x64>)
 80015c4:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <SystemInit+0x68>)
 80015c6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <SystemInit+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <SystemInit+0x64>)
 80015ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <SystemInit+0x64>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <SystemInit+0x60>)
 80015dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015e0:	609a      	str	r2, [r3, #8]
#endif
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00
 80015f0:	40023800 	.word	0x40023800
 80015f4:	24003010 	.word	0x24003010

080015f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015fc:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_Init+0x40>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0d      	ldr	r2, [pc, #52]	; (8001638 <HAL_Init+0x40>)
 8001602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001606:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0a      	ldr	r2, [pc, #40]	; (8001638 <HAL_Init+0x40>)
 800160e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001612:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001614:	4b08      	ldr	r3, [pc, #32]	; (8001638 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a07      	ldr	r2, [pc, #28]	; (8001638 <HAL_Init+0x40>)
 800161a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001620:	2003      	movs	r0, #3
 8001622:	f000 f8e0 	bl	80017e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001626:	200f      	movs	r0, #15
 8001628:	f001 fbf6 	bl	8002e18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800162c:	f000 f806 	bl	800163c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023c00 	.word	0x40023c00

0800163c <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
	...

0800164c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x20>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_IncTick+0x24>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_IncTick+0x24>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000028 	.word	0x20000028
 8001670:	2000009c 	.word	0x2000009c

08001674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return uwTick;
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <HAL_GetTick+0x14>)
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	2000009c 	.word	0x2000009c

0800168c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a8:	4013      	ands	r3, r2
 80016aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016be:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <__NVIC_SetPriorityGrouping+0x44>)
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	60d3      	str	r3, [r2, #12]
}
 80016c4:	bf00      	nop
 80016c6:	3714      	adds	r7, #20
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <__NVIC_GetPriorityGrouping+0x18>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	f003 0307 	and.w	r3, r3, #7
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	db0b      	blt.n	800171a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	f003 021f 	and.w	r2, r3, #31
 8001708:	4907      	ldr	r1, [pc, #28]	; (8001728 <__NVIC_EnableIRQ+0x38>)
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	095b      	lsrs	r3, r3, #5
 8001710:	2001      	movs	r0, #1
 8001712:	fa00 f202 	lsl.w	r2, r0, r2
 8001716:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e000e100 	.word	0xe000e100

0800172c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	6039      	str	r1, [r7, #0]
 8001736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	2b00      	cmp	r3, #0
 800173e:	db0a      	blt.n	8001756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	b2da      	uxtb	r2, r3
 8001744:	490c      	ldr	r1, [pc, #48]	; (8001778 <__NVIC_SetPriority+0x4c>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	0112      	lsls	r2, r2, #4
 800174c:	b2d2      	uxtb	r2, r2
 800174e:	440b      	add	r3, r1
 8001750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001754:	e00a      	b.n	800176c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4908      	ldr	r1, [pc, #32]	; (800177c <__NVIC_SetPriority+0x50>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	f003 030f 	and.w	r3, r3, #15
 8001762:	3b04      	subs	r3, #4
 8001764:	0112      	lsls	r2, r2, #4
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	440b      	add	r3, r1
 800176a:	761a      	strb	r2, [r3, #24]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	e000e100 	.word	0xe000e100
 800177c:	e000ed00 	.word	0xe000ed00

08001780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001780:	b480      	push	{r7}
 8001782:	b089      	sub	sp, #36	; 0x24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f1c3 0307 	rsb	r3, r3, #7
 800179a:	2b04      	cmp	r3, #4
 800179c:	bf28      	it	cs
 800179e:	2304      	movcs	r3, #4
 80017a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	3304      	adds	r3, #4
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d902      	bls.n	80017b0 <NVIC_EncodePriority+0x30>
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	3b03      	subs	r3, #3
 80017ae:	e000      	b.n	80017b2 <NVIC_EncodePriority+0x32>
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	f04f 32ff 	mov.w	r2, #4294967295
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43da      	mvns	r2, r3
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	401a      	ands	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c8:	f04f 31ff 	mov.w	r1, #4294967295
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	43d9      	mvns	r1, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	4313      	orrs	r3, r2
         );
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3724      	adds	r7, #36	; 0x24
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ff4c 	bl	800168c <__NVIC_SetPriorityGrouping>
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800180e:	f7ff ff61 	bl	80016d4 <__NVIC_GetPriorityGrouping>
 8001812:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	68b9      	ldr	r1, [r7, #8]
 8001818:	6978      	ldr	r0, [r7, #20]
 800181a:	f7ff ffb1 	bl	8001780 <NVIC_EncodePriority>
 800181e:	4602      	mov	r2, r0
 8001820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001824:	4611      	mov	r1, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff ff80 	bl	800172c <__NVIC_SetPriority>
}
 800182c:	bf00      	nop
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff54 	bl	80016f0 <__NVIC_EnableIRQ>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800185e:	2300      	movs	r3, #0
 8001860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
 800186a:	e177      	b.n	8001b5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800186c:	2201      	movs	r2, #1
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	429a      	cmp	r2, r3
 8001886:	f040 8166 	bne.w	8001b56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	2b01      	cmp	r3, #1
 8001894:	d005      	beq.n	80018a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d130      	bne.n	8001904 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	2203      	movs	r2, #3
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018d8:	2201      	movs	r2, #1
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	091b      	lsrs	r3, r3, #4
 80018ee:	f003 0201 	and.w	r2, r3, #1
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0303 	and.w	r3, r3, #3
 800190c:	2b03      	cmp	r3, #3
 800190e:	d017      	beq.n	8001940 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	2203      	movs	r2, #3
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d123      	bne.n	8001994 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	08da      	lsrs	r2, r3, #3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3208      	adds	r2, #8
 8001954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	220f      	movs	r2, #15
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	08da      	lsrs	r2, r3, #3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	3208      	adds	r2, #8
 800198e:	69b9      	ldr	r1, [r7, #24]
 8001990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	2203      	movs	r2, #3
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0203 	and.w	r2, r3, #3
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 80c0 	beq.w	8001b56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	4b66      	ldr	r3, [pc, #408]	; (8001b74 <HAL_GPIO_Init+0x324>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a65      	ldr	r2, [pc, #404]	; (8001b74 <HAL_GPIO_Init+0x324>)
 80019e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b63      	ldr	r3, [pc, #396]	; (8001b74 <HAL_GPIO_Init+0x324>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019f2:	4a61      	ldr	r2, [pc, #388]	; (8001b78 <HAL_GPIO_Init+0x328>)
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	089b      	lsrs	r3, r3, #2
 80019f8:	3302      	adds	r3, #2
 80019fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	220f      	movs	r2, #15
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a58      	ldr	r2, [pc, #352]	; (8001b7c <HAL_GPIO_Init+0x32c>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d037      	beq.n	8001a8e <HAL_GPIO_Init+0x23e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a57      	ldr	r2, [pc, #348]	; (8001b80 <HAL_GPIO_Init+0x330>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d031      	beq.n	8001a8a <HAL_GPIO_Init+0x23a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a56      	ldr	r2, [pc, #344]	; (8001b84 <HAL_GPIO_Init+0x334>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d02b      	beq.n	8001a86 <HAL_GPIO_Init+0x236>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a55      	ldr	r2, [pc, #340]	; (8001b88 <HAL_GPIO_Init+0x338>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d025      	beq.n	8001a82 <HAL_GPIO_Init+0x232>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a54      	ldr	r2, [pc, #336]	; (8001b8c <HAL_GPIO_Init+0x33c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d01f      	beq.n	8001a7e <HAL_GPIO_Init+0x22e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a53      	ldr	r2, [pc, #332]	; (8001b90 <HAL_GPIO_Init+0x340>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d019      	beq.n	8001a7a <HAL_GPIO_Init+0x22a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a52      	ldr	r2, [pc, #328]	; (8001b94 <HAL_GPIO_Init+0x344>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d013      	beq.n	8001a76 <HAL_GPIO_Init+0x226>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a51      	ldr	r2, [pc, #324]	; (8001b98 <HAL_GPIO_Init+0x348>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00d      	beq.n	8001a72 <HAL_GPIO_Init+0x222>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a50      	ldr	r2, [pc, #320]	; (8001b9c <HAL_GPIO_Init+0x34c>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d007      	beq.n	8001a6e <HAL_GPIO_Init+0x21e>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4f      	ldr	r2, [pc, #316]	; (8001ba0 <HAL_GPIO_Init+0x350>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d101      	bne.n	8001a6a <HAL_GPIO_Init+0x21a>
 8001a66:	2309      	movs	r3, #9
 8001a68:	e012      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a6a:	230a      	movs	r3, #10
 8001a6c:	e010      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a6e:	2308      	movs	r3, #8
 8001a70:	e00e      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a72:	2307      	movs	r3, #7
 8001a74:	e00c      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a76:	2306      	movs	r3, #6
 8001a78:	e00a      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a7a:	2305      	movs	r3, #5
 8001a7c:	e008      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a7e:	2304      	movs	r3, #4
 8001a80:	e006      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a82:	2303      	movs	r3, #3
 8001a84:	e004      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e002      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <HAL_GPIO_Init+0x240>
 8001a8e:	2300      	movs	r3, #0
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	f002 0203 	and.w	r2, r2, #3
 8001a96:	0092      	lsls	r2, r2, #2
 8001a98:	4093      	lsls	r3, r2
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aa0:	4935      	ldr	r1, [pc, #212]	; (8001b78 <HAL_GPIO_Init+0x328>)
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aae:	4b3d      	ldr	r3, [pc, #244]	; (8001ba4 <HAL_GPIO_Init+0x354>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ad2:	4a34      	ldr	r2, [pc, #208]	; (8001ba4 <HAL_GPIO_Init+0x354>)
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ad8:	4b32      	ldr	r3, [pc, #200]	; (8001ba4 <HAL_GPIO_Init+0x354>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d003      	beq.n	8001afc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001afc:	4a29      	ldr	r2, [pc, #164]	; (8001ba4 <HAL_GPIO_Init+0x354>)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b02:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <HAL_GPIO_Init+0x354>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b26:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <HAL_GPIO_Init+0x354>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_GPIO_Init+0x354>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b50:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <HAL_GPIO_Init+0x354>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	61fb      	str	r3, [r7, #28]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b0f      	cmp	r3, #15
 8001b60:	f67f ae84 	bls.w	800186c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3724      	adds	r7, #36	; 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40013800 	.word	0x40013800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40020400 	.word	0x40020400
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40020c00 	.word	0x40020c00
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40021400 	.word	0x40021400
 8001b94:	40021800 	.word	0x40021800
 8001b98:	40021c00 	.word	0x40021c00
 8001b9c:	40022000 	.word	0x40022000
 8001ba0:	40022400 	.word	0x40022400
 8001ba4:	40013c00 	.word	0x40013c00

08001ba8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	807b      	strh	r3, [r7, #2]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb8:	787b      	ldrb	r3, [r7, #1]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bc4:	e003      	b.n	8001bce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bc6:	887b      	ldrh	r3, [r7, #2]
 8001bc8:	041a      	lsls	r2, r3, #16
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	619a      	str	r2, [r3, #24]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr

08001bda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b085      	sub	sp, #20
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	460b      	mov	r3, r1
 8001be4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bec:	887a      	ldrh	r2, [r7, #2]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	041a      	lsls	r2, r3, #16
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	43d9      	mvns	r1, r3
 8001bf8:	887b      	ldrh	r3, [r7, #2]
 8001bfa:	400b      	ands	r3, r1
 8001bfc:	431a      	orrs	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	619a      	str	r2, [r3, #24]
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c28:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ca0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c36:	4b1b      	ldr	r3, [pc, #108]	; (8001ca4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c3c:	f7ff fd1a 	bl	8001674 <HAL_GetTick>
 8001c40:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c42:	e009      	b.n	8001c58 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c44:	f7ff fd16 	bl	8001674 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c52:	d901      	bls.n	8001c58 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e01f      	b.n	8001c98 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c64:	d1ee      	bne.n	8001c44 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001c66:	4b11      	ldr	r3, [pc, #68]	; (8001cac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001c68:	2201      	movs	r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c6c:	f7ff fd02 	bl	8001674 <HAL_GetTick>
 8001c70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c72:	e009      	b.n	8001c88 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001c74:	f7ff fcfe 	bl	8001674 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c82:	d901      	bls.n	8001c88 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e007      	b.n	8001c98 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001c88:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c94:	d1ee      	bne.n	8001c74 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	420e0040 	.word	0x420e0040
 8001ca8:	40007000 	.word	0x40007000
 8001cac:	420e0044 	.word	0x420e0044

08001cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d101      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0cc      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc4:	4b68      	ldr	r3, [pc, #416]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 030f 	and.w	r3, r3, #15
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d90c      	bls.n	8001cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cd2:	4b65      	ldr	r3, [pc, #404]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b63      	ldr	r3, [pc, #396]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0b8      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d020      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d04:	4b59      	ldr	r3, [pc, #356]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	4a58      	ldr	r2, [pc, #352]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001d0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d1c:	4b53      	ldr	r3, [pc, #332]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	4a52      	ldr	r2, [pc, #328]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d28:	4b50      	ldr	r3, [pc, #320]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	494d      	ldr	r1, [pc, #308]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d044      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d107      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d4e:	4b47      	ldr	r3, [pc, #284]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d119      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e07f      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d003      	beq.n	8001d6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d107      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d6e:	4b3f      	ldr	r3, [pc, #252]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d109      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e06f      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7e:	4b3b      	ldr	r3, [pc, #236]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e067      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d8e:	4b37      	ldr	r3, [pc, #220]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f023 0203 	bic.w	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4934      	ldr	r1, [pc, #208]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001da0:	f7ff fc68 	bl	8001674 <HAL_GetTick>
 8001da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da6:	e00a      	b.n	8001dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da8:	f7ff fc64 	bl	8001674 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e04f      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 020c 	and.w	r2, r3, #12
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d1eb      	bne.n	8001da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dd0:	4b25      	ldr	r3, [pc, #148]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d20c      	bcs.n	8001df8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dde:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <HAL_RCC_ClockConfig+0x1b8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e032      	b.n	8001e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4916      	ldr	r1, [pc, #88]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	490e      	ldr	r1, [pc, #56]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e36:	f000 f821 	bl	8001e7c <HAL_RCC_GetSysClockFreq>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	490a      	ldr	r1, [pc, #40]	; (8001e70 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	5ccb      	ldrb	r3, [r1, r3]
 8001e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e4e:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_RCC_ClockConfig+0x1c8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 ffde 	bl	8002e18 <HAL_InitTick>

  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023c00 	.word	0x40023c00
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	08005c28 	.word	0x08005c28
 8001e74:	20000020 	.word	0x20000020
 8001e78:	20000024 	.word	0x20000024

08001e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e80:	b094      	sub	sp, #80	; 0x50
 8001e82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	647b      	str	r3, [r7, #68]	; 0x44
 8001e88:	2300      	movs	r3, #0
 8001e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e94:	4b79      	ldr	r3, [pc, #484]	; (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d00d      	beq.n	8001ebc <HAL_RCC_GetSysClockFreq+0x40>
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	f200 80e1 	bhi.w	8002068 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d003      	beq.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001eae:	e0db      	b.n	8002068 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001eb0:	4b73      	ldr	r3, [pc, #460]	; (8002080 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eb2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001eb4:	e0db      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eb6:	4b73      	ldr	r3, [pc, #460]	; (8002084 <HAL_RCC_GetSysClockFreq+0x208>)
 8001eb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001eba:	e0d8      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ebc:	4b6f      	ldr	r3, [pc, #444]	; (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ec4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ec6:	4b6d      	ldr	r3, [pc, #436]	; (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d063      	beq.n	8001f9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ed2:	4b6a      	ldr	r3, [pc, #424]	; (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	099b      	lsrs	r3, r3, #6
 8001ed8:	2200      	movs	r2, #0
 8001eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8001edc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8001eea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001eee:	4622      	mov	r2, r4
 8001ef0:	462b      	mov	r3, r5
 8001ef2:	f04f 0000 	mov.w	r0, #0
 8001ef6:	f04f 0100 	mov.w	r1, #0
 8001efa:	0159      	lsls	r1, r3, #5
 8001efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f00:	0150      	lsls	r0, r2, #5
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	4621      	mov	r1, r4
 8001f08:	1a51      	subs	r1, r2, r1
 8001f0a:	6139      	str	r1, [r7, #16]
 8001f0c:	4629      	mov	r1, r5
 8001f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f20:	4659      	mov	r1, fp
 8001f22:	018b      	lsls	r3, r1, #6
 8001f24:	4651      	mov	r1, sl
 8001f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f2a:	4651      	mov	r1, sl
 8001f2c:	018a      	lsls	r2, r1, #6
 8001f2e:	4651      	mov	r1, sl
 8001f30:	ebb2 0801 	subs.w	r8, r2, r1
 8001f34:	4659      	mov	r1, fp
 8001f36:	eb63 0901 	sbc.w	r9, r3, r1
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f4e:	4690      	mov	r8, r2
 8001f50:	4699      	mov	r9, r3
 8001f52:	4623      	mov	r3, r4
 8001f54:	eb18 0303 	adds.w	r3, r8, r3
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	462b      	mov	r3, r5
 8001f5c:	eb49 0303 	adc.w	r3, r9, r3
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f6e:	4629      	mov	r1, r5
 8001f70:	024b      	lsls	r3, r1, #9
 8001f72:	4621      	mov	r1, r4
 8001f74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f78:	4621      	mov	r1, r4
 8001f7a:	024a      	lsls	r2, r1, #9
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	4619      	mov	r1, r3
 8001f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f82:	2200      	movs	r2, #0
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f8c:	f7fe f938 	bl	8000200 <__aeabi_uldivmod>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4613      	mov	r3, r2
 8001f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f98:	e058      	b.n	800204c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f9a:	4b38      	ldr	r3, [pc, #224]	; (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	099b      	lsrs	r3, r3, #6
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	4611      	mov	r1, r2
 8001fa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001faa:	623b      	str	r3, [r7, #32]
 8001fac:	2300      	movs	r3, #0
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fb4:	4642      	mov	r2, r8
 8001fb6:	464b      	mov	r3, r9
 8001fb8:	f04f 0000 	mov.w	r0, #0
 8001fbc:	f04f 0100 	mov.w	r1, #0
 8001fc0:	0159      	lsls	r1, r3, #5
 8001fc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fc6:	0150      	lsls	r0, r2, #5
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4641      	mov	r1, r8
 8001fce:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fd2:	4649      	mov	r1, r9
 8001fd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001fd8:	f04f 0200 	mov.w	r2, #0
 8001fdc:	f04f 0300 	mov.w	r3, #0
 8001fe0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001fe4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001fe8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001fec:	ebb2 040a 	subs.w	r4, r2, sl
 8001ff0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ff4:	f04f 0200 	mov.w	r2, #0
 8001ff8:	f04f 0300 	mov.w	r3, #0
 8001ffc:	00eb      	lsls	r3, r5, #3
 8001ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002002:	00e2      	lsls	r2, r4, #3
 8002004:	4614      	mov	r4, r2
 8002006:	461d      	mov	r5, r3
 8002008:	4643      	mov	r3, r8
 800200a:	18e3      	adds	r3, r4, r3
 800200c:	603b      	str	r3, [r7, #0]
 800200e:	464b      	mov	r3, r9
 8002010:	eb45 0303 	adc.w	r3, r5, r3
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002022:	4629      	mov	r1, r5
 8002024:	028b      	lsls	r3, r1, #10
 8002026:	4621      	mov	r1, r4
 8002028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800202c:	4621      	mov	r1, r4
 800202e:	028a      	lsls	r2, r1, #10
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002036:	2200      	movs	r2, #0
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	61fa      	str	r2, [r7, #28]
 800203c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002040:	f7fe f8de 	bl	8000200 <__aeabi_uldivmod>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4613      	mov	r3, r2
 800204a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HAL_RCC_GetSysClockFreq+0x200>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	0c1b      	lsrs	r3, r3, #16
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	3301      	adds	r3, #1
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800205c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800205e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002060:	fbb2 f3f3 	udiv	r3, r2, r3
 8002064:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002066:	e002      	b.n	800206e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCC_GetSysClockFreq+0x204>)
 800206a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800206c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800206e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002070:	4618      	mov	r0, r3
 8002072:	3750      	adds	r7, #80	; 0x50
 8002074:	46bd      	mov	sp, r7
 8002076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800
 8002080:	00f42400 	.word	0x00f42400
 8002084:	007a1200 	.word	0x007a1200

08002088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_RCC_GetHCLKFreq+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000020 	.word	0x20000020

080020a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020a4:	f7ff fff0 	bl	8002088 <HAL_RCC_GetHCLKFreq>
 80020a8:	4602      	mov	r2, r0
 80020aa:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	0a9b      	lsrs	r3, r3, #10
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	4903      	ldr	r1, [pc, #12]	; (80020c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020b6:	5ccb      	ldrb	r3, [r1, r3]
 80020b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020bc:	4618      	mov	r0, r3
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40023800 	.word	0x40023800
 80020c4:	08005c38 	.word	0x08005c38

080020c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	220f      	movs	r2, #15
 80020d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_RCC_GetClockConfig+0x5c>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 0203 	and.w	r2, r3, #3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <HAL_RCC_GetClockConfig+0x5c>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_RCC_GetClockConfig+0x5c>)
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_RCC_GetClockConfig+0x5c>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	08db      	lsrs	r3, r3, #3
 8002102:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <HAL_RCC_GetClockConfig+0x60>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 020f 	and.w	r2, r3, #15
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	601a      	str	r2, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
 8002128:	40023c00 	.word	0x40023c00

0800212c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e273      	b.n	8002626 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d075      	beq.n	8002236 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800214a:	4b88      	ldr	r3, [pc, #544]	; (800236c <HAL_RCC_OscConfig+0x240>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b04      	cmp	r3, #4
 8002154:	d00c      	beq.n	8002170 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002156:	4b85      	ldr	r3, [pc, #532]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800215e:	2b08      	cmp	r3, #8
 8002160:	d112      	bne.n	8002188 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002162:	4b82      	ldr	r3, [pc, #520]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800216a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800216e:	d10b      	bne.n	8002188 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002170:	4b7e      	ldr	r3, [pc, #504]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d05b      	beq.n	8002234 <HAL_RCC_OscConfig+0x108>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d157      	bne.n	8002234 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e24e      	b.n	8002626 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002190:	d106      	bne.n	80021a0 <HAL_RCC_OscConfig+0x74>
 8002192:	4b76      	ldr	r3, [pc, #472]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a75      	ldr	r2, [pc, #468]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e01d      	b.n	80021dc <HAL_RCC_OscConfig+0xb0>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x98>
 80021aa:	4b70      	ldr	r3, [pc, #448]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a6f      	ldr	r2, [pc, #444]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80021b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b6d      	ldr	r3, [pc, #436]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a6c      	ldr	r2, [pc, #432]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80021bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e00b      	b.n	80021dc <HAL_RCC_OscConfig+0xb0>
 80021c4:	4b69      	ldr	r3, [pc, #420]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a68      	ldr	r2, [pc, #416]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80021ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	4b66      	ldr	r3, [pc, #408]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a65      	ldr	r2, [pc, #404]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80021d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d013      	beq.n	800220c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7ff fa46 	bl	8001674 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ec:	f7ff fa42 	bl	8001674 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	; 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e213      	b.n	8002626 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fe:	4b5b      	ldr	r3, [pc, #364]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0xc0>
 800220a:	e014      	b.n	8002236 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7ff fa32 	bl	8001674 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002214:	f7ff fa2e 	bl	8001674 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	; 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e1ff      	b.n	8002626 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002226:	4b51      	ldr	r3, [pc, #324]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0xe8>
 8002232:	e000      	b.n	8002236 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d063      	beq.n	800230a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002242:	4b4a      	ldr	r3, [pc, #296]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00b      	beq.n	8002266 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800224e:	4b47      	ldr	r3, [pc, #284]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002256:	2b08      	cmp	r3, #8
 8002258:	d11c      	bne.n	8002294 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225a:	4b44      	ldr	r3, [pc, #272]	; (800236c <HAL_RCC_OscConfig+0x240>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d116      	bne.n	8002294 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	4b41      	ldr	r3, [pc, #260]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <HAL_RCC_OscConfig+0x152>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d001      	beq.n	800227e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e1d3      	b.n	8002626 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227e:	4b3b      	ldr	r3, [pc, #236]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4937      	ldr	r1, [pc, #220]	; (800236c <HAL_RCC_OscConfig+0x240>)
 800228e:	4313      	orrs	r3, r2
 8002290:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002292:	e03a      	b.n	800230a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d020      	beq.n	80022de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800229c:	4b34      	ldr	r3, [pc, #208]	; (8002370 <HAL_RCC_OscConfig+0x244>)
 800229e:	2201      	movs	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a2:	f7ff f9e7 	bl	8001674 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022aa:	f7ff f9e3 	bl	8001674 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e1b4      	b.n	8002626 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022bc:	4b2b      	ldr	r3, [pc, #172]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c8:	4b28      	ldr	r3, [pc, #160]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4925      	ldr	r1, [pc, #148]	; (800236c <HAL_RCC_OscConfig+0x240>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	600b      	str	r3, [r1, #0]
 80022dc:	e015      	b.n	800230a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022de:	4b24      	ldr	r3, [pc, #144]	; (8002370 <HAL_RCC_OscConfig+0x244>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7ff f9c6 	bl	8001674 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ec:	f7ff f9c2 	bl	8001674 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e193      	b.n	8002626 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fe:	4b1b      	ldr	r3, [pc, #108]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d036      	beq.n	8002384 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d016      	beq.n	800234c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <HAL_RCC_OscConfig+0x248>)
 8002320:	2201      	movs	r2, #1
 8002322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002324:	f7ff f9a6 	bl	8001674 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800232c:	f7ff f9a2 	bl	8001674 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e173      	b.n	8002626 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233e:	4b0b      	ldr	r3, [pc, #44]	; (800236c <HAL_RCC_OscConfig+0x240>)
 8002340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f0      	beq.n	800232c <HAL_RCC_OscConfig+0x200>
 800234a:	e01b      	b.n	8002384 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_RCC_OscConfig+0x248>)
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002352:	f7ff f98f 	bl	8001674 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002358:	e00e      	b.n	8002378 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800235a:	f7ff f98b 	bl	8001674 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d907      	bls.n	8002378 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e15c      	b.n	8002626 <HAL_RCC_OscConfig+0x4fa>
 800236c:	40023800 	.word	0x40023800
 8002370:	42470000 	.word	0x42470000
 8002374:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002378:	4b8a      	ldr	r3, [pc, #552]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 800237a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1ea      	bne.n	800235a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 8097 	beq.w	80024c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002392:	2300      	movs	r3, #0
 8002394:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002396:	4b83      	ldr	r3, [pc, #524]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10f      	bne.n	80023c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	4b7f      	ldr	r3, [pc, #508]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	4a7e      	ldr	r2, [pc, #504]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 80023ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b0:	6413      	str	r3, [r2, #64]	; 0x40
 80023b2:	4b7c      	ldr	r3, [pc, #496]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023be:	2301      	movs	r3, #1
 80023c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c2:	4b79      	ldr	r3, [pc, #484]	; (80025a8 <HAL_RCC_OscConfig+0x47c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d118      	bne.n	8002400 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ce:	4b76      	ldr	r3, [pc, #472]	; (80025a8 <HAL_RCC_OscConfig+0x47c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a75      	ldr	r2, [pc, #468]	; (80025a8 <HAL_RCC_OscConfig+0x47c>)
 80023d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023da:	f7ff f94b 	bl	8001674 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e2:	f7ff f947 	bl	8001674 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e118      	b.n	8002626 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	4b6c      	ldr	r3, [pc, #432]	; (80025a8 <HAL_RCC_OscConfig+0x47c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d106      	bne.n	8002416 <HAL_RCC_OscConfig+0x2ea>
 8002408:	4b66      	ldr	r3, [pc, #408]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 800240a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800240c:	4a65      	ldr	r2, [pc, #404]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6713      	str	r3, [r2, #112]	; 0x70
 8002414:	e01c      	b.n	8002450 <HAL_RCC_OscConfig+0x324>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2b05      	cmp	r3, #5
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x30c>
 800241e:	4b61      	ldr	r3, [pc, #388]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 8002420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002422:	4a60      	ldr	r2, [pc, #384]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	6713      	str	r3, [r2, #112]	; 0x70
 800242a:	4b5e      	ldr	r3, [pc, #376]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 800242c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242e:	4a5d      	ldr	r2, [pc, #372]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6713      	str	r3, [r2, #112]	; 0x70
 8002436:	e00b      	b.n	8002450 <HAL_RCC_OscConfig+0x324>
 8002438:	4b5a      	ldr	r3, [pc, #360]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 800243a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243c:	4a59      	ldr	r2, [pc, #356]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 800243e:	f023 0301 	bic.w	r3, r3, #1
 8002442:	6713      	str	r3, [r2, #112]	; 0x70
 8002444:	4b57      	ldr	r3, [pc, #348]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 8002446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002448:	4a56      	ldr	r2, [pc, #344]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 800244a:	f023 0304 	bic.w	r3, r3, #4
 800244e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d015      	beq.n	8002484 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002458:	f7ff f90c 	bl	8001674 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245e:	e00a      	b.n	8002476 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002460:	f7ff f908 	bl	8001674 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	; 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e0d7      	b.n	8002626 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002476:	4b4b      	ldr	r3, [pc, #300]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0ee      	beq.n	8002460 <HAL_RCC_OscConfig+0x334>
 8002482:	e014      	b.n	80024ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002484:	f7ff f8f6 	bl	8001674 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248a:	e00a      	b.n	80024a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800248c:	f7ff f8f2 	bl	8001674 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	f241 3288 	movw	r2, #5000	; 0x1388
 800249a:	4293      	cmp	r3, r2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e0c1      	b.n	8002626 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a2:	4b40      	ldr	r3, [pc, #256]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 80024a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1ee      	bne.n	800248c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ae:	7dfb      	ldrb	r3, [r7, #23]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d105      	bne.n	80024c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b4:	4b3b      	ldr	r3, [pc, #236]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	4a3a      	ldr	r2, [pc, #232]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 80024ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 80ad 	beq.w	8002624 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024ca:	4b36      	ldr	r3, [pc, #216]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d060      	beq.n	8002598 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d145      	bne.n	800256a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024de:	4b33      	ldr	r3, [pc, #204]	; (80025ac <HAL_RCC_OscConfig+0x480>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e4:	f7ff f8c6 	bl	8001674 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ec:	f7ff f8c2 	bl	8001674 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e093      	b.n	8002626 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024fe:	4b29      	ldr	r3, [pc, #164]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69da      	ldr	r2, [r3, #28]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	019b      	lsls	r3, r3, #6
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	085b      	lsrs	r3, r3, #1
 8002522:	3b01      	subs	r3, #1
 8002524:	041b      	lsls	r3, r3, #16
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	061b      	lsls	r3, r3, #24
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	071b      	lsls	r3, r3, #28
 8002536:	491b      	ldr	r1, [pc, #108]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800253c:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <HAL_RCC_OscConfig+0x480>)
 800253e:	2201      	movs	r2, #1
 8002540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002542:	f7ff f897 	bl	8001674 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800254a:	f7ff f893 	bl	8001674 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e064      	b.n	8002626 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x41e>
 8002568:	e05c      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256a:	4b10      	ldr	r3, [pc, #64]	; (80025ac <HAL_RCC_OscConfig+0x480>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7ff f880 	bl	8001674 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002578:	f7ff f87c 	bl	8001674 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e04d      	b.n	8002626 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_RCC_OscConfig+0x478>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x44c>
 8002596:	e045      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d107      	bne.n	80025b0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e040      	b.n	8002626 <HAL_RCC_OscConfig+0x4fa>
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40007000 	.word	0x40007000
 80025ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80025b0:	4b1f      	ldr	r3, [pc, #124]	; (8002630 <HAL_RCC_OscConfig+0x504>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d030      	beq.n	8002620 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d129      	bne.n	8002620 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d122      	bne.n	8002620 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80025e0:	4013      	ands	r3, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80025e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d119      	bne.n	8002620 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f6:	085b      	lsrs	r3, r3, #1
 80025f8:	3b01      	subs	r3, #1
 80025fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d10f      	bne.n	8002620 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800260c:	429a      	cmp	r2, r3
 800260e:	d107      	bne.n	8002620 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800

08002634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e041      	b.n	80026ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f839 	bl	80026d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3304      	adds	r3, #4
 8002670:	4619      	mov	r1, r3
 8002672:	4610      	mov	r0, r2
 8002674:	f000 f9c0 	bl	80029f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
	...

080026e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d001      	beq.n	8002700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e04e      	b.n	800279e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a23      	ldr	r2, [pc, #140]	; (80027ac <HAL_TIM_Base_Start_IT+0xc4>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d022      	beq.n	8002768 <HAL_TIM_Base_Start_IT+0x80>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272a:	d01d      	beq.n	8002768 <HAL_TIM_Base_Start_IT+0x80>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a1f      	ldr	r2, [pc, #124]	; (80027b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d018      	beq.n	8002768 <HAL_TIM_Base_Start_IT+0x80>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1e      	ldr	r2, [pc, #120]	; (80027b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d013      	beq.n	8002768 <HAL_TIM_Base_Start_IT+0x80>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00e      	beq.n	8002768 <HAL_TIM_Base_Start_IT+0x80>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a1b      	ldr	r2, [pc, #108]	; (80027bc <HAL_TIM_Base_Start_IT+0xd4>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d009      	beq.n	8002768 <HAL_TIM_Base_Start_IT+0x80>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a19      	ldr	r2, [pc, #100]	; (80027c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d004      	beq.n	8002768 <HAL_TIM_Base_Start_IT+0x80>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a18      	ldr	r2, [pc, #96]	; (80027c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d111      	bne.n	800278c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b06      	cmp	r3, #6
 8002778:	d010      	beq.n	800279c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f042 0201 	orr.w	r2, r2, #1
 8002788:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800278a:	e007      	b.n	800279c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40010000 	.word	0x40010000
 80027b0:	40000400 	.word	0x40000400
 80027b4:	40000800 	.word	0x40000800
 80027b8:	40000c00 	.word	0x40000c00
 80027bc:	40010400 	.word	0x40010400
 80027c0:	40014000 	.word	0x40014000
 80027c4:	40001800 	.word	0x40001800

080027c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d020      	beq.n	800282c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d01b      	beq.n	800282c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0202 	mvn.w	r2, #2
 80027fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d003      	beq.n	800281a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f8d2 	bl	80029bc <HAL_TIM_IC_CaptureCallback>
 8002818:	e005      	b.n	8002826 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f8c4 	bl	80029a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f8d5 	bl	80029d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b00      	cmp	r3, #0
 8002834:	d020      	beq.n	8002878 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b00      	cmp	r3, #0
 800283e:	d01b      	beq.n	8002878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0204 	mvn.w	r2, #4
 8002848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2202      	movs	r2, #2
 800284e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f8ac 	bl	80029bc <HAL_TIM_IC_CaptureCallback>
 8002864:	e005      	b.n	8002872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f89e 	bl	80029a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f8af 	bl	80029d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d020      	beq.n	80028c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f003 0308 	and.w	r3, r3, #8
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01b      	beq.n	80028c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0208 	mvn.w	r2, #8
 8002894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2204      	movs	r2, #4
 800289a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f886 	bl	80029bc <HAL_TIM_IC_CaptureCallback>
 80028b0:	e005      	b.n	80028be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f878 	bl	80029a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f889 	bl	80029d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f003 0310 	and.w	r3, r3, #16
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d020      	beq.n	8002910 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f003 0310 	and.w	r3, r3, #16
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d01b      	beq.n	8002910 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f06f 0210 	mvn.w	r2, #16
 80028e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2208      	movs	r2, #8
 80028e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f860 	bl	80029bc <HAL_TIM_IC_CaptureCallback>
 80028fc:	e005      	b.n	800290a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f852 	bl	80029a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f863 	bl	80029d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00c      	beq.n	8002934 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d007      	beq.n	8002934 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f06f 0201 	mvn.w	r2, #1
 800292c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fad8 	bl	8002ee4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00c      	beq.n	8002958 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f906 	bl	8002b64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00c      	beq.n	800297c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002968:	2b00      	cmp	r3, #0
 800296a:	d007      	beq.n	800297c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f834 	bl	80029e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	f003 0320 	and.w	r3, r3, #32
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00c      	beq.n	80029a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b00      	cmp	r3, #0
 800298e:	d007      	beq.n	80029a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f06f 0220 	mvn.w	r2, #32
 8002998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f8d8 	bl	8002b50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029a0:	bf00      	nop
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a46      	ldr	r2, [pc, #280]	; (8002b24 <TIM_Base_SetConfig+0x12c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d013      	beq.n	8002a38 <TIM_Base_SetConfig+0x40>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a16:	d00f      	beq.n	8002a38 <TIM_Base_SetConfig+0x40>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a43      	ldr	r2, [pc, #268]	; (8002b28 <TIM_Base_SetConfig+0x130>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d00b      	beq.n	8002a38 <TIM_Base_SetConfig+0x40>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a42      	ldr	r2, [pc, #264]	; (8002b2c <TIM_Base_SetConfig+0x134>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d007      	beq.n	8002a38 <TIM_Base_SetConfig+0x40>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a41      	ldr	r2, [pc, #260]	; (8002b30 <TIM_Base_SetConfig+0x138>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d003      	beq.n	8002a38 <TIM_Base_SetConfig+0x40>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a40      	ldr	r2, [pc, #256]	; (8002b34 <TIM_Base_SetConfig+0x13c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d108      	bne.n	8002a4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a35      	ldr	r2, [pc, #212]	; (8002b24 <TIM_Base_SetConfig+0x12c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d02b      	beq.n	8002aaa <TIM_Base_SetConfig+0xb2>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a58:	d027      	beq.n	8002aaa <TIM_Base_SetConfig+0xb2>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a32      	ldr	r2, [pc, #200]	; (8002b28 <TIM_Base_SetConfig+0x130>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d023      	beq.n	8002aaa <TIM_Base_SetConfig+0xb2>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a31      	ldr	r2, [pc, #196]	; (8002b2c <TIM_Base_SetConfig+0x134>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d01f      	beq.n	8002aaa <TIM_Base_SetConfig+0xb2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a30      	ldr	r2, [pc, #192]	; (8002b30 <TIM_Base_SetConfig+0x138>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d01b      	beq.n	8002aaa <TIM_Base_SetConfig+0xb2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a2f      	ldr	r2, [pc, #188]	; (8002b34 <TIM_Base_SetConfig+0x13c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d017      	beq.n	8002aaa <TIM_Base_SetConfig+0xb2>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a2e      	ldr	r2, [pc, #184]	; (8002b38 <TIM_Base_SetConfig+0x140>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <TIM_Base_SetConfig+0xb2>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a2d      	ldr	r2, [pc, #180]	; (8002b3c <TIM_Base_SetConfig+0x144>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d00f      	beq.n	8002aaa <TIM_Base_SetConfig+0xb2>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a2c      	ldr	r2, [pc, #176]	; (8002b40 <TIM_Base_SetConfig+0x148>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d00b      	beq.n	8002aaa <TIM_Base_SetConfig+0xb2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a2b      	ldr	r2, [pc, #172]	; (8002b44 <TIM_Base_SetConfig+0x14c>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d007      	beq.n	8002aaa <TIM_Base_SetConfig+0xb2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a2a      	ldr	r2, [pc, #168]	; (8002b48 <TIM_Base_SetConfig+0x150>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d003      	beq.n	8002aaa <TIM_Base_SetConfig+0xb2>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a29      	ldr	r2, [pc, #164]	; (8002b4c <TIM_Base_SetConfig+0x154>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d108      	bne.n	8002abc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a10      	ldr	r2, [pc, #64]	; (8002b24 <TIM_Base_SetConfig+0x12c>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d003      	beq.n	8002af0 <TIM_Base_SetConfig+0xf8>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a12      	ldr	r2, [pc, #72]	; (8002b34 <TIM_Base_SetConfig+0x13c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d103      	bne.n	8002af8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d105      	bne.n	8002b16 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f023 0201 	bic.w	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	611a      	str	r2, [r3, #16]
  }
}
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40010000 	.word	0x40010000
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	40000800 	.word	0x40000800
 8002b30:	40000c00 	.word	0x40000c00
 8002b34:	40010400 	.word	0x40010400
 8002b38:	40014000 	.word	0x40014000
 8002b3c:	40014400 	.word	0x40014400
 8002b40:	40014800 	.word	0x40014800
 8002b44:	40001800 	.word	0x40001800
 8002b48:	40001c00 	.word	0x40001c00
 8002b4c:	40002000 	.word	0x40002000

08002b50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b7c:	480d      	ldr	r0, [pc, #52]	; (8002bb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b7e:	490e      	ldr	r1, [pc, #56]	; (8002bb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b80:	4a0e      	ldr	r2, [pc, #56]	; (8002bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b84:	e002      	b.n	8002b8c <LoopCopyDataInit>

08002b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b8a:	3304      	adds	r3, #4

08002b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b90:	d3f9      	bcc.n	8002b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b92:	4a0b      	ldr	r2, [pc, #44]	; (8002bc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b94:	4c0b      	ldr	r4, [pc, #44]	; (8002bc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b98:	e001      	b.n	8002b9e <LoopFillZerobss>

08002b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b9c:	3204      	adds	r2, #4

08002b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ba0:	d3fb      	bcc.n	8002b9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ba2:	f7fe fcf3 	bl	800158c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ba6:	f002 ff8d 	bl	8005ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002baa:	f000 f80f 	bl	8002bcc <main>
  bx  lr    
 8002bae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002bb0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bb8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002bbc:	08005d78 	.word	0x08005d78
  ldr r2, =_sbss
 8002bc0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002bc4:	20001410 	.word	0x20001410

08002bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bc8:	e7fe      	b.n	8002bc8 <ADC_IRQHandler>
	...

08002bcc <main>:
};

osThreadId LEDControl::Thread1Handle, LEDControl::Thread2Handle;

int main(void)
{
 8002bcc:	b5b0      	push	{r4, r5, r7, lr}
 8002bce:	b08a      	sub	sp, #40	; 0x28
 8002bd0:	af00      	add	r7, sp, #0
    HAL_Init();
 8002bd2:	f7fe fd11 	bl	80015f8 <HAL_Init>
    LEDControl::ConfigureSystemClock();
 8002bd6:	f000 f8a5 	bl	8002d24 <_ZN10LEDControl20ConfigureSystemClockEv>
    BSP_LED_Init(LED1);
 8002bda:	2000      	movs	r0, #0
 8002bdc:	f7fe fbfc 	bl	80013d8 <BSP_LED_Init>
    BSP_LED_Init(LED3);
 8002be0:	2002      	movs	r0, #2
 8002be2:	f7fe fbf9 	bl	80013d8 <BSP_LED_Init>

    // Define thread structures for LED1 and LED3
    osThreadDef(LED1, LEDControl::Thread1Function, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8002be6:	4b11      	ldr	r3, [pc, #68]	; (8002c2c <main+0x60>)
 8002be8:	f107 0414 	add.w	r4, r7, #20
 8002bec:	461d      	mov	r5, r3
 8002bee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf2:	682b      	ldr	r3, [r5, #0]
 8002bf4:	6023      	str	r3, [r4, #0]
    osThreadDef(LED3, LEDControl::Thread2Function, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <main+0x64>)
 8002bf8:	463c      	mov	r4, r7
 8002bfa:	461d      	mov	r5, r3
 8002bfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c00:	682b      	ldr	r3, [r5, #0]
 8002c02:	6023      	str	r3, [r4, #0]

    // Create threads for LED1 and LED3
    LEDControl::Thread1Handle = osThreadCreate(osThread(LED1), nullptr);
 8002c04:	f107 0314 	add.w	r3, r7, #20
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 fa01 	bl	8003012 <osThreadCreate>
 8002c10:	4603      	mov	r3, r0
 8002c12:	4a08      	ldr	r2, [pc, #32]	; (8002c34 <main+0x68>)
 8002c14:	6013      	str	r3, [r2, #0]
    LEDControl::Thread2Handle = osThreadCreate(osThread(LED3), nullptr);
 8002c16:	463b      	mov	r3, r7
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f9f9 	bl	8003012 <osThreadCreate>
 8002c20:	4603      	mov	r3, r0
 8002c22:	4a05      	ldr	r2, [pc, #20]	; (8002c38 <main+0x6c>)
 8002c24:	6013      	str	r3, [r2, #0]

    osKernelStart();
 8002c26:	f000 f9dd 	bl	8002fe4 <osKernelStart>

    while (true);
 8002c2a:	e7fe      	b.n	8002c2a <main+0x5e>
 8002c2c:	08005be0 	.word	0x08005be0
 8002c30:	08005bfc 	.word	0x08005bfc
 8002c34:	200000a0 	.word	0x200000a0
 8002c38:	200000a4 	.word	0x200000a4

08002c3c <_ZN10LEDControl15Thread1FunctionEPKv>:
}

void LEDControl::Thread1Function(void const *argument)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
    uint32_t count = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]

    for (;;)
    {
        count = osKernelSysTick() + 5000;
 8002c48:	f000 f9d3 	bl	8002ff2 <osKernelSysTick>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002c52:	3308      	adds	r3, #8
 8002c54:	60fb      	str	r3, [r7, #12]

        while (count >= osKernelSysTick())
 8002c56:	e005      	b.n	8002c64 <_ZN10LEDControl15Thread1FunctionEPKv+0x28>
        {
            BSP_LED_Toggle(LED1);
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7fe fc79 	bl	8001550 <BSP_LED_Toggle>
            osDelay(200);
 8002c5e:	20c8      	movs	r0, #200	; 0xc8
 8002c60:	f000 f9fe 	bl	8003060 <osDelay>
        while (count >= osKernelSysTick())
 8002c64:	f000 f9c5 	bl	8002ff2 <osKernelSysTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	bf2c      	ite	cs
 8002c70:	2301      	movcs	r3, #1
 8002c72:	2300      	movcc	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1ee      	bne.n	8002c58 <_ZN10LEDControl15Thread1FunctionEPKv+0x1c>
        }

        BSP_LED_Off(LED1);
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	f7fe fc4a 	bl	8001514 <BSP_LED_Off>
        osThreadSuspend(nullptr);
 8002c80:	2000      	movs	r0, #0
 8002c82:	f000 fa0c 	bl	800309e <osThreadSuspend>
        count = osKernelSysTick() + 5000;
 8002c86:	f000 f9b4 	bl	8002ff2 <osKernelSysTick>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002c90:	3308      	adds	r3, #8
 8002c92:	60fb      	str	r3, [r7, #12]

        while (count >= osKernelSysTick())
 8002c94:	e006      	b.n	8002ca4 <_ZN10LEDControl15Thread1FunctionEPKv+0x68>
        {
            BSP_LED_Toggle(LED1);
 8002c96:	2000      	movs	r0, #0
 8002c98:	f7fe fc5a 	bl	8001550 <BSP_LED_Toggle>
            osDelay(400);
 8002c9c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002ca0:	f000 f9de 	bl	8003060 <osDelay>
        while (count >= osKernelSysTick())
 8002ca4:	f000 f9a5 	bl	8002ff2 <osKernelSysTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	4293      	cmp	r3, r2
 8002cae:	bf2c      	ite	cs
 8002cb0:	2301      	movcs	r3, #1
 8002cb2:	2300      	movcc	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1ed      	bne.n	8002c96 <_ZN10LEDControl15Thread1FunctionEPKv+0x5a>
        }

        osThreadResume(Thread2Handle);
 8002cba:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <_ZN10LEDControl15Thread1FunctionEPKv+0x8c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 f9fa 	bl	80030b8 <osThreadResume>
        count = osKernelSysTick() + 5000;
 8002cc4:	e7c0      	b.n	8002c48 <_ZN10LEDControl15Thread1FunctionEPKv+0xc>
 8002cc6:	bf00      	nop
 8002cc8:	200000a4 	.word	0x200000a4

08002ccc <_ZN10LEDControl15Thread2FunctionEPKv>:
    }
}

void LEDControl::Thread2Function(void const *argument)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
    uint32_t count;

    for (;;)
    {
        count = osKernelSysTick() + 10000;
 8002cd4:	f000 f98d 	bl	8002ff2 <osKernelSysTick>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8002cde:	3310      	adds	r3, #16
 8002ce0:	60fb      	str	r3, [r7, #12]

        while (count >= osKernelSysTick())
 8002ce2:	e006      	b.n	8002cf2 <_ZN10LEDControl15Thread2FunctionEPKv+0x26>
        {
            BSP_LED_Toggle(LED3);
 8002ce4:	2002      	movs	r0, #2
 8002ce6:	f7fe fc33 	bl	8001550 <BSP_LED_Toggle>
            osDelay(500);
 8002cea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002cee:	f000 f9b7 	bl	8003060 <osDelay>
        while (count >= osKernelSysTick())
 8002cf2:	f000 f97e 	bl	8002ff2 <osKernelSysTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	bf2c      	ite	cs
 8002cfe:	2301      	movcs	r3, #1
 8002d00:	2300      	movcc	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1ed      	bne.n	8002ce4 <_ZN10LEDControl15Thread2FunctionEPKv+0x18>
        }

        BSP_LED_Off(LED3);
 8002d08:	2002      	movs	r0, #2
 8002d0a:	f7fe fc03 	bl	8001514 <BSP_LED_Off>
        osThreadResume(Thread1Handle);
 8002d0e:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <_ZN10LEDControl15Thread2FunctionEPKv+0x54>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 f9d0 	bl	80030b8 <osThreadResume>
        osThreadSuspend(nullptr);
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f000 f9c0 	bl	800309e <osThreadSuspend>
        count = osKernelSysTick() + 10000;
 8002d1e:	e7d9      	b.n	8002cd4 <_ZN10LEDControl15Thread2FunctionEPKv+0x8>
 8002d20:	200000a0 	.word	0x200000a0

08002d24 <_ZN10LEDControl20ConfigureSystemClockEv>:
    }
}

void LEDControl::ConfigureSystemClock()
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b096      	sub	sp, #88	; 0x58
 8002d28:	af00      	add	r7, sp, #0
    RCC_ClkInitTypeDef RCC_ClkInitStruct;
    RCC_OscInitTypeDef RCC_OscInitStruct;
    HAL_StatusTypeDef ret = HAL_OK;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

    // Enable Power Control clock and configure voltage scaling
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d30:	2300      	movs	r3, #0
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	4b33      	ldr	r3, [pc, #204]	; (8002e04 <_ZN10LEDControl20ConfigureSystemClockEv+0xe0>)
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	4a32      	ldr	r2, [pc, #200]	; (8002e04 <_ZN10LEDControl20ConfigureSystemClockEv+0xe0>)
 8002d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d40:	4b30      	ldr	r3, [pc, #192]	; (8002e04 <_ZN10LEDControl20ConfigureSystemClockEv+0xe0>)
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	607b      	str	r3, [r7, #4]
 8002d50:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <_ZN10LEDControl20ConfigureSystemClockEv+0xe4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a2c      	ldr	r2, [pc, #176]	; (8002e08 <_ZN10LEDControl20ConfigureSystemClockEv+0xe4>)
 8002d56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	4b2a      	ldr	r3, [pc, #168]	; (8002e08 <_ZN10LEDControl20ConfigureSystemClockEv+0xe4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d64:	607b      	str	r3, [r7, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]

    // Configure and initialize the system oscillator and PLL
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	60fb      	str	r3, [r7, #12]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d70:	613b      	str	r3, [r7, #16]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d72:	2302      	movs	r3, #2
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLM = 8;
 8002d7c:	2308      	movs	r3, #8
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.PLL.PLLN = 360;
 8002d80:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d86:	2302      	movs	r3, #2
 8002d88:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8002d8a:	2307      	movs	r3, #7
 8002d8c:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLR = 6;
 8002d8e:	2306      	movs	r3, #6
 8002d90:	63fb      	str	r3, [r7, #60]	; 0x3c

    ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002d92:	f107 030c 	add.w	r3, r7, #12
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7ff f9c8 	bl	800212c <HAL_RCC_OscConfig>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (ret != HAL_OK)
 8002da2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <_ZN10LEDControl20ConfigureSystemClockEv+0x8a>
        HandleError();
 8002daa:	f000 f82f 	bl	8002e0c <_ZN10LEDControl11HandleErrorEv>

    ret = HAL_PWREx_EnableOverDrive();
 8002dae:	f7fe ff2f 	bl	8001c10 <HAL_PWREx_EnableOverDrive>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (ret != HAL_OK)
 8002db8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <_ZN10LEDControl20ConfigureSystemClockEv+0xa0>
        HandleError();
 8002dc0:	f000 f824 	bl	8002e0c <_ZN10LEDControl11HandleErrorEv>

    // Configure and initialize the system clocks
    RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002dc4:	230f      	movs	r3, #15
 8002dc6:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002dd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dda:	653b      	str	r3, [r7, #80]	; 0x50
    ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8002ddc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002de0:	2105      	movs	r1, #5
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe ff64 	bl	8001cb0 <HAL_RCC_ClockConfig>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (ret != HAL_OK)
 8002dee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <_ZN10LEDControl20ConfigureSystemClockEv+0xd6>
        HandleError();
 8002df6:	f000 f809 	bl	8002e0c <_ZN10LEDControl11HandleErrorEv>
}
 8002dfa:	bf00      	nop
 8002dfc:	3758      	adds	r7, #88	; 0x58
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	40023800 	.word	0x40023800
 8002e08:	40007000 	.word	0x40007000

08002e0c <_ZN10LEDControl11HandleErrorEv>:

void LEDControl::HandleError()
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
    // Turn on LED3 and enter an infinite loop to handle errors
    BSP_LED_On(LED3);
 8002e10:	2002      	movs	r0, #2
 8002e12:	f7fe fb61 	bl	80014d8 <BSP_LED_On>
    while (true) {}
 8002e16:	e7fe      	b.n	8002e16 <_ZN10LEDControl11HandleErrorEv+0xa>

08002e18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08c      	sub	sp, #48	; 0x30
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  
    /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	2036      	movs	r0, #54	; 0x36
 8002e2e:	f7fe fce5 	bl	80017fc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e32:	2036      	movs	r0, #54	; 0x36
 8002e34:	f7fe fcfe 	bl	8001834 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	4b25      	ldr	r3, [pc, #148]	; (8002ed4 <HAL_InitTick+0xbc>)
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	4a24      	ldr	r2, [pc, #144]	; (8002ed4 <HAL_InitTick+0xbc>)
 8002e42:	f043 0310 	orr.w	r3, r3, #16
 8002e46:	6413      	str	r3, [r2, #64]	; 0x40
 8002e48:	4b22      	ldr	r3, [pc, #136]	; (8002ed4 <HAL_InitTick+0xbc>)
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e54:	f107 020c 	add.w	r2, r7, #12
 8002e58:	f107 0310 	add.w	r3, r7, #16
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7ff f932 	bl	80020c8 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8002e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d103      	bne.n	8002e76 <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002e6e:	f7ff f917 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8002e72:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002e74:	e004      	b.n	8002e80 <HAL_InitTick+0x68>
  }
  else
  {
    uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002e76:	f7ff f913 	bl	80020a0 <HAL_RCC_GetPCLK1Freq>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e82:	4a15      	ldr	r2, [pc, #84]	; (8002ed8 <HAL_InitTick+0xc0>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	0c9b      	lsrs	r3, r3, #18
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8002e8e:	4b13      	ldr	r3, [pc, #76]	; (8002edc <HAL_InitTick+0xc4>)
 8002e90:	4a13      	ldr	r2, [pc, #76]	; (8002ee0 <HAL_InitTick+0xc8>)
 8002e92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8002e94:	4b11      	ldr	r3, [pc, #68]	; (8002edc <HAL_InitTick+0xc4>)
 8002e96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e9a:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8002e9c:	4a0f      	ldr	r2, [pc, #60]	; (8002edc <HAL_InitTick+0xc4>)
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 8002ea2:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <HAL_InitTick+0xc4>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <HAL_InitTick+0xc4>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	609a      	str	r2, [r3, #8]
  TimHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eae:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_InitTick+0xc4>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8002eb4:	4809      	ldr	r0, [pc, #36]	; (8002edc <HAL_InitTick+0xc4>)
 8002eb6:	f7ff fbbd 	bl	8002634 <HAL_TIM_Base_Init>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d104      	bne.n	8002eca <HAL_InitTick+0xb2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8002ec0:	4806      	ldr	r0, [pc, #24]	; (8002edc <HAL_InitTick+0xc4>)
 8002ec2:	f7ff fc11 	bl	80026e8 <HAL_TIM_Base_Start_IT>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	e000      	b.n	8002ecc <HAL_InitTick+0xb4>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3730      	adds	r7, #48	; 0x30
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	431bde83 	.word	0x431bde83
 8002edc:	200000a8 	.word	0x200000a8
 8002ee0:	40001000 	.word	0x40001000

08002ee4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  HAL_IncTick();
 8002eec:	f7fe fbae 	bl	800164c <HAL_IncTick>
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8002efc:	4802      	ldr	r0, [pc, #8]	; (8002f08 <TIM6_DAC_IRQHandler+0x10>)
 8002efe:	f7ff fc63 	bl	80027c8 <HAL_TIM_IRQHandler>
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	200000a8 	.word	0x200000a8

08002f0c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002f1e:	e7fe      	b.n	8002f1e <HardFault_Handler+0x4>

08002f20 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002f24:	e7fe      	b.n	8002f24 <MemManage_Handler+0x4>

08002f26 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002f26:	b480      	push	{r7}
 8002f28:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002f2a:	e7fe      	b.n	8002f2a <BusFault_Handler+0x4>

08002f2c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002f30:	e7fe      	b.n	8002f30 <UsageFault_Handler+0x4>

08002f32 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
   */
void DebugMon_Handler(void)
{
 8002f32:	b480      	push	{r7}
 8002f34:	af00      	add	r7, sp, #0
}
 8002f36:	bf00      	nop
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  osSystickHandler();
 8002f44:	f000 f8a0 	bl	8003088 <osSystickHandler>
}
 8002f48:	bf00      	nop
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return 1;
 8002f50:	2301      	movs	r3, #1
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <_kill>:

int _kill(int pid, int sig)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f66:	f002 fda7 	bl	8005ab8 <__errno>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2216      	movs	r2, #22
 8002f6e:	601a      	str	r2, [r3, #0]
  return -1;
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <_exit>:

void _exit (int status)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f84:	f04f 31ff 	mov.w	r1, #4294967295
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ffe7 	bl	8002f5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f8e:	e7fe      	b.n	8002f8e <_exit+0x12>

08002f90 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fa2:	2b84      	cmp	r3, #132	; 0x84
 8002fa4:	d005      	beq.n	8002fb2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002fa6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4413      	add	r3, r2
 8002fae:	3303      	adds	r3, #3
 8002fb0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fc6:	f3ef 8305 	mrs	r3, IPSR
 8002fca:	607b      	str	r3, [r7, #4]
  return(result);
 8002fcc:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bf14      	ite	ne
 8002fd2:	2301      	movne	r3, #1
 8002fd4:	2300      	moveq	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002fe8:	f001 f8ec 	bl	80041c4 <vTaskStartScheduler>
  
  return osOK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8002ff6:	f7ff ffe3 	bl	8002fc0 <inHandlerMode>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8003000:	f001 f9e8 	bl	80043d4 <xTaskGetTickCountFromISR>
 8003004:	4603      	mov	r3, r0
 8003006:	e002      	b.n	800300e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8003008:	f001 f9d4 	bl	80043b4 <xTaskGetTickCount>
 800300c:	4603      	mov	r3, r0
  }
}
 800300e:	4618      	mov	r0, r3
 8003010:	bd80      	pop	{r7, pc}

08003012 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003012:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003014:	b087      	sub	sp, #28
 8003016:	af02      	add	r7, sp, #8
 8003018:	6078      	str	r0, [r7, #4]
 800301a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685c      	ldr	r4, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003028:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ffad 	bl	8002f90 <makeFreeRtosPriority>
 8003036:	4602      	mov	r2, r0
 8003038:	f107 030c 	add.w	r3, r7, #12
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	9200      	str	r2, [sp, #0]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	4632      	mov	r2, r6
 8003044:	4629      	mov	r1, r5
 8003046:	4620      	mov	r0, r4
 8003048:	f000 fdb6 	bl	8003bb8 <xTaskCreate>
 800304c:	4603      	mov	r3, r0
 800304e:	2b01      	cmp	r3, #1
 8003050:	d001      	beq.n	8003056 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003052:	2300      	movs	r3, #0
 8003054:	e000      	b.n	8003058 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003056:	68fb      	ldr	r3, [r7, #12]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003060 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <osDelay+0x16>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	e000      	b.n	8003078 <osDelay+0x18>
 8003076:	2301      	movs	r3, #1
 8003078:	4618      	mov	r0, r3
 800307a:	f000 fedb 	bl	8003e34 <vTaskDelay>
  
  return osOK;
 800307e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003080:	4618      	mov	r0, r3
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800308c:	f001 fcb4 	bl	80049f8 <xTaskGetSchedulerState>
 8003090:	4603      	mov	r3, r0
 8003092:	2b01      	cmp	r3, #1
 8003094:	d001      	beq.n	800309a <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8003096:	f002 fc77 	bl	8005988 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}

0800309e <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b082      	sub	sp, #8
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fef8 	bl	8003e9c <vTaskSuspend>
  
  return osOK;
 80030ac:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 80030c0:	f7ff ff7e 	bl	8002fc0 <inHandlerMode>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00e      	beq.n	80030e8 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f001 f808 	bl	80040e0 <xTaskResumeFromISR>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d10b      	bne.n	80030ee <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 80030d6:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <osThreadResume+0x40>)
 80030d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	f3bf 8f4f 	dsb	sy
 80030e2:	f3bf 8f6f 	isb	sy
 80030e6:	e002      	b.n	80030ee <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 ff9b 	bl	8004024 <vTaskResume>
  }
  return osOK;
 80030ee:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	e000ed04 	.word	0xe000ed04

080030fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f103 0208 	add.w	r2, r3, #8
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f04f 32ff 	mov.w	r2, #4294967295
 8003114:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f103 0208 	add.w	r2, r3, #8
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f103 0208 	add.w	r2, r3, #8
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003156:	b480      	push	{r7}
 8003158:	b085      	sub	sp, #20
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	601a      	str	r2, [r3, #0]
}
 8003192:	bf00      	nop
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b4:	d103      	bne.n	80031be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	e00c      	b.n	80031d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	3308      	adds	r3, #8
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	e002      	b.n	80031cc <vListInsert+0x2e>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d2f6      	bcs.n	80031c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	601a      	str	r2, [r3, #0]
}
 8003204:	bf00      	nop
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	6892      	ldr	r2, [r2, #8]
 8003226:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6852      	ldr	r2, [r2, #4]
 8003230:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	429a      	cmp	r2, r3
 800323a:	d103      	bne.n	8003244 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	1e5a      	subs	r2, r3, #1
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
}
 8003258:	4618      	mov	r0, r3
 800325a:	3714      	adds	r7, #20
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10a      	bne.n	800328e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800328a:	bf00      	nop
 800328c:	e7fe      	b.n	800328c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800328e:	f002 fae9 	bl	8005864 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329a:	68f9      	ldr	r1, [r7, #12]
 800329c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	441a      	add	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032be:	3b01      	subs	r3, #1
 80032c0:	68f9      	ldr	r1, [r7, #12]
 80032c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	441a      	add	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	22ff      	movs	r2, #255	; 0xff
 80032d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	22ff      	movs	r2, #255	; 0xff
 80032da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d114      	bne.n	800330e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01a      	beq.n	8003322 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	3310      	adds	r3, #16
 80032f0:	4618      	mov	r0, r3
 80032f2:	f001 f9e5 	bl	80046c0 <xTaskRemoveFromEventList>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d012      	beq.n	8003322 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80032fc:	4b0c      	ldr	r3, [pc, #48]	; (8003330 <xQueueGenericReset+0xcc>)
 80032fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	f3bf 8f4f 	dsb	sy
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	e009      	b.n	8003322 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	3310      	adds	r3, #16
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff fef2 	bl	80030fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	3324      	adds	r3, #36	; 0x24
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff feed 	bl	80030fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003322:	f002 facf 	bl	80058c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003326:	2301      	movs	r3, #1
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	e000ed04 	.word	0xe000ed04

08003334 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	; 0x28
 8003338:	af02      	add	r7, sp, #8
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	4613      	mov	r3, r2
 8003340:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10a      	bne.n	800335e <xQueueGenericCreate+0x2a>
	__asm volatile
 8003348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	613b      	str	r3, [r7, #16]
}
 800335a:	bf00      	nop
 800335c:	e7fe      	b.n	800335c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	fb02 f303 	mul.w	r3, r2, r3
 8003366:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	3350      	adds	r3, #80	; 0x50
 800336c:	4618      	mov	r0, r3
 800336e:	f001 ff5f 	bl	8005230 <pvPortMalloc>
 8003372:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00d      	beq.n	8003396 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	3350      	adds	r3, #80	; 0x50
 8003382:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003384:	79fa      	ldrb	r2, [r7, #7]
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	4613      	mov	r3, r2
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 f805 	bl	80033a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003396:	69bb      	ldr	r3, [r7, #24]
	}
 8003398:	4618      	mov	r0, r3
 800339a:	3720      	adds	r7, #32
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
 80033ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d103      	bne.n	80033bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	e002      	b.n	80033c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033ce:	2101      	movs	r1, #1
 80033d0:	69b8      	ldr	r0, [r7, #24]
 80033d2:	f7ff ff47 	bl	8003264 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033de:	bf00      	nop
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08e      	sub	sp, #56	; 0x38
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033f6:	2300      	movs	r3, #0
 80033f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <xQueueGenericSend+0x32>
	__asm volatile
 8003404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003416:	bf00      	nop
 8003418:	e7fe      	b.n	8003418 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d103      	bne.n	8003428 <xQueueGenericSend+0x40>
 8003420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <xQueueGenericSend+0x44>
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <xQueueGenericSend+0x46>
 800342c:	2300      	movs	r3, #0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10a      	bne.n	8003448 <xQueueGenericSend+0x60>
	__asm volatile
 8003432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003444:	bf00      	nop
 8003446:	e7fe      	b.n	8003446 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d103      	bne.n	8003456 <xQueueGenericSend+0x6e>
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <xQueueGenericSend+0x72>
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <xQueueGenericSend+0x74>
 800345a:	2300      	movs	r3, #0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10a      	bne.n	8003476 <xQueueGenericSend+0x8e>
	__asm volatile
 8003460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003464:	f383 8811 	msr	BASEPRI, r3
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	623b      	str	r3, [r7, #32]
}
 8003472:	bf00      	nop
 8003474:	e7fe      	b.n	8003474 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003476:	f001 fabf 	bl	80049f8 <xTaskGetSchedulerState>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d102      	bne.n	8003486 <xQueueGenericSend+0x9e>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <xQueueGenericSend+0xa2>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <xQueueGenericSend+0xa4>
 800348a:	2300      	movs	r3, #0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10a      	bne.n	80034a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8003490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	61fb      	str	r3, [r7, #28]
}
 80034a2:	bf00      	nop
 80034a4:	e7fe      	b.n	80034a4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034a6:	f002 f9dd 	bl	8005864 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d302      	bcc.n	80034bc <xQueueGenericSend+0xd4>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d129      	bne.n	8003510 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	68b9      	ldr	r1, [r7, #8]
 80034c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034c2:	f000 fa0b 	bl	80038dc <prvCopyDataToQueue>
 80034c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d010      	beq.n	80034f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d2:	3324      	adds	r3, #36	; 0x24
 80034d4:	4618      	mov	r0, r3
 80034d6:	f001 f8f3 	bl	80046c0 <xTaskRemoveFromEventList>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d013      	beq.n	8003508 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034e0:	4b3f      	ldr	r3, [pc, #252]	; (80035e0 <xQueueGenericSend+0x1f8>)
 80034e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	f3bf 8f6f 	isb	sy
 80034f0:	e00a      	b.n	8003508 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80034f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d007      	beq.n	8003508 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80034f8:	4b39      	ldr	r3, [pc, #228]	; (80035e0 <xQueueGenericSend+0x1f8>)
 80034fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003508:	f002 f9dc 	bl	80058c4 <vPortExitCritical>
				return pdPASS;
 800350c:	2301      	movs	r3, #1
 800350e:	e063      	b.n	80035d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d103      	bne.n	800351e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003516:	f002 f9d5 	bl	80058c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800351a:	2300      	movs	r3, #0
 800351c:	e05c      	b.n	80035d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800351e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003520:	2b00      	cmp	r3, #0
 8003522:	d106      	bne.n	8003532 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003524:	f107 0314 	add.w	r3, r7, #20
 8003528:	4618      	mov	r0, r3
 800352a:	f001 f92b 	bl	8004784 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800352e:	2301      	movs	r3, #1
 8003530:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003532:	f002 f9c7 	bl	80058c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003536:	f000 fe93 	bl	8004260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800353a:	f002 f993 	bl	8005864 <vPortEnterCritical>
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003544:	b25b      	sxtb	r3, r3
 8003546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354a:	d103      	bne.n	8003554 <xQueueGenericSend+0x16c>
 800354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003556:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800355a:	b25b      	sxtb	r3, r3
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d103      	bne.n	800356a <xQueueGenericSend+0x182>
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800356a:	f002 f9ab 	bl	80058c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800356e:	1d3a      	adds	r2, r7, #4
 8003570:	f107 0314 	add.w	r3, r7, #20
 8003574:	4611      	mov	r1, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f001 f91a 	bl	80047b0 <xTaskCheckForTimeOut>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d124      	bne.n	80035cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003582:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003584:	f000 faa2 	bl	8003acc <prvIsQueueFull>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d018      	beq.n	80035c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800358e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003590:	3310      	adds	r3, #16
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	4611      	mov	r1, r2
 8003596:	4618      	mov	r0, r3
 8003598:	f001 f842 	bl	8004620 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800359c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800359e:	f000 fa2d 	bl	80039fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035a2:	f000 fe6b 	bl	800427c <xTaskResumeAll>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f47f af7c 	bne.w	80034a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80035ae:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <xQueueGenericSend+0x1f8>)
 80035b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	e772      	b.n	80034a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035c2:	f000 fa1b 	bl	80039fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035c6:	f000 fe59 	bl	800427c <xTaskResumeAll>
 80035ca:	e76c      	b.n	80034a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80035cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035ce:	f000 fa15 	bl	80039fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035d2:	f000 fe53 	bl	800427c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80035d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3738      	adds	r7, #56	; 0x38
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	e000ed04 	.word	0xe000ed04

080035e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b090      	sub	sp, #64	; 0x40
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80035f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10a      	bne.n	8003612 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80035fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800360e:	bf00      	nop
 8003610:	e7fe      	b.n	8003610 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d103      	bne.n	8003620 <xQueueGenericSendFromISR+0x3c>
 8003618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <xQueueGenericSendFromISR+0x40>
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <xQueueGenericSendFromISR+0x42>
 8003624:	2300      	movs	r3, #0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10a      	bne.n	8003640 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800363c:	bf00      	nop
 800363e:	e7fe      	b.n	800363e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d103      	bne.n	800364e <xQueueGenericSendFromISR+0x6a>
 8003646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <xQueueGenericSendFromISR+0x6e>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <xQueueGenericSendFromISR+0x70>
 8003652:	2300      	movs	r3, #0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	623b      	str	r3, [r7, #32]
}
 800366a:	bf00      	nop
 800366c:	e7fe      	b.n	800366c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800366e:	f002 f9db 	bl	8005a28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003672:	f3ef 8211 	mrs	r2, BASEPRI
 8003676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	61fa      	str	r2, [r7, #28]
 8003688:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800368a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800368c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800368e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003696:	429a      	cmp	r2, r3
 8003698:	d302      	bcc.n	80036a0 <xQueueGenericSendFromISR+0xbc>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d12f      	bne.n	8003700 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80036b6:	f000 f911 	bl	80038dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036ba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80036be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036c2:	d112      	bne.n	80036ea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d016      	beq.n	80036fa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ce:	3324      	adds	r3, #36	; 0x24
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 fff5 	bl	80046c0 <xTaskRemoveFromEventList>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00e      	beq.n	80036fa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00b      	beq.n	80036fa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	601a      	str	r2, [r3, #0]
 80036e8:	e007      	b.n	80036fa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80036ee:	3301      	adds	r3, #1
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	b25a      	sxtb	r2, r3
 80036f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80036fa:	2301      	movs	r3, #1
 80036fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80036fe:	e001      	b.n	8003704 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003700:	2300      	movs	r3, #0
 8003702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003706:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800370e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003712:	4618      	mov	r0, r3
 8003714:	3740      	adds	r7, #64	; 0x40
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08c      	sub	sp, #48	; 0x30
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003728:	2300      	movs	r3, #0
 800372a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10a      	bne.n	800374c <xQueueReceive+0x30>
	__asm volatile
 8003736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373a:	f383 8811 	msr	BASEPRI, r3
 800373e:	f3bf 8f6f 	isb	sy
 8003742:	f3bf 8f4f 	dsb	sy
 8003746:	623b      	str	r3, [r7, #32]
}
 8003748:	bf00      	nop
 800374a:	e7fe      	b.n	800374a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d103      	bne.n	800375a <xQueueReceive+0x3e>
 8003752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <xQueueReceive+0x42>
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <xQueueReceive+0x44>
 800375e:	2300      	movs	r3, #0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10a      	bne.n	800377a <xQueueReceive+0x5e>
	__asm volatile
 8003764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	61fb      	str	r3, [r7, #28]
}
 8003776:	bf00      	nop
 8003778:	e7fe      	b.n	8003778 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800377a:	f001 f93d 	bl	80049f8 <xTaskGetSchedulerState>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d102      	bne.n	800378a <xQueueReceive+0x6e>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <xQueueReceive+0x72>
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <xQueueReceive+0x74>
 800378e:	2300      	movs	r3, #0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d10a      	bne.n	80037aa <xQueueReceive+0x8e>
	__asm volatile
 8003794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003798:	f383 8811 	msr	BASEPRI, r3
 800379c:	f3bf 8f6f 	isb	sy
 80037a0:	f3bf 8f4f 	dsb	sy
 80037a4:	61bb      	str	r3, [r7, #24]
}
 80037a6:	bf00      	nop
 80037a8:	e7fe      	b.n	80037a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037aa:	f002 f85b 	bl	8005864 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d01f      	beq.n	80037fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037ba:	68b9      	ldr	r1, [r7, #8]
 80037bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037be:	f000 f8f7 	bl	80039b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	1e5a      	subs	r2, r3, #1
 80037c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00f      	beq.n	80037f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d4:	3310      	adds	r3, #16
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 ff72 	bl	80046c0 <xTaskRemoveFromEventList>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d007      	beq.n	80037f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80037e2:	4b3d      	ldr	r3, [pc, #244]	; (80038d8 <xQueueReceive+0x1bc>)
 80037e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037f2:	f002 f867 	bl	80058c4 <vPortExitCritical>
				return pdPASS;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e069      	b.n	80038ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d103      	bne.n	8003808 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003800:	f002 f860 	bl	80058c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003804:	2300      	movs	r3, #0
 8003806:	e062      	b.n	80038ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800380e:	f107 0310 	add.w	r3, r7, #16
 8003812:	4618      	mov	r0, r3
 8003814:	f000 ffb6 	bl	8004784 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003818:	2301      	movs	r3, #1
 800381a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800381c:	f002 f852 	bl	80058c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003820:	f000 fd1e 	bl	8004260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003824:	f002 f81e 	bl	8005864 <vPortEnterCritical>
 8003828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800382e:	b25b      	sxtb	r3, r3
 8003830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003834:	d103      	bne.n	800383e <xQueueReceive+0x122>
 8003836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003838:	2200      	movs	r2, #0
 800383a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800383e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003840:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003844:	b25b      	sxtb	r3, r3
 8003846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384a:	d103      	bne.n	8003854 <xQueueReceive+0x138>
 800384c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003854:	f002 f836 	bl	80058c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003858:	1d3a      	adds	r2, r7, #4
 800385a:	f107 0310 	add.w	r3, r7, #16
 800385e:	4611      	mov	r1, r2
 8003860:	4618      	mov	r0, r3
 8003862:	f000 ffa5 	bl	80047b0 <xTaskCheckForTimeOut>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d123      	bne.n	80038b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800386c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800386e:	f000 f917 	bl	8003aa0 <prvIsQueueEmpty>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d017      	beq.n	80038a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387a:	3324      	adds	r3, #36	; 0x24
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	4611      	mov	r1, r2
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fecd 	bl	8004620 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003888:	f000 f8b8 	bl	80039fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800388c:	f000 fcf6 	bl	800427c <xTaskResumeAll>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d189      	bne.n	80037aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003896:	4b10      	ldr	r3, [pc, #64]	; (80038d8 <xQueueReceive+0x1bc>)
 8003898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	e780      	b.n	80037aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038aa:	f000 f8a7 	bl	80039fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038ae:	f000 fce5 	bl	800427c <xTaskResumeAll>
 80038b2:	e77a      	b.n	80037aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038b6:	f000 f8a1 	bl	80039fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038ba:	f000 fcdf 	bl	800427c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038c0:	f000 f8ee 	bl	8003aa0 <prvIsQueueEmpty>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f43f af6f 	beq.w	80037aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80038cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3730      	adds	r7, #48	; 0x30
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	e000ed04 	.word	0xe000ed04

080038dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10d      	bne.n	8003916 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d14d      	bne.n	800399e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	4618      	mov	r0, r3
 8003908:	f001 f894 	bl	8004a34 <xTaskPriorityDisinherit>
 800390c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	e043      	b.n	800399e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d119      	bne.n	8003950 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6858      	ldr	r0, [r3, #4]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003924:	461a      	mov	r2, r3
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	f002 f8f0 	bl	8005b0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	441a      	add	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	429a      	cmp	r2, r3
 8003944:	d32b      	bcc.n	800399e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	e026      	b.n	800399e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	68d8      	ldr	r0, [r3, #12]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003958:	461a      	mov	r2, r3
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	f002 f8d6 	bl	8005b0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	425b      	negs	r3, r3
 800396a:	441a      	add	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d207      	bcs.n	800398c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	425b      	negs	r3, r3
 8003986:	441a      	add	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d105      	bne.n	800399e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	3b01      	subs	r3, #1
 800399c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1c5a      	adds	r2, r3, #1
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80039a6:	697b      	ldr	r3, [r7, #20]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d018      	beq.n	80039f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	441a      	add	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d303      	bcc.n	80039e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68d9      	ldr	r1, [r3, #12]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	461a      	mov	r2, r3
 80039ee:	6838      	ldr	r0, [r7, #0]
 80039f0:	f002 f88c 	bl	8005b0c <memcpy>
	}
}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a04:	f001 ff2e 	bl	8005864 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a10:	e011      	b.n	8003a36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d012      	beq.n	8003a40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3324      	adds	r3, #36	; 0x24
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 fe4e 	bl	80046c0 <xTaskRemoveFromEventList>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a2a:	f000 ff23 	bl	8004874 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	dce9      	bgt.n	8003a12 <prvUnlockQueue+0x16>
 8003a3e:	e000      	b.n	8003a42 <prvUnlockQueue+0x46>
					break;
 8003a40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	22ff      	movs	r2, #255	; 0xff
 8003a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003a4a:	f001 ff3b 	bl	80058c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a4e:	f001 ff09 	bl	8005864 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a5a:	e011      	b.n	8003a80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d012      	beq.n	8003a8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3310      	adds	r3, #16
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fe29 	bl	80046c0 <xTaskRemoveFromEventList>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a74:	f000 fefe 	bl	8004874 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a78:	7bbb      	ldrb	r3, [r7, #14]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	dce9      	bgt.n	8003a5c <prvUnlockQueue+0x60>
 8003a88:	e000      	b.n	8003a8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	22ff      	movs	r2, #255	; 0xff
 8003a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003a94:	f001 ff16 	bl	80058c4 <vPortExitCritical>
}
 8003a98:	bf00      	nop
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003aa8:	f001 fedc 	bl	8005864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d102      	bne.n	8003aba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	e001      	b.n	8003abe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003abe:	f001 ff01 	bl	80058c4 <vPortExitCritical>

	return xReturn;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ad4:	f001 fec6 	bl	8005864 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d102      	bne.n	8003aea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	e001      	b.n	8003aee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003aee:	f001 fee9 	bl	80058c4 <vPortExitCritical>

	return xReturn;
 8003af2:	68fb      	ldr	r3, [r7, #12]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	e014      	b.n	8003b36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b0c:	4a0f      	ldr	r2, [pc, #60]	; (8003b4c <vQueueAddToRegistry+0x50>)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10b      	bne.n	8003b30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b18:	490c      	ldr	r1, [pc, #48]	; (8003b4c <vQueueAddToRegistry+0x50>)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b22:	4a0a      	ldr	r2, [pc, #40]	; (8003b4c <vQueueAddToRegistry+0x50>)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4413      	add	r3, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b2e:	e006      	b.n	8003b3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	3301      	adds	r3, #1
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b07      	cmp	r3, #7
 8003b3a:	d9e7      	bls.n	8003b0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b3c:	bf00      	nop
 8003b3e:	bf00      	nop
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	200000f0 	.word	0x200000f0

08003b50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b60:	f001 fe80 	bl	8005864 <vPortEnterCritical>
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b6a:	b25b      	sxtb	r3, r3
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d103      	bne.n	8003b7a <vQueueWaitForMessageRestricted+0x2a>
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b80:	b25b      	sxtb	r3, r3
 8003b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b86:	d103      	bne.n	8003b90 <vQueueWaitForMessageRestricted+0x40>
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003b90:	f001 fe98 	bl	80058c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d106      	bne.n	8003baa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	3324      	adds	r3, #36	; 0x24
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	68b9      	ldr	r1, [r7, #8]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 fd5f 	bl	8004668 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003baa:	6978      	ldr	r0, [r7, #20]
 8003bac:	f7ff ff26 	bl	80039fc <prvUnlockQueue>
	}
 8003bb0:	bf00      	nop
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08c      	sub	sp, #48	; 0x30
 8003bbc:	af04      	add	r7, sp, #16
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003bc8:	88fb      	ldrh	r3, [r7, #6]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f001 fb2f 	bl	8005230 <pvPortMalloc>
 8003bd2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00e      	beq.n	8003bf8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bda:	205c      	movs	r0, #92	; 0x5c
 8003bdc:	f001 fb28 	bl	8005230 <pvPortMalloc>
 8003be0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	631a      	str	r2, [r3, #48]	; 0x30
 8003bee:	e005      	b.n	8003bfc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003bf0:	6978      	ldr	r0, [r7, #20]
 8003bf2:	f001 fbe9 	bl	80053c8 <vPortFree>
 8003bf6:	e001      	b.n	8003bfc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d013      	beq.n	8003c2a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c02:	88fa      	ldrh	r2, [r7, #6]
 8003c04:	2300      	movs	r3, #0
 8003c06:	9303      	str	r3, [sp, #12]
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	9302      	str	r3, [sp, #8]
 8003c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c0e:	9301      	str	r3, [sp, #4]
 8003c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68b9      	ldr	r1, [r7, #8]
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 f80e 	bl	8003c3a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c1e:	69f8      	ldr	r0, [r7, #28]
 8003c20:	f000 f89a 	bl	8003d58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c24:	2301      	movs	r3, #1
 8003c26:	61bb      	str	r3, [r7, #24]
 8003c28:	e002      	b.n	8003c30 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c30:	69bb      	ldr	r3, [r7, #24]
	}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3720      	adds	r7, #32
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b088      	sub	sp, #32
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	607a      	str	r2, [r7, #4]
 8003c46:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	461a      	mov	r2, r3
 8003c52:	21a5      	movs	r1, #165	; 0xa5
 8003c54:	f001 ff28 	bl	8005aa8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c62:	3b01      	subs	r3, #1
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	4413      	add	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f023 0307 	bic.w	r3, r3, #7
 8003c70:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c72:	69bb      	ldr	r3, [r7, #24]
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	617b      	str	r3, [r7, #20]
}
 8003c8e:	bf00      	nop
 8003c90:	e7fe      	b.n	8003c90 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01f      	beq.n	8003cd8 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c98:	2300      	movs	r3, #0
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	e012      	b.n	8003cc4 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	7819      	ldrb	r1, [r3, #0]
 8003ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	4413      	add	r3, r2
 8003cac:	3334      	adds	r3, #52	; 0x34
 8003cae:	460a      	mov	r2, r1
 8003cb0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003cb2:	68ba      	ldr	r2, [r7, #8]
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d006      	beq.n	8003ccc <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	61fb      	str	r3, [r7, #28]
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	2b0f      	cmp	r3, #15
 8003cc8:	d9e9      	bls.n	8003c9e <prvInitialiseNewTask+0x64>
 8003cca:	e000      	b.n	8003cce <prvInitialiseNewTask+0x94>
			{
				break;
 8003ccc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cd6:	e003      	b.n	8003ce0 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	2b07      	cmp	r3, #7
 8003ce4:	d901      	bls.n	8003cea <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ce6:	2307      	movs	r3, #7
 8003ce8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cee:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cf4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfe:	3304      	adds	r3, #4
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fa1b 	bl	800313c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	3318      	adds	r3, #24
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff fa16 	bl	800313c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d18:	f1c3 0208 	rsb	r2, r3, #8
 8003d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d24:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d28:	2200      	movs	r2, #0
 8003d2a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	68f9      	ldr	r1, [r7, #12]
 8003d38:	69b8      	ldr	r0, [r7, #24]
 8003d3a:	f001 fc63 	bl	8005604 <pxPortInitialiseStack>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d50:	bf00      	nop
 8003d52:	3720      	adds	r7, #32
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d60:	f001 fd80 	bl	8005864 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d64:	4b2c      	ldr	r3, [pc, #176]	; (8003e18 <prvAddNewTaskToReadyList+0xc0>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	4a2b      	ldr	r2, [pc, #172]	; (8003e18 <prvAddNewTaskToReadyList+0xc0>)
 8003d6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d6e:	4b2b      	ldr	r3, [pc, #172]	; (8003e1c <prvAddNewTaskToReadyList+0xc4>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d109      	bne.n	8003d8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d76:	4a29      	ldr	r2, [pc, #164]	; (8003e1c <prvAddNewTaskToReadyList+0xc4>)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d7c:	4b26      	ldr	r3, [pc, #152]	; (8003e18 <prvAddNewTaskToReadyList+0xc0>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d110      	bne.n	8003da6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d84:	f000 fd9a 	bl	80048bc <prvInitialiseTaskLists>
 8003d88:	e00d      	b.n	8003da6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d8a:	4b25      	ldr	r3, [pc, #148]	; (8003e20 <prvAddNewTaskToReadyList+0xc8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d92:	4b22      	ldr	r3, [pc, #136]	; (8003e1c <prvAddNewTaskToReadyList+0xc4>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d802      	bhi.n	8003da6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003da0:	4a1e      	ldr	r2, [pc, #120]	; (8003e1c <prvAddNewTaskToReadyList+0xc4>)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003da6:	4b1f      	ldr	r3, [pc, #124]	; (8003e24 <prvAddNewTaskToReadyList+0xcc>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3301      	adds	r3, #1
 8003dac:	4a1d      	ldr	r2, [pc, #116]	; (8003e24 <prvAddNewTaskToReadyList+0xcc>)
 8003dae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003db0:	4b1c      	ldr	r3, [pc, #112]	; (8003e24 <prvAddNewTaskToReadyList+0xcc>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <prvAddNewTaskToReadyList+0xd0>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	4a18      	ldr	r2, [pc, #96]	; (8003e28 <prvAddNewTaskToReadyList+0xd0>)
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4a15      	ldr	r2, [pc, #84]	; (8003e2c <prvAddNewTaskToReadyList+0xd4>)
 8003dd8:	441a      	add	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	3304      	adds	r3, #4
 8003dde:	4619      	mov	r1, r3
 8003de0:	4610      	mov	r0, r2
 8003de2:	f7ff f9b8 	bl	8003156 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003de6:	f001 fd6d 	bl	80058c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003dea:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <prvAddNewTaskToReadyList+0xc8>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00e      	beq.n	8003e10 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003df2:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <prvAddNewTaskToReadyList+0xc4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d207      	bcs.n	8003e10 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e00:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <prvAddNewTaskToReadyList+0xd8>)
 8003e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e10:	bf00      	nop
 8003e12:	3708      	adds	r7, #8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	20000244 	.word	0x20000244
 8003e1c:	20000130 	.word	0x20000130
 8003e20:	20000250 	.word	0x20000250
 8003e24:	20000260 	.word	0x20000260
 8003e28:	2000024c 	.word	0x2000024c
 8003e2c:	20000134 	.word	0x20000134
 8003e30:	e000ed04 	.word	0xe000ed04

08003e34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d017      	beq.n	8003e76 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e46:	4b13      	ldr	r3, [pc, #76]	; (8003e94 <vTaskDelay+0x60>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <vTaskDelay+0x30>
	__asm volatile
 8003e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e52:	f383 8811 	msr	BASEPRI, r3
 8003e56:	f3bf 8f6f 	isb	sy
 8003e5a:	f3bf 8f4f 	dsb	sy
 8003e5e:	60bb      	str	r3, [r7, #8]
}
 8003e60:	bf00      	nop
 8003e62:	e7fe      	b.n	8003e62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003e64:	f000 f9fc 	bl	8004260 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e68:	2100      	movs	r1, #0
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fe68 	bl	8004b40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e70:	f000 fa04 	bl	800427c <xTaskResumeAll>
 8003e74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d107      	bne.n	8003e8c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <vTaskDelay+0x64>)
 8003e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e8c:	bf00      	nop
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	2000026c 	.word	0x2000026c
 8003e98:	e000ed04 	.word	0xe000ed04

08003e9c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003ea4:	f001 fcde 	bl	8005864 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d102      	bne.n	8003eb4 <vTaskSuspend+0x18>
 8003eae:	4b3c      	ldr	r3, [pc, #240]	; (8003fa0 <vTaskSuspend+0x104>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	e000      	b.n	8003eb6 <vTaskSuspend+0x1a>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff f9a7 	bl	8003210 <uxListRemove>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d115      	bne.n	8003ef4 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ecc:	4935      	ldr	r1, [pc, #212]	; (8003fa4 <vTaskSuspend+0x108>)
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10a      	bne.n	8003ef4 <vTaskSuspend+0x58>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	43da      	mvns	r2, r3
 8003eea:	4b2f      	ldr	r3, [pc, #188]	; (8003fa8 <vTaskSuspend+0x10c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4013      	ands	r3, r2
 8003ef0:	4a2d      	ldr	r2, [pc, #180]	; (8003fa8 <vTaskSuspend+0x10c>)
 8003ef2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d004      	beq.n	8003f06 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	3318      	adds	r3, #24
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7ff f985 	bl	8003210 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	3304      	adds	r3, #4
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4827      	ldr	r0, [pc, #156]	; (8003fac <vTaskSuspend+0x110>)
 8003f0e:	f7ff f922 	bl	8003156 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d103      	bne.n	8003f26 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8003f26:	f001 fccd 	bl	80058c4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8003f2a:	4b21      	ldr	r3, [pc, #132]	; (8003fb0 <vTaskSuspend+0x114>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d005      	beq.n	8003f3e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003f32:	f001 fc97 	bl	8005864 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003f36:	f000 fd3f 	bl	80049b8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003f3a:	f001 fcc3 	bl	80058c4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003f3e:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <vTaskSuspend+0x104>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d127      	bne.n	8003f98 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8003f48:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <vTaskSuspend+0x114>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d017      	beq.n	8003f80 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003f50:	4b18      	ldr	r3, [pc, #96]	; (8003fb4 <vTaskSuspend+0x118>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <vTaskSuspend+0xd2>
	__asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	60bb      	str	r3, [r7, #8]
}
 8003f6a:	bf00      	nop
 8003f6c:	e7fe      	b.n	8003f6c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8003f6e:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <vTaskSuspend+0x11c>)
 8003f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f7e:	e00b      	b.n	8003f98 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003f80:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <vTaskSuspend+0x110>)
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	4b0d      	ldr	r3, [pc, #52]	; (8003fbc <vTaskSuspend+0x120>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d103      	bne.n	8003f94 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8003f8c:	4b04      	ldr	r3, [pc, #16]	; (8003fa0 <vTaskSuspend+0x104>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
	}
 8003f92:	e001      	b.n	8003f98 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8003f94:	f000 fae8 	bl	8004568 <vTaskSwitchContext>
	}
 8003f98:	bf00      	nop
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000130 	.word	0x20000130
 8003fa4:	20000134 	.word	0x20000134
 8003fa8:	2000024c 	.word	0x2000024c
 8003fac:	20000230 	.word	0x20000230
 8003fb0:	20000250 	.word	0x20000250
 8003fb4:	2000026c 	.word	0x2000026c
 8003fb8:	e000ed04 	.word	0xe000ed04
 8003fbc:	20000244 	.word	0x20000244

08003fc0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b087      	sub	sp, #28
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10a      	bne.n	8003fec <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8003fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	60fb      	str	r3, [r7, #12]
}
 8003fe8:	bf00      	nop
 8003fea:	e7fe      	b.n	8003fea <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	4a0a      	ldr	r2, [pc, #40]	; (800401c <prvTaskIsTaskSuspended+0x5c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d10a      	bne.n	800400c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	4a09      	ldr	r2, [pc, #36]	; (8004020 <prvTaskIsTaskSuspended+0x60>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d005      	beq.n	800400c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8004008:	2301      	movs	r3, #1
 800400a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800400c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800400e:	4618      	mov	r0, r3
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	20000230 	.word	0x20000230
 8004020:	20000204 	.word	0x20000204

08004024 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10a      	bne.n	800404c <vTaskResume+0x28>
	__asm volatile
 8004036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	60bb      	str	r3, [r7, #8]
}
 8004048:	bf00      	nop
 800404a:	e7fe      	b.n	800404a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800404c:	4b20      	ldr	r3, [pc, #128]	; (80040d0 <vTaskResume+0xac>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	429a      	cmp	r2, r3
 8004054:	d037      	beq.n	80040c6 <vTaskResume+0xa2>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d034      	beq.n	80040c6 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800405c:	f001 fc02 	bl	8005864 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f7ff ffad 	bl	8003fc0 <prvTaskIsTaskSuspended>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d02a      	beq.n	80040c2 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	3304      	adds	r3, #4
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff f8cd 	bl	8003210 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800407a:	2201      	movs	r2, #1
 800407c:	409a      	lsls	r2, r3
 800407e:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <vTaskResume+0xb0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4313      	orrs	r3, r2
 8004084:	4a13      	ldr	r2, [pc, #76]	; (80040d4 <vTaskResume+0xb0>)
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408c:	4613      	mov	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4a10      	ldr	r2, [pc, #64]	; (80040d8 <vTaskResume+0xb4>)
 8004096:	441a      	add	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	3304      	adds	r3, #4
 800409c:	4619      	mov	r1, r3
 800409e:	4610      	mov	r0, r2
 80040a0:	f7ff f859 	bl	8003156 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a8:	4b09      	ldr	r3, [pc, #36]	; (80040d0 <vTaskResume+0xac>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d307      	bcc.n	80040c2 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80040b2:	4b0a      	ldr	r3, [pc, #40]	; (80040dc <vTaskResume+0xb8>)
 80040b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80040c2:	f001 fbff 	bl	80058c4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80040c6:	bf00      	nop
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20000130 	.word	0x20000130
 80040d4:	2000024c 	.word	0x2000024c
 80040d8:	20000134 	.word	0x20000134
 80040dc:	e000ed04 	.word	0xe000ed04

080040e0 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08a      	sub	sp, #40	; 0x28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 80040e8:	2300      	movs	r3, #0
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d10a      	bne.n	800410c <xTaskResumeFromISR+0x2c>
	__asm volatile
 80040f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fa:	f383 8811 	msr	BASEPRI, r3
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	61bb      	str	r3, [r7, #24]
}
 8004108:	bf00      	nop
 800410a:	e7fe      	b.n	800410a <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800410c:	f001 fc8c 	bl	8005a28 <vPortValidateInterruptPriority>
	__asm volatile
 8004110:	f3ef 8211 	mrs	r2, BASEPRI
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	617a      	str	r2, [r7, #20]
 8004126:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004128:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800412a:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800412c:	6a38      	ldr	r0, [r7, #32]
 800412e:	f7ff ff47 	bl	8003fc0 <prvTaskIsTaskSuspended>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d02f      	beq.n	8004198 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004138:	4b1d      	ldr	r3, [pc, #116]	; (80041b0 <xTaskResumeFromISR+0xd0>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d125      	bne.n	800418c <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004144:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <xTaskResumeFromISR+0xd4>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414a:	429a      	cmp	r2, r3
 800414c:	d301      	bcc.n	8004152 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800414e:	2301      	movs	r3, #1
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	3304      	adds	r3, #4
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff f85a 	bl	8003210 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	2201      	movs	r2, #1
 8004162:	409a      	lsls	r2, r3
 8004164:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <xTaskResumeFromISR+0xd8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4313      	orrs	r3, r2
 800416a:	4a13      	ldr	r2, [pc, #76]	; (80041b8 <xTaskResumeFromISR+0xd8>)
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004172:	4613      	mov	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4a10      	ldr	r2, [pc, #64]	; (80041bc <xTaskResumeFromISR+0xdc>)
 800417c:	441a      	add	r2, r3
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	3304      	adds	r3, #4
 8004182:	4619      	mov	r1, r3
 8004184:	4610      	mov	r0, r2
 8004186:	f7fe ffe6 	bl	8003156 <vListInsertEnd>
 800418a:	e005      	b.n	8004198 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	3318      	adds	r3, #24
 8004190:	4619      	mov	r1, r3
 8004192:	480b      	ldr	r0, [pc, #44]	; (80041c0 <xTaskResumeFromISR+0xe0>)
 8004194:	f7fe ffdf 	bl	8003156 <vListInsertEnd>
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f383 8811 	msr	BASEPRI, r3
}
 80041a2:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80041a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3728      	adds	r7, #40	; 0x28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	2000026c 	.word	0x2000026c
 80041b4:	20000130 	.word	0x20000130
 80041b8:	2000024c 	.word	0x2000024c
 80041bc:	20000134 	.word	0x20000134
 80041c0:	20000204 	.word	0x20000204

080041c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80041ca:	4b1f      	ldr	r3, [pc, #124]	; (8004248 <vTaskStartScheduler+0x84>)
 80041cc:	9301      	str	r3, [sp, #4]
 80041ce:	2300      	movs	r3, #0
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	2300      	movs	r3, #0
 80041d4:	2280      	movs	r2, #128	; 0x80
 80041d6:	491d      	ldr	r1, [pc, #116]	; (800424c <vTaskStartScheduler+0x88>)
 80041d8:	481d      	ldr	r0, [pc, #116]	; (8004250 <vTaskStartScheduler+0x8c>)
 80041da:	f7ff fced 	bl	8003bb8 <xTaskCreate>
 80041de:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d102      	bne.n	80041ec <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80041e6:	f000 fd11 	bl	8004c0c <xTimerCreateTimerTask>
 80041ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d116      	bne.n	8004220 <vTaskStartScheduler+0x5c>
	__asm volatile
 80041f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f6:	f383 8811 	msr	BASEPRI, r3
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	f3bf 8f4f 	dsb	sy
 8004202:	60bb      	str	r3, [r7, #8]
}
 8004204:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004206:	4b13      	ldr	r3, [pc, #76]	; (8004254 <vTaskStartScheduler+0x90>)
 8004208:	f04f 32ff 	mov.w	r2, #4294967295
 800420c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800420e:	4b12      	ldr	r3, [pc, #72]	; (8004258 <vTaskStartScheduler+0x94>)
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004214:	4b11      	ldr	r3, [pc, #68]	; (800425c <vTaskStartScheduler+0x98>)
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800421a:	f001 fa81 	bl	8005720 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800421e:	e00e      	b.n	800423e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004226:	d10a      	bne.n	800423e <vTaskStartScheduler+0x7a>
	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	607b      	str	r3, [r7, #4]
}
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <vTaskStartScheduler+0x78>
}
 800423e:	bf00      	nop
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20000268 	.word	0x20000268
 800424c:	08005c10 	.word	0x08005c10
 8004250:	0800488d 	.word	0x0800488d
 8004254:	20000264 	.word	0x20000264
 8004258:	20000250 	.word	0x20000250
 800425c:	20000248 	.word	0x20000248

08004260 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004264:	4b04      	ldr	r3, [pc, #16]	; (8004278 <vTaskSuspendAll+0x18>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3301      	adds	r3, #1
 800426a:	4a03      	ldr	r2, [pc, #12]	; (8004278 <vTaskSuspendAll+0x18>)
 800426c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800426e:	bf00      	nop
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	2000026c 	.word	0x2000026c

0800427c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004286:	2300      	movs	r3, #0
 8004288:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800428a:	4b41      	ldr	r3, [pc, #260]	; (8004390 <xTaskResumeAll+0x114>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10a      	bne.n	80042a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
 80042a2:	603b      	str	r3, [r7, #0]
}
 80042a4:	bf00      	nop
 80042a6:	e7fe      	b.n	80042a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80042a8:	f001 fadc 	bl	8005864 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042ac:	4b38      	ldr	r3, [pc, #224]	; (8004390 <xTaskResumeAll+0x114>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	4a37      	ldr	r2, [pc, #220]	; (8004390 <xTaskResumeAll+0x114>)
 80042b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042b6:	4b36      	ldr	r3, [pc, #216]	; (8004390 <xTaskResumeAll+0x114>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d161      	bne.n	8004382 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042be:	4b35      	ldr	r3, [pc, #212]	; (8004394 <xTaskResumeAll+0x118>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d05d      	beq.n	8004382 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042c6:	e02e      	b.n	8004326 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042c8:	4b33      	ldr	r3, [pc, #204]	; (8004398 <xTaskResumeAll+0x11c>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	3318      	adds	r3, #24
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fe ff9b 	bl	8003210 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	3304      	adds	r3, #4
 80042de:	4618      	mov	r0, r3
 80042e0:	f7fe ff96 	bl	8003210 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	2201      	movs	r2, #1
 80042ea:	409a      	lsls	r2, r3
 80042ec:	4b2b      	ldr	r3, [pc, #172]	; (800439c <xTaskResumeAll+0x120>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	4a2a      	ldr	r2, [pc, #168]	; (800439c <xTaskResumeAll+0x120>)
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042fa:	4613      	mov	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4a27      	ldr	r2, [pc, #156]	; (80043a0 <xTaskResumeAll+0x124>)
 8004304:	441a      	add	r2, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	3304      	adds	r3, #4
 800430a:	4619      	mov	r1, r3
 800430c:	4610      	mov	r0, r2
 800430e:	f7fe ff22 	bl	8003156 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004316:	4b23      	ldr	r3, [pc, #140]	; (80043a4 <xTaskResumeAll+0x128>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431c:	429a      	cmp	r2, r3
 800431e:	d302      	bcc.n	8004326 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004320:	4b21      	ldr	r3, [pc, #132]	; (80043a8 <xTaskResumeAll+0x12c>)
 8004322:	2201      	movs	r2, #1
 8004324:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004326:	4b1c      	ldr	r3, [pc, #112]	; (8004398 <xTaskResumeAll+0x11c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1cc      	bne.n	80042c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004334:	f000 fb40 	bl	80049b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004338:	4b1c      	ldr	r3, [pc, #112]	; (80043ac <xTaskResumeAll+0x130>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d010      	beq.n	8004366 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004344:	f000 f858 	bl	80043f8 <xTaskIncrementTick>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d002      	beq.n	8004354 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800434e:	4b16      	ldr	r3, [pc, #88]	; (80043a8 <xTaskResumeAll+0x12c>)
 8004350:	2201      	movs	r2, #1
 8004352:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3b01      	subs	r3, #1
 8004358:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1f1      	bne.n	8004344 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004360:	4b12      	ldr	r3, [pc, #72]	; (80043ac <xTaskResumeAll+0x130>)
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004366:	4b10      	ldr	r3, [pc, #64]	; (80043a8 <xTaskResumeAll+0x12c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800436e:	2301      	movs	r3, #1
 8004370:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004372:	4b0f      	ldr	r3, [pc, #60]	; (80043b0 <xTaskResumeAll+0x134>)
 8004374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	f3bf 8f4f 	dsb	sy
 800437e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004382:	f001 fa9f 	bl	80058c4 <vPortExitCritical>

	return xAlreadyYielded;
 8004386:	68bb      	ldr	r3, [r7, #8]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	2000026c 	.word	0x2000026c
 8004394:	20000244 	.word	0x20000244
 8004398:	20000204 	.word	0x20000204
 800439c:	2000024c 	.word	0x2000024c
 80043a0:	20000134 	.word	0x20000134
 80043a4:	20000130 	.word	0x20000130
 80043a8:	20000258 	.word	0x20000258
 80043ac:	20000254 	.word	0x20000254
 80043b0:	e000ed04 	.word	0xe000ed04

080043b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80043ba:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <xTaskGetTickCount+0x1c>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80043c0:	687b      	ldr	r3, [r7, #4]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	20000248 	.word	0x20000248

080043d4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043da:	f001 fb25 	bl	8005a28 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80043de:	2300      	movs	r3, #0
 80043e0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80043e2:	4b04      	ldr	r3, [pc, #16]	; (80043f4 <xTaskGetTickCountFromISR+0x20>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80043e8:	683b      	ldr	r3, [r7, #0]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	20000248 	.word	0x20000248

080043f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004402:	4b4e      	ldr	r3, [pc, #312]	; (800453c <xTaskIncrementTick+0x144>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	f040 808e 	bne.w	8004528 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800440c:	4b4c      	ldr	r3, [pc, #304]	; (8004540 <xTaskIncrementTick+0x148>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	3301      	adds	r3, #1
 8004412:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004414:	4a4a      	ldr	r2, [pc, #296]	; (8004540 <xTaskIncrementTick+0x148>)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d120      	bne.n	8004462 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004420:	4b48      	ldr	r3, [pc, #288]	; (8004544 <xTaskIncrementTick+0x14c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <xTaskIncrementTick+0x48>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	603b      	str	r3, [r7, #0]
}
 800443c:	bf00      	nop
 800443e:	e7fe      	b.n	800443e <xTaskIncrementTick+0x46>
 8004440:	4b40      	ldr	r3, [pc, #256]	; (8004544 <xTaskIncrementTick+0x14c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	4b40      	ldr	r3, [pc, #256]	; (8004548 <xTaskIncrementTick+0x150>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a3e      	ldr	r2, [pc, #248]	; (8004544 <xTaskIncrementTick+0x14c>)
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	4a3e      	ldr	r2, [pc, #248]	; (8004548 <xTaskIncrementTick+0x150>)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	4b3d      	ldr	r3, [pc, #244]	; (800454c <xTaskIncrementTick+0x154>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3301      	adds	r3, #1
 800445a:	4a3c      	ldr	r2, [pc, #240]	; (800454c <xTaskIncrementTick+0x154>)
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	f000 faab 	bl	80049b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004462:	4b3b      	ldr	r3, [pc, #236]	; (8004550 <xTaskIncrementTick+0x158>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	429a      	cmp	r2, r3
 800446a:	d348      	bcc.n	80044fe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800446c:	4b35      	ldr	r3, [pc, #212]	; (8004544 <xTaskIncrementTick+0x14c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d104      	bne.n	8004480 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004476:	4b36      	ldr	r3, [pc, #216]	; (8004550 <xTaskIncrementTick+0x158>)
 8004478:	f04f 32ff 	mov.w	r2, #4294967295
 800447c:	601a      	str	r2, [r3, #0]
					break;
 800447e:	e03e      	b.n	80044fe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004480:	4b30      	ldr	r3, [pc, #192]	; (8004544 <xTaskIncrementTick+0x14c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	429a      	cmp	r2, r3
 8004496:	d203      	bcs.n	80044a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004498:	4a2d      	ldr	r2, [pc, #180]	; (8004550 <xTaskIncrementTick+0x158>)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800449e:	e02e      	b.n	80044fe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	3304      	adds	r3, #4
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fe feb3 	bl	8003210 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d004      	beq.n	80044bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	3318      	adds	r3, #24
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe feaa 	bl	8003210 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	2201      	movs	r2, #1
 80044c2:	409a      	lsls	r2, r3
 80044c4:	4b23      	ldr	r3, [pc, #140]	; (8004554 <xTaskIncrementTick+0x15c>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	4a22      	ldr	r2, [pc, #136]	; (8004554 <xTaskIncrementTick+0x15c>)
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d2:	4613      	mov	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4a1f      	ldr	r2, [pc, #124]	; (8004558 <xTaskIncrementTick+0x160>)
 80044dc:	441a      	add	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	3304      	adds	r3, #4
 80044e2:	4619      	mov	r1, r3
 80044e4:	4610      	mov	r0, r2
 80044e6:	f7fe fe36 	bl	8003156 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ee:	4b1b      	ldr	r3, [pc, #108]	; (800455c <xTaskIncrementTick+0x164>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d3b9      	bcc.n	800446c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80044f8:	2301      	movs	r3, #1
 80044fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044fc:	e7b6      	b.n	800446c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044fe:	4b17      	ldr	r3, [pc, #92]	; (800455c <xTaskIncrementTick+0x164>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004504:	4914      	ldr	r1, [pc, #80]	; (8004558 <xTaskIncrementTick+0x160>)
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	440b      	add	r3, r1
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d901      	bls.n	800451a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004516:	2301      	movs	r3, #1
 8004518:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800451a:	4b11      	ldr	r3, [pc, #68]	; (8004560 <xTaskIncrementTick+0x168>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d007      	beq.n	8004532 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004522:	2301      	movs	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	e004      	b.n	8004532 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004528:	4b0e      	ldr	r3, [pc, #56]	; (8004564 <xTaskIncrementTick+0x16c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	4a0d      	ldr	r2, [pc, #52]	; (8004564 <xTaskIncrementTick+0x16c>)
 8004530:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004532:	697b      	ldr	r3, [r7, #20]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	2000026c 	.word	0x2000026c
 8004540:	20000248 	.word	0x20000248
 8004544:	200001fc 	.word	0x200001fc
 8004548:	20000200 	.word	0x20000200
 800454c:	2000025c 	.word	0x2000025c
 8004550:	20000264 	.word	0x20000264
 8004554:	2000024c 	.word	0x2000024c
 8004558:	20000134 	.word	0x20000134
 800455c:	20000130 	.word	0x20000130
 8004560:	20000258 	.word	0x20000258
 8004564:	20000254 	.word	0x20000254

08004568 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800456e:	4b27      	ldr	r3, [pc, #156]	; (800460c <vTaskSwitchContext+0xa4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004576:	4b26      	ldr	r3, [pc, #152]	; (8004610 <vTaskSwitchContext+0xa8>)
 8004578:	2201      	movs	r2, #1
 800457a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800457c:	e03f      	b.n	80045fe <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800457e:	4b24      	ldr	r3, [pc, #144]	; (8004610 <vTaskSwitchContext+0xa8>)
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004584:	4b23      	ldr	r3, [pc, #140]	; (8004614 <vTaskSwitchContext+0xac>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	fab3 f383 	clz	r3, r3
 8004590:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004592:	7afb      	ldrb	r3, [r7, #11]
 8004594:	f1c3 031f 	rsb	r3, r3, #31
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	491f      	ldr	r1, [pc, #124]	; (8004618 <vTaskSwitchContext+0xb0>)
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10a      	bne.n	80045c4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	607b      	str	r3, [r7, #4]
}
 80045c0:	bf00      	nop
 80045c2:	e7fe      	b.n	80045c2 <vTaskSwitchContext+0x5a>
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4a12      	ldr	r2, [pc, #72]	; (8004618 <vTaskSwitchContext+0xb0>)
 80045d0:	4413      	add	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	605a      	str	r2, [r3, #4]
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	3308      	adds	r3, #8
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d104      	bne.n	80045f4 <vTaskSwitchContext+0x8c>
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	605a      	str	r2, [r3, #4]
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	4a08      	ldr	r2, [pc, #32]	; (800461c <vTaskSwitchContext+0xb4>)
 80045fc:	6013      	str	r3, [r2, #0]
}
 80045fe:	bf00      	nop
 8004600:	371c      	adds	r7, #28
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	2000026c 	.word	0x2000026c
 8004610:	20000258 	.word	0x20000258
 8004614:	2000024c 	.word	0x2000024c
 8004618:	20000134 	.word	0x20000134
 800461c:	20000130 	.word	0x20000130

08004620 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10a      	bne.n	8004646 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	60fb      	str	r3, [r7, #12]
}
 8004642:	bf00      	nop
 8004644:	e7fe      	b.n	8004644 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004646:	4b07      	ldr	r3, [pc, #28]	; (8004664 <vTaskPlaceOnEventList+0x44>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3318      	adds	r3, #24
 800464c:	4619      	mov	r1, r3
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fe fda5 	bl	800319e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004654:	2101      	movs	r1, #1
 8004656:	6838      	ldr	r0, [r7, #0]
 8004658:	f000 fa72 	bl	8004b40 <prvAddCurrentTaskToDelayedList>
}
 800465c:	bf00      	nop
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	20000130 	.word	0x20000130

08004668 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10a      	bne.n	8004690 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800467a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467e:	f383 8811 	msr	BASEPRI, r3
 8004682:	f3bf 8f6f 	isb	sy
 8004686:	f3bf 8f4f 	dsb	sy
 800468a:	617b      	str	r3, [r7, #20]
}
 800468c:	bf00      	nop
 800468e:	e7fe      	b.n	800468e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004690:	4b0a      	ldr	r3, [pc, #40]	; (80046bc <vTaskPlaceOnEventListRestricted+0x54>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	3318      	adds	r3, #24
 8004696:	4619      	mov	r1, r3
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f7fe fd5c 	bl	8003156 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80046a4:	f04f 33ff 	mov.w	r3, #4294967295
 80046a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	68b8      	ldr	r0, [r7, #8]
 80046ae:	f000 fa47 	bl	8004b40 <prvAddCurrentTaskToDelayedList>
	}
 80046b2:	bf00      	nop
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20000130 	.word	0x20000130

080046c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80046d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	60fb      	str	r3, [r7, #12]
}
 80046e8:	bf00      	nop
 80046ea:	e7fe      	b.n	80046ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	3318      	adds	r3, #24
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fe fd8d 	bl	8003210 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046f6:	4b1d      	ldr	r3, [pc, #116]	; (800476c <xTaskRemoveFromEventList+0xac>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d11c      	bne.n	8004738 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	3304      	adds	r3, #4
 8004702:	4618      	mov	r0, r3
 8004704:	f7fe fd84 	bl	8003210 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	2201      	movs	r2, #1
 800470e:	409a      	lsls	r2, r3
 8004710:	4b17      	ldr	r3, [pc, #92]	; (8004770 <xTaskRemoveFromEventList+0xb0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4313      	orrs	r3, r2
 8004716:	4a16      	ldr	r2, [pc, #88]	; (8004770 <xTaskRemoveFromEventList+0xb0>)
 8004718:	6013      	str	r3, [r2, #0]
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471e:	4613      	mov	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4a13      	ldr	r2, [pc, #76]	; (8004774 <xTaskRemoveFromEventList+0xb4>)
 8004728:	441a      	add	r2, r3
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	3304      	adds	r3, #4
 800472e:	4619      	mov	r1, r3
 8004730:	4610      	mov	r0, r2
 8004732:	f7fe fd10 	bl	8003156 <vListInsertEnd>
 8004736:	e005      	b.n	8004744 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	3318      	adds	r3, #24
 800473c:	4619      	mov	r1, r3
 800473e:	480e      	ldr	r0, [pc, #56]	; (8004778 <xTaskRemoveFromEventList+0xb8>)
 8004740:	f7fe fd09 	bl	8003156 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004748:	4b0c      	ldr	r3, [pc, #48]	; (800477c <xTaskRemoveFromEventList+0xbc>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474e:	429a      	cmp	r2, r3
 8004750:	d905      	bls.n	800475e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004752:	2301      	movs	r3, #1
 8004754:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004756:	4b0a      	ldr	r3, [pc, #40]	; (8004780 <xTaskRemoveFromEventList+0xc0>)
 8004758:	2201      	movs	r2, #1
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	e001      	b.n	8004762 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800475e:	2300      	movs	r3, #0
 8004760:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004762:	697b      	ldr	r3, [r7, #20]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	2000026c 	.word	0x2000026c
 8004770:	2000024c 	.word	0x2000024c
 8004774:	20000134 	.word	0x20000134
 8004778:	20000204 	.word	0x20000204
 800477c:	20000130 	.word	0x20000130
 8004780:	20000258 	.word	0x20000258

08004784 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800478c:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <vTaskInternalSetTimeOutState+0x24>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <vTaskInternalSetTimeOutState+0x28>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	605a      	str	r2, [r3, #4]
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	2000025c 	.word	0x2000025c
 80047ac:	20000248 	.word	0x20000248

080047b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10a      	bne.n	80047d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80047c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	613b      	str	r3, [r7, #16]
}
 80047d2:	bf00      	nop
 80047d4:	e7fe      	b.n	80047d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10a      	bne.n	80047f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	60fb      	str	r3, [r7, #12]
}
 80047ee:	bf00      	nop
 80047f0:	e7fe      	b.n	80047f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80047f2:	f001 f837 	bl	8005864 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80047f6:	4b1d      	ldr	r3, [pc, #116]	; (800486c <xTaskCheckForTimeOut+0xbc>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480e:	d102      	bne.n	8004816 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004810:	2300      	movs	r3, #0
 8004812:	61fb      	str	r3, [r7, #28]
 8004814:	e023      	b.n	800485e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	4b15      	ldr	r3, [pc, #84]	; (8004870 <xTaskCheckForTimeOut+0xc0>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d007      	beq.n	8004832 <xTaskCheckForTimeOut+0x82>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	69ba      	ldr	r2, [r7, #24]
 8004828:	429a      	cmp	r2, r3
 800482a:	d302      	bcc.n	8004832 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800482c:	2301      	movs	r3, #1
 800482e:	61fb      	str	r3, [r7, #28]
 8004830:	e015      	b.n	800485e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	429a      	cmp	r2, r3
 800483a:	d20b      	bcs.n	8004854 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	1ad2      	subs	r2, r2, r3
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7ff ff9b 	bl	8004784 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800484e:	2300      	movs	r3, #0
 8004850:	61fb      	str	r3, [r7, #28]
 8004852:	e004      	b.n	800485e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800485a:	2301      	movs	r3, #1
 800485c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800485e:	f001 f831 	bl	80058c4 <vPortExitCritical>

	return xReturn;
 8004862:	69fb      	ldr	r3, [r7, #28]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3720      	adds	r7, #32
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	20000248 	.word	0x20000248
 8004870:	2000025c 	.word	0x2000025c

08004874 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004878:	4b03      	ldr	r3, [pc, #12]	; (8004888 <vTaskMissedYield+0x14>)
 800487a:	2201      	movs	r2, #1
 800487c:	601a      	str	r2, [r3, #0]
}
 800487e:	bf00      	nop
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr
 8004888:	20000258 	.word	0x20000258

0800488c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004894:	f000 f852 	bl	800493c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004898:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <prvIdleTask+0x28>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d9f9      	bls.n	8004894 <prvIdleTask+0x8>
			{
				taskYIELD();
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <prvIdleTask+0x2c>)
 80048a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048b0:	e7f0      	b.n	8004894 <prvIdleTask+0x8>
 80048b2:	bf00      	nop
 80048b4:	20000134 	.word	0x20000134
 80048b8:	e000ed04 	.word	0xe000ed04

080048bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048c2:	2300      	movs	r3, #0
 80048c4:	607b      	str	r3, [r7, #4]
 80048c6:	e00c      	b.n	80048e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4a12      	ldr	r2, [pc, #72]	; (800491c <prvInitialiseTaskLists+0x60>)
 80048d4:	4413      	add	r3, r2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fe fc10 	bl	80030fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3301      	adds	r3, #1
 80048e0:	607b      	str	r3, [r7, #4]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b07      	cmp	r3, #7
 80048e6:	d9ef      	bls.n	80048c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80048e8:	480d      	ldr	r0, [pc, #52]	; (8004920 <prvInitialiseTaskLists+0x64>)
 80048ea:	f7fe fc07 	bl	80030fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80048ee:	480d      	ldr	r0, [pc, #52]	; (8004924 <prvInitialiseTaskLists+0x68>)
 80048f0:	f7fe fc04 	bl	80030fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80048f4:	480c      	ldr	r0, [pc, #48]	; (8004928 <prvInitialiseTaskLists+0x6c>)
 80048f6:	f7fe fc01 	bl	80030fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80048fa:	480c      	ldr	r0, [pc, #48]	; (800492c <prvInitialiseTaskLists+0x70>)
 80048fc:	f7fe fbfe 	bl	80030fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004900:	480b      	ldr	r0, [pc, #44]	; (8004930 <prvInitialiseTaskLists+0x74>)
 8004902:	f7fe fbfb 	bl	80030fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004906:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <prvInitialiseTaskLists+0x78>)
 8004908:	4a05      	ldr	r2, [pc, #20]	; (8004920 <prvInitialiseTaskLists+0x64>)
 800490a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800490c:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <prvInitialiseTaskLists+0x7c>)
 800490e:	4a05      	ldr	r2, [pc, #20]	; (8004924 <prvInitialiseTaskLists+0x68>)
 8004910:	601a      	str	r2, [r3, #0]
}
 8004912:	bf00      	nop
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000134 	.word	0x20000134
 8004920:	200001d4 	.word	0x200001d4
 8004924:	200001e8 	.word	0x200001e8
 8004928:	20000204 	.word	0x20000204
 800492c:	20000218 	.word	0x20000218
 8004930:	20000230 	.word	0x20000230
 8004934:	200001fc 	.word	0x200001fc
 8004938:	20000200 	.word	0x20000200

0800493c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004942:	e019      	b.n	8004978 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004944:	f000 ff8e 	bl	8005864 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004948:	4b10      	ldr	r3, [pc, #64]	; (800498c <prvCheckTasksWaitingTermination+0x50>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3304      	adds	r3, #4
 8004954:	4618      	mov	r0, r3
 8004956:	f7fe fc5b 	bl	8003210 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800495a:	4b0d      	ldr	r3, [pc, #52]	; (8004990 <prvCheckTasksWaitingTermination+0x54>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3b01      	subs	r3, #1
 8004960:	4a0b      	ldr	r2, [pc, #44]	; (8004990 <prvCheckTasksWaitingTermination+0x54>)
 8004962:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004964:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <prvCheckTasksWaitingTermination+0x58>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3b01      	subs	r3, #1
 800496a:	4a0a      	ldr	r2, [pc, #40]	; (8004994 <prvCheckTasksWaitingTermination+0x58>)
 800496c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800496e:	f000 ffa9 	bl	80058c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f810 	bl	8004998 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004978:	4b06      	ldr	r3, [pc, #24]	; (8004994 <prvCheckTasksWaitingTermination+0x58>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e1      	bne.n	8004944 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004980:	bf00      	nop
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000218 	.word	0x20000218
 8004990:	20000244 	.word	0x20000244
 8004994:	2000022c 	.word	0x2000022c

08004998 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 fd0f 	bl	80053c8 <vPortFree>
			vPortFree( pxTCB );
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fd0c 	bl	80053c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049b0:	bf00      	nop
 80049b2:	3708      	adds	r7, #8
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049be:	4b0c      	ldr	r3, [pc, #48]	; (80049f0 <prvResetNextTaskUnblockTime+0x38>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d104      	bne.n	80049d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80049c8:	4b0a      	ldr	r3, [pc, #40]	; (80049f4 <prvResetNextTaskUnblockTime+0x3c>)
 80049ca:	f04f 32ff 	mov.w	r2, #4294967295
 80049ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80049d0:	e008      	b.n	80049e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049d2:	4b07      	ldr	r3, [pc, #28]	; (80049f0 <prvResetNextTaskUnblockTime+0x38>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	4a04      	ldr	r2, [pc, #16]	; (80049f4 <prvResetNextTaskUnblockTime+0x3c>)
 80049e2:	6013      	str	r3, [r2, #0]
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	200001fc 	.word	0x200001fc
 80049f4:	20000264 	.word	0x20000264

080049f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80049fe:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <xTaskGetSchedulerState+0x34>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d102      	bne.n	8004a0c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a06:	2301      	movs	r3, #1
 8004a08:	607b      	str	r3, [r7, #4]
 8004a0a:	e008      	b.n	8004a1e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a0c:	4b08      	ldr	r3, [pc, #32]	; (8004a30 <xTaskGetSchedulerState+0x38>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d102      	bne.n	8004a1a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004a14:	2302      	movs	r3, #2
 8004a16:	607b      	str	r3, [r7, #4]
 8004a18:	e001      	b.n	8004a1e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004a1e:	687b      	ldr	r3, [r7, #4]
	}
 8004a20:	4618      	mov	r0, r3
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	20000250 	.word	0x20000250
 8004a30:	2000026c 	.word	0x2000026c

08004a34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b086      	sub	sp, #24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004a40:	2300      	movs	r3, #0
 8004a42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d06e      	beq.n	8004b28 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004a4a:	4b3a      	ldr	r3, [pc, #232]	; (8004b34 <xTaskPriorityDisinherit+0x100>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d00a      	beq.n	8004a6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	60fb      	str	r3, [r7, #12]
}
 8004a66:	bf00      	nop
 8004a68:	e7fe      	b.n	8004a68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10a      	bne.n	8004a88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a76:	f383 8811 	msr	BASEPRI, r3
 8004a7a:	f3bf 8f6f 	isb	sy
 8004a7e:	f3bf 8f4f 	dsb	sy
 8004a82:	60bb      	str	r3, [r7, #8]
}
 8004a84:	bf00      	nop
 8004a86:	e7fe      	b.n	8004a86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8c:	1e5a      	subs	r2, r3, #1
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d044      	beq.n	8004b28 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d140      	bne.n	8004b28 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	3304      	adds	r3, #4
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fe fbb0 	bl	8003210 <uxListRemove>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d115      	bne.n	8004ae2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aba:	491f      	ldr	r1, [pc, #124]	; (8004b38 <xTaskPriorityDisinherit+0x104>)
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10a      	bne.n	8004ae2 <xTaskPriorityDisinherit+0xae>
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	43da      	mvns	r2, r3
 8004ad8:	4b18      	ldr	r3, [pc, #96]	; (8004b3c <xTaskPriorityDisinherit+0x108>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4013      	ands	r3, r2
 8004ade:	4a17      	ldr	r2, [pc, #92]	; (8004b3c <xTaskPriorityDisinherit+0x108>)
 8004ae0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aee:	f1c3 0208 	rsb	r2, r3, #8
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	2201      	movs	r2, #1
 8004afc:	409a      	lsls	r2, r3
 8004afe:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <xTaskPriorityDisinherit+0x108>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	4a0d      	ldr	r2, [pc, #52]	; (8004b3c <xTaskPriorityDisinherit+0x108>)
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	4413      	add	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4a08      	ldr	r2, [pc, #32]	; (8004b38 <xTaskPriorityDisinherit+0x104>)
 8004b16:	441a      	add	r2, r3
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	f7fe fb19 	bl	8003156 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004b24:	2301      	movs	r3, #1
 8004b26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004b28:	697b      	ldr	r3, [r7, #20]
	}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000130 	.word	0x20000130
 8004b38:	20000134 	.word	0x20000134
 8004b3c:	2000024c 	.word	0x2000024c

08004b40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b4a:	4b29      	ldr	r3, [pc, #164]	; (8004bf0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b50:	4b28      	ldr	r3, [pc, #160]	; (8004bf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3304      	adds	r3, #4
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fe fb5a 	bl	8003210 <uxListRemove>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10b      	bne.n	8004b7a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004b62:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b68:	2201      	movs	r2, #1
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	43da      	mvns	r2, r3
 8004b70:	4b21      	ldr	r3, [pc, #132]	; (8004bf8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4013      	ands	r3, r2
 8004b76:	4a20      	ldr	r2, [pc, #128]	; (8004bf8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004b78:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b80:	d10a      	bne.n	8004b98 <prvAddCurrentTaskToDelayedList+0x58>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d007      	beq.n	8004b98 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b88:	4b1a      	ldr	r3, [pc, #104]	; (8004bf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	4619      	mov	r1, r3
 8004b90:	481a      	ldr	r0, [pc, #104]	; (8004bfc <prvAddCurrentTaskToDelayedList+0xbc>)
 8004b92:	f7fe fae0 	bl	8003156 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b96:	e026      	b.n	8004be6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ba0:	4b14      	ldr	r3, [pc, #80]	; (8004bf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d209      	bcs.n	8004bc4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bb0:	4b13      	ldr	r3, [pc, #76]	; (8004c00 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	4b0f      	ldr	r3, [pc, #60]	; (8004bf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3304      	adds	r3, #4
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	f7fe faee 	bl	800319e <vListInsert>
}
 8004bc2:	e010      	b.n	8004be6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bc4:	4b0f      	ldr	r3, [pc, #60]	; (8004c04 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3304      	adds	r3, #4
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4610      	mov	r0, r2
 8004bd2:	f7fe fae4 	bl	800319e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004bd6:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d202      	bcs.n	8004be6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004be0:	4a09      	ldr	r2, [pc, #36]	; (8004c08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	6013      	str	r3, [r2, #0]
}
 8004be6:	bf00      	nop
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	20000248 	.word	0x20000248
 8004bf4:	20000130 	.word	0x20000130
 8004bf8:	2000024c 	.word	0x2000024c
 8004bfc:	20000230 	.word	0x20000230
 8004c00:	20000200 	.word	0x20000200
 8004c04:	200001fc 	.word	0x200001fc
 8004c08:	20000264 	.word	0x20000264

08004c0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c16:	f000 fad5 	bl	80051c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c1a:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <xTimerCreateTimerTask+0x54>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00b      	beq.n	8004c3a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8004c22:	4b10      	ldr	r3, [pc, #64]	; (8004c64 <xTimerCreateTimerTask+0x58>)
 8004c24:	9301      	str	r3, [sp, #4]
 8004c26:	2302      	movs	r3, #2
 8004c28:	9300      	str	r3, [sp, #0]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c30:	490d      	ldr	r1, [pc, #52]	; (8004c68 <xTimerCreateTimerTask+0x5c>)
 8004c32:	480e      	ldr	r0, [pc, #56]	; (8004c6c <xTimerCreateTimerTask+0x60>)
 8004c34:	f7fe ffc0 	bl	8003bb8 <xTaskCreate>
 8004c38:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	603b      	str	r3, [r7, #0]
}
 8004c52:	bf00      	nop
 8004c54:	e7fe      	b.n	8004c54 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8004c56:	687b      	ldr	r3, [r7, #4]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	200002a0 	.word	0x200002a0
 8004c64:	200002a4 	.word	0x200002a4
 8004c68:	08005c18 	.word	0x08005c18
 8004c6c:	08004da5 	.word	0x08004da5

08004c70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08a      	sub	sp, #40	; 0x28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10a      	bne.n	8004c9e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	623b      	str	r3, [r7, #32]
}
 8004c9a:	bf00      	nop
 8004c9c:	e7fe      	b.n	8004c9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004c9e:	4b1a      	ldr	r3, [pc, #104]	; (8004d08 <xTimerGenericCommand+0x98>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d02a      	beq.n	8004cfc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b05      	cmp	r3, #5
 8004cb6:	dc18      	bgt.n	8004cea <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004cb8:	f7ff fe9e 	bl	80049f8 <xTaskGetSchedulerState>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d109      	bne.n	8004cd6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004cc2:	4b11      	ldr	r3, [pc, #68]	; (8004d08 <xTimerGenericCommand+0x98>)
 8004cc4:	6818      	ldr	r0, [r3, #0]
 8004cc6:	f107 0114 	add.w	r1, r7, #20
 8004cca:	2300      	movs	r3, #0
 8004ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cce:	f7fe fb8b 	bl	80033e8 <xQueueGenericSend>
 8004cd2:	6278      	str	r0, [r7, #36]	; 0x24
 8004cd4:	e012      	b.n	8004cfc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004cd6:	4b0c      	ldr	r3, [pc, #48]	; (8004d08 <xTimerGenericCommand+0x98>)
 8004cd8:	6818      	ldr	r0, [r3, #0]
 8004cda:	f107 0114 	add.w	r1, r7, #20
 8004cde:	2300      	movs	r3, #0
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f7fe fb81 	bl	80033e8 <xQueueGenericSend>
 8004ce6:	6278      	str	r0, [r7, #36]	; 0x24
 8004ce8:	e008      	b.n	8004cfc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004cea:	4b07      	ldr	r3, [pc, #28]	; (8004d08 <xTimerGenericCommand+0x98>)
 8004cec:	6818      	ldr	r0, [r3, #0]
 8004cee:	f107 0114 	add.w	r1, r7, #20
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	f7fe fc75 	bl	80035e4 <xQueueGenericSendFromISR>
 8004cfa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3728      	adds	r7, #40	; 0x28
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	200002a0 	.word	0x200002a0

08004d0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b088      	sub	sp, #32
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d16:	4b22      	ldr	r3, [pc, #136]	; (8004da0 <prvProcessExpiredTimer+0x94>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	3304      	adds	r3, #4
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fe fa73 	bl	8003210 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d022      	beq.n	8004d7e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	699a      	ldr	r2, [r3, #24]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	18d1      	adds	r1, r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	6978      	ldr	r0, [r7, #20]
 8004d46:	f000 f8d1 	bl	8004eec <prvInsertTimerInActiveList>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d01f      	beq.n	8004d90 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d50:	2300      	movs	r3, #0
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	2300      	movs	r3, #0
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	2100      	movs	r1, #0
 8004d5a:	6978      	ldr	r0, [r7, #20]
 8004d5c:	f7ff ff88 	bl	8004c70 <xTimerGenericCommand>
 8004d60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d113      	bne.n	8004d90 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	60fb      	str	r3, [r7, #12]
}
 8004d7a:	bf00      	nop
 8004d7c:	e7fe      	b.n	8004d7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d84:	f023 0301 	bic.w	r3, r3, #1
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	6978      	ldr	r0, [r7, #20]
 8004d96:	4798      	blx	r3
}
 8004d98:	bf00      	nop
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20000298 	.word	0x20000298

08004da4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dac:	f107 0308 	add.w	r3, r7, #8
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 f857 	bl	8004e64 <prvGetNextExpireTime>
 8004db6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4619      	mov	r1, r3
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f000 f803 	bl	8004dc8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004dc2:	f000 f8d5 	bl	8004f70 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004dc6:	e7f1      	b.n	8004dac <prvTimerTask+0x8>

08004dc8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004dd2:	f7ff fa45 	bl	8004260 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dd6:	f107 0308 	add.w	r3, r7, #8
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 f866 	bl	8004eac <prvSampleTimeNow>
 8004de0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d130      	bne.n	8004e4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10a      	bne.n	8004e04 <prvProcessTimerOrBlockTask+0x3c>
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d806      	bhi.n	8004e04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004df6:	f7ff fa41 	bl	800427c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004dfa:	68f9      	ldr	r1, [r7, #12]
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff ff85 	bl	8004d0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004e02:	e024      	b.n	8004e4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d008      	beq.n	8004e1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004e0a:	4b13      	ldr	r3, [pc, #76]	; (8004e58 <prvProcessTimerOrBlockTask+0x90>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <prvProcessTimerOrBlockTask+0x50>
 8004e14:	2301      	movs	r3, #1
 8004e16:	e000      	b.n	8004e1a <prvProcessTimerOrBlockTask+0x52>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004e1c:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <prvProcessTimerOrBlockTask+0x94>)
 8004e1e:	6818      	ldr	r0, [r3, #0]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	4619      	mov	r1, r3
 8004e2a:	f7fe fe91 	bl	8003b50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004e2e:	f7ff fa25 	bl	800427c <xTaskResumeAll>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10a      	bne.n	8004e4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004e38:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <prvProcessTimerOrBlockTask+0x98>)
 8004e3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	f3bf 8f6f 	isb	sy
}
 8004e48:	e001      	b.n	8004e4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004e4a:	f7ff fa17 	bl	800427c <xTaskResumeAll>
}
 8004e4e:	bf00      	nop
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	2000029c 	.word	0x2000029c
 8004e5c:	200002a0 	.word	0x200002a0
 8004e60:	e000ed04 	.word	0xe000ed04

08004e64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004e6c:	4b0e      	ldr	r3, [pc, #56]	; (8004ea8 <prvGetNextExpireTime+0x44>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <prvGetNextExpireTime+0x16>
 8004e76:	2201      	movs	r2, #1
 8004e78:	e000      	b.n	8004e7c <prvGetNextExpireTime+0x18>
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d105      	bne.n	8004e94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e88:	4b07      	ldr	r3, [pc, #28]	; (8004ea8 <prvGetNextExpireTime+0x44>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	e001      	b.n	8004e98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004e98:	68fb      	ldr	r3, [r7, #12]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	20000298 	.word	0x20000298

08004eac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004eb4:	f7ff fa7e 	bl	80043b4 <xTaskGetTickCount>
 8004eb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004eba:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <prvSampleTimeNow+0x3c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d205      	bcs.n	8004ed0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004ec4:	f000 f91a 	bl	80050fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]
 8004ece:	e002      	b.n	8004ed6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ed6:	4a04      	ldr	r2, [pc, #16]	; (8004ee8 <prvSampleTimeNow+0x3c>)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004edc:	68fb      	ldr	r3, [r7, #12]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	200002a8 	.word	0x200002a8

08004eec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d812      	bhi.n	8004f38 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	1ad2      	subs	r2, r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d302      	bcc.n	8004f26 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004f20:	2301      	movs	r3, #1
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	e01b      	b.n	8004f5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004f26:	4b10      	ldr	r3, [pc, #64]	; (8004f68 <prvInsertTimerInActiveList+0x7c>)
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	4619      	mov	r1, r3
 8004f30:	4610      	mov	r0, r2
 8004f32:	f7fe f934 	bl	800319e <vListInsert>
 8004f36:	e012      	b.n	8004f5e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d206      	bcs.n	8004f4e <prvInsertTimerInActiveList+0x62>
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d302      	bcc.n	8004f4e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	e007      	b.n	8004f5e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f4e:	4b07      	ldr	r3, [pc, #28]	; (8004f6c <prvInsertTimerInActiveList+0x80>)
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3304      	adds	r3, #4
 8004f56:	4619      	mov	r1, r3
 8004f58:	4610      	mov	r0, r2
 8004f5a:	f7fe f920 	bl	800319e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004f5e:	697b      	ldr	r3, [r7, #20]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	2000029c 	.word	0x2000029c
 8004f6c:	20000298 	.word	0x20000298

08004f70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08c      	sub	sp, #48	; 0x30
 8004f74:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f76:	e0ae      	b.n	80050d6 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f2c0 80ab 	blt.w	80050d6 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d004      	beq.n	8004f96 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	3304      	adds	r3, #4
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7fe f93d 	bl	8003210 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f96:	1d3b      	adds	r3, r7, #4
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7ff ff87 	bl	8004eac <prvSampleTimeNow>
 8004f9e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b09      	cmp	r3, #9
 8004fa4:	f200 8096 	bhi.w	80050d4 <prvProcessReceivedCommands+0x164>
 8004fa8:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <prvProcessReceivedCommands+0x40>)
 8004faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fae:	bf00      	nop
 8004fb0:	08004fd9 	.word	0x08004fd9
 8004fb4:	08004fd9 	.word	0x08004fd9
 8004fb8:	08004fd9 	.word	0x08004fd9
 8004fbc:	0800504d 	.word	0x0800504d
 8004fc0:	08005061 	.word	0x08005061
 8004fc4:	080050ab 	.word	0x080050ab
 8004fc8:	08004fd9 	.word	0x08004fd9
 8004fcc:	08004fd9 	.word	0x08004fd9
 8004fd0:	0800504d 	.word	0x0800504d
 8004fd4:	08005061 	.word	0x08005061
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fde:	f043 0301 	orr.w	r3, r3, #1
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	18d1      	adds	r1, r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6a3a      	ldr	r2, [r7, #32]
 8004ff6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ff8:	f7ff ff78 	bl	8004eec <prvInsertTimerInActiveList>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d069      	beq.n	80050d6 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005008:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b00      	cmp	r3, #0
 8005016:	d05e      	beq.n	80050d6 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	441a      	add	r2, r3
 8005020:	2300      	movs	r3, #0
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	2300      	movs	r3, #0
 8005026:	2100      	movs	r1, #0
 8005028:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800502a:	f7ff fe21 	bl	8004c70 <xTimerGenericCommand>
 800502e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d14f      	bne.n	80050d6 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	61bb      	str	r3, [r7, #24]
}
 8005048:	bf00      	nop
 800504a:	e7fe      	b.n	800504a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005052:	f023 0301 	bic.w	r3, r3, #1
 8005056:	b2da      	uxtb	r2, r3
 8005058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800505e:	e03a      	b.n	80050d6 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	b2da      	uxtb	r2, r3
 800506c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005076:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10a      	bne.n	8005096 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	617b      	str	r3, [r7, #20]
}
 8005092:	bf00      	nop
 8005094:	e7fe      	b.n	8005094 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	18d1      	adds	r1, r2, r3
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	6a3a      	ldr	r2, [r7, #32]
 80050a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050a4:	f7ff ff22 	bl	8004eec <prvInsertTimerInActiveList>
					break;
 80050a8:	e015      	b.n	80050d6 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d103      	bne.n	80050c0 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80050b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80050ba:	f000 f985 	bl	80053c8 <vPortFree>
 80050be:	e00a      	b.n	80050d6 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050c6:	f023 0301 	bic.w	r3, r3, #1
 80050ca:	b2da      	uxtb	r2, r3
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80050d2:	e000      	b.n	80050d6 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 80050d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050d6:	4b08      	ldr	r3, [pc, #32]	; (80050f8 <prvProcessReceivedCommands+0x188>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f107 0108 	add.w	r1, r7, #8
 80050de:	2200      	movs	r2, #0
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7fe fb1b 	bl	800371c <xQueueReceive>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f47f af45 	bne.w	8004f78 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80050ee:	bf00      	nop
 80050f0:	bf00      	nop
 80050f2:	3728      	adds	r7, #40	; 0x28
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	200002a0 	.word	0x200002a0

080050fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005102:	e048      	b.n	8005196 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005104:	4b2d      	ldr	r3, [pc, #180]	; (80051bc <prvSwitchTimerLists+0xc0>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800510e:	4b2b      	ldr	r3, [pc, #172]	; (80051bc <prvSwitchTimerLists+0xc0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	3304      	adds	r3, #4
 800511c:	4618      	mov	r0, r3
 800511e:	f7fe f877 	bl	8003210 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	d02e      	beq.n	8005196 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	4413      	add	r3, r2
 8005140:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	429a      	cmp	r2, r3
 8005148:	d90e      	bls.n	8005168 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005156:	4b19      	ldr	r3, [pc, #100]	; (80051bc <prvSwitchTimerLists+0xc0>)
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	3304      	adds	r3, #4
 800515e:	4619      	mov	r1, r3
 8005160:	4610      	mov	r0, r2
 8005162:	f7fe f81c 	bl	800319e <vListInsert>
 8005166:	e016      	b.n	8005196 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005168:	2300      	movs	r3, #0
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	2300      	movs	r3, #0
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	2100      	movs	r1, #0
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f7ff fd7c 	bl	8004c70 <xTimerGenericCommand>
 8005178:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10a      	bne.n	8005196 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	603b      	str	r3, [r7, #0]
}
 8005192:	bf00      	nop
 8005194:	e7fe      	b.n	8005194 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005196:	4b09      	ldr	r3, [pc, #36]	; (80051bc <prvSwitchTimerLists+0xc0>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1b1      	bne.n	8005104 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80051a0:	4b06      	ldr	r3, [pc, #24]	; (80051bc <prvSwitchTimerLists+0xc0>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80051a6:	4b06      	ldr	r3, [pc, #24]	; (80051c0 <prvSwitchTimerLists+0xc4>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a04      	ldr	r2, [pc, #16]	; (80051bc <prvSwitchTimerLists+0xc0>)
 80051ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80051ae:	4a04      	ldr	r2, [pc, #16]	; (80051c0 <prvSwitchTimerLists+0xc4>)
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	6013      	str	r3, [r2, #0]
}
 80051b4:	bf00      	nop
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	20000298 	.word	0x20000298
 80051c0:	2000029c 	.word	0x2000029c

080051c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80051c8:	f000 fb4c 	bl	8005864 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80051cc:	4b12      	ldr	r3, [pc, #72]	; (8005218 <prvCheckForValidListAndQueue+0x54>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d11d      	bne.n	8005210 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 80051d4:	4811      	ldr	r0, [pc, #68]	; (800521c <prvCheckForValidListAndQueue+0x58>)
 80051d6:	f7fd ff91 	bl	80030fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80051da:	4811      	ldr	r0, [pc, #68]	; (8005220 <prvCheckForValidListAndQueue+0x5c>)
 80051dc:	f7fd ff8e 	bl	80030fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80051e0:	4b10      	ldr	r3, [pc, #64]	; (8005224 <prvCheckForValidListAndQueue+0x60>)
 80051e2:	4a0e      	ldr	r2, [pc, #56]	; (800521c <prvCheckForValidListAndQueue+0x58>)
 80051e4:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80051e6:	4b10      	ldr	r3, [pc, #64]	; (8005228 <prvCheckForValidListAndQueue+0x64>)
 80051e8:	4a0d      	ldr	r2, [pc, #52]	; (8005220 <prvCheckForValidListAndQueue+0x5c>)
 80051ea:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80051ec:	2200      	movs	r2, #0
 80051ee:	210c      	movs	r1, #12
 80051f0:	200a      	movs	r0, #10
 80051f2:	f7fe f89f 	bl	8003334 <xQueueGenericCreate>
 80051f6:	4603      	mov	r3, r0
 80051f8:	4a07      	ldr	r2, [pc, #28]	; (8005218 <prvCheckForValidListAndQueue+0x54>)
 80051fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80051fc:	4b06      	ldr	r3, [pc, #24]	; (8005218 <prvCheckForValidListAndQueue+0x54>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005204:	4b04      	ldr	r3, [pc, #16]	; (8005218 <prvCheckForValidListAndQueue+0x54>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4908      	ldr	r1, [pc, #32]	; (800522c <prvCheckForValidListAndQueue+0x68>)
 800520a:	4618      	mov	r0, r3
 800520c:	f7fe fc76 	bl	8003afc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005210:	f000 fb58 	bl	80058c4 <vPortExitCritical>
}
 8005214:	bf00      	nop
 8005216:	bd80      	pop	{r7, pc}
 8005218:	200002a0 	.word	0x200002a0
 800521c:	20000270 	.word	0x20000270
 8005220:	20000284 	.word	0x20000284
 8005224:	20000298 	.word	0x20000298
 8005228:	2000029c 	.word	0x2000029c
 800522c:	08005c20 	.word	0x08005c20

08005230 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b08a      	sub	sp, #40	; 0x28
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005238:	2300      	movs	r3, #0
 800523a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800523c:	f7ff f810 	bl	8004260 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005240:	4b5b      	ldr	r3, [pc, #364]	; (80053b0 <pvPortMalloc+0x180>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005248:	f000 f920 	bl	800548c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800524c:	4b59      	ldr	r3, [pc, #356]	; (80053b4 <pvPortMalloc+0x184>)
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4013      	ands	r3, r2
 8005254:	2b00      	cmp	r3, #0
 8005256:	f040 8093 	bne.w	8005380 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01d      	beq.n	800529c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005260:	2208      	movs	r2, #8
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4413      	add	r3, r2
 8005266:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	2b00      	cmp	r3, #0
 8005270:	d014      	beq.n	800529c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f023 0307 	bic.w	r3, r3, #7
 8005278:	3308      	adds	r3, #8
 800527a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f003 0307 	and.w	r3, r3, #7
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <pvPortMalloc+0x6c>
	__asm volatile
 8005286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	617b      	str	r3, [r7, #20]
}
 8005298:	bf00      	nop
 800529a:	e7fe      	b.n	800529a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d06e      	beq.n	8005380 <pvPortMalloc+0x150>
 80052a2:	4b45      	ldr	r3, [pc, #276]	; (80053b8 <pvPortMalloc+0x188>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d869      	bhi.n	8005380 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052ac:	4b43      	ldr	r3, [pc, #268]	; (80053bc <pvPortMalloc+0x18c>)
 80052ae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052b0:	4b42      	ldr	r3, [pc, #264]	; (80053bc <pvPortMalloc+0x18c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052b6:	e004      	b.n	80052c2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80052b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d903      	bls.n	80052d4 <pvPortMalloc+0xa4>
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1f1      	bne.n	80052b8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80052d4:	4b36      	ldr	r3, [pc, #216]	; (80053b0 <pvPortMalloc+0x180>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052da:	429a      	cmp	r2, r3
 80052dc:	d050      	beq.n	8005380 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80052de:	6a3b      	ldr	r3, [r7, #32]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2208      	movs	r2, #8
 80052e4:	4413      	add	r3, r2
 80052e6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	1ad2      	subs	r2, r2, r3
 80052f8:	2308      	movs	r3, #8
 80052fa:	005b      	lsls	r3, r3, #1
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d91f      	bls.n	8005340 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4413      	add	r3, r2
 8005306:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	f003 0307 	and.w	r3, r3, #7
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <pvPortMalloc+0xf8>
	__asm volatile
 8005312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005316:	f383 8811 	msr	BASEPRI, r3
 800531a:	f3bf 8f6f 	isb	sy
 800531e:	f3bf 8f4f 	dsb	sy
 8005322:	613b      	str	r3, [r7, #16]
}
 8005324:	bf00      	nop
 8005326:	e7fe      	b.n	8005326 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	1ad2      	subs	r2, r2, r3
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800533a:	69b8      	ldr	r0, [r7, #24]
 800533c:	f000 f908 	bl	8005550 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005340:	4b1d      	ldr	r3, [pc, #116]	; (80053b8 <pvPortMalloc+0x188>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	4a1b      	ldr	r2, [pc, #108]	; (80053b8 <pvPortMalloc+0x188>)
 800534c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800534e:	4b1a      	ldr	r3, [pc, #104]	; (80053b8 <pvPortMalloc+0x188>)
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	4b1b      	ldr	r3, [pc, #108]	; (80053c0 <pvPortMalloc+0x190>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d203      	bcs.n	8005362 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800535a:	4b17      	ldr	r3, [pc, #92]	; (80053b8 <pvPortMalloc+0x188>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a18      	ldr	r2, [pc, #96]	; (80053c0 <pvPortMalloc+0x190>)
 8005360:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	4b13      	ldr	r3, [pc, #76]	; (80053b4 <pvPortMalloc+0x184>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	431a      	orrs	r2, r3
 800536c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005376:	4b13      	ldr	r3, [pc, #76]	; (80053c4 <pvPortMalloc+0x194>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3301      	adds	r3, #1
 800537c:	4a11      	ldr	r2, [pc, #68]	; (80053c4 <pvPortMalloc+0x194>)
 800537e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005380:	f7fe ff7c 	bl	800427c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <pvPortMalloc+0x174>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	60fb      	str	r3, [r7, #12]
}
 80053a0:	bf00      	nop
 80053a2:	e7fe      	b.n	80053a2 <pvPortMalloc+0x172>
	return pvReturn;
 80053a4:	69fb      	ldr	r3, [r7, #28]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3728      	adds	r7, #40	; 0x28
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	200012b4 	.word	0x200012b4
 80053b4:	200012c8 	.word	0x200012c8
 80053b8:	200012b8 	.word	0x200012b8
 80053bc:	200012ac 	.word	0x200012ac
 80053c0:	200012bc 	.word	0x200012bc
 80053c4:	200012c0 	.word	0x200012c0

080053c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b086      	sub	sp, #24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d04d      	beq.n	8005476 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80053da:	2308      	movs	r3, #8
 80053dc:	425b      	negs	r3, r3
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4413      	add	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	4b24      	ldr	r3, [pc, #144]	; (8005480 <vPortFree+0xb8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4013      	ands	r3, r2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d10a      	bne.n	800540c <vPortFree+0x44>
	__asm volatile
 80053f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	60fb      	str	r3, [r7, #12]
}
 8005408:	bf00      	nop
 800540a:	e7fe      	b.n	800540a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <vPortFree+0x62>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	60bb      	str	r3, [r7, #8]
}
 8005426:	bf00      	nop
 8005428:	e7fe      	b.n	8005428 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	4b14      	ldr	r3, [pc, #80]	; (8005480 <vPortFree+0xb8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4013      	ands	r3, r2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d01e      	beq.n	8005476 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d11a      	bne.n	8005476 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	4b0e      	ldr	r3, [pc, #56]	; (8005480 <vPortFree+0xb8>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	43db      	mvns	r3, r3
 800544a:	401a      	ands	r2, r3
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005450:	f7fe ff06 	bl	8004260 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <vPortFree+0xbc>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4413      	add	r3, r2
 800545e:	4a09      	ldr	r2, [pc, #36]	; (8005484 <vPortFree+0xbc>)
 8005460:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005462:	6938      	ldr	r0, [r7, #16]
 8005464:	f000 f874 	bl	8005550 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005468:	4b07      	ldr	r3, [pc, #28]	; (8005488 <vPortFree+0xc0>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3301      	adds	r3, #1
 800546e:	4a06      	ldr	r2, [pc, #24]	; (8005488 <vPortFree+0xc0>)
 8005470:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005472:	f7fe ff03 	bl	800427c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005476:	bf00      	nop
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	200012c8 	.word	0x200012c8
 8005484:	200012b8 	.word	0x200012b8
 8005488:	200012c4 	.word	0x200012c4

0800548c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005496:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005498:	4b27      	ldr	r3, [pc, #156]	; (8005538 <prvHeapInit+0xac>)
 800549a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00c      	beq.n	80054c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	3307      	adds	r3, #7
 80054aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0307 	bic.w	r3, r3, #7
 80054b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	4a1f      	ldr	r2, [pc, #124]	; (8005538 <prvHeapInit+0xac>)
 80054bc:	4413      	add	r3, r2
 80054be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054c4:	4a1d      	ldr	r2, [pc, #116]	; (800553c <prvHeapInit+0xb0>)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054ca:	4b1c      	ldr	r3, [pc, #112]	; (800553c <prvHeapInit+0xb0>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	4413      	add	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80054d8:	2208      	movs	r2, #8
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 0307 	bic.w	r3, r3, #7
 80054e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4a15      	ldr	r2, [pc, #84]	; (8005540 <prvHeapInit+0xb4>)
 80054ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80054ee:	4b14      	ldr	r3, [pc, #80]	; (8005540 <prvHeapInit+0xb4>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2200      	movs	r2, #0
 80054f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80054f6:	4b12      	ldr	r3, [pc, #72]	; (8005540 <prvHeapInit+0xb4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	1ad2      	subs	r2, r2, r3
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800550c:	4b0c      	ldr	r3, [pc, #48]	; (8005540 <prvHeapInit+0xb4>)
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	4a0a      	ldr	r2, [pc, #40]	; (8005544 <prvHeapInit+0xb8>)
 800551a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	4a09      	ldr	r2, [pc, #36]	; (8005548 <prvHeapInit+0xbc>)
 8005522:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005524:	4b09      	ldr	r3, [pc, #36]	; (800554c <prvHeapInit+0xc0>)
 8005526:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800552a:	601a      	str	r2, [r3, #0]
}
 800552c:	bf00      	nop
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	200002ac 	.word	0x200002ac
 800553c:	200012ac 	.word	0x200012ac
 8005540:	200012b4 	.word	0x200012b4
 8005544:	200012bc 	.word	0x200012bc
 8005548:	200012b8 	.word	0x200012b8
 800554c:	200012c8 	.word	0x200012c8

08005550 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005558:	4b28      	ldr	r3, [pc, #160]	; (80055fc <prvInsertBlockIntoFreeList+0xac>)
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	e002      	b.n	8005564 <prvInsertBlockIntoFreeList+0x14>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	429a      	cmp	r2, r3
 800556c:	d8f7      	bhi.n	800555e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	4413      	add	r3, r2
 800557a:	687a      	ldr	r2, [r7, #4]
 800557c:	429a      	cmp	r2, r3
 800557e:	d108      	bne.n	8005592 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	441a      	add	r2, r3
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	441a      	add	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d118      	bne.n	80055d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4b15      	ldr	r3, [pc, #84]	; (8005600 <prvInsertBlockIntoFreeList+0xb0>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d00d      	beq.n	80055ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	441a      	add	r2, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	e008      	b.n	80055e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055ce:	4b0c      	ldr	r3, [pc, #48]	; (8005600 <prvInsertBlockIntoFreeList+0xb0>)
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	e003      	b.n	80055e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d002      	beq.n	80055ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055ee:	bf00      	nop
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	200012ac 	.word	0x200012ac
 8005600:	200012b4 	.word	0x200012b4

08005604 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3b04      	subs	r3, #4
 8005614:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800561c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3b04      	subs	r3, #4
 8005622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f023 0201 	bic.w	r2, r3, #1
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3b04      	subs	r3, #4
 8005632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005634:	4a0c      	ldr	r2, [pc, #48]	; (8005668 <pxPortInitialiseStack+0x64>)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	3b14      	subs	r3, #20
 800563e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	3b04      	subs	r3, #4
 800564a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f06f 0202 	mvn.w	r2, #2
 8005652:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3b20      	subs	r3, #32
 8005658:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800565a:	68fb      	ldr	r3, [r7, #12]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	0800566d 	.word	0x0800566d

0800566c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005672:	2300      	movs	r3, #0
 8005674:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005676:	4b12      	ldr	r3, [pc, #72]	; (80056c0 <prvTaskExitError+0x54>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567e:	d00a      	beq.n	8005696 <prvTaskExitError+0x2a>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	60fb      	str	r3, [r7, #12]
}
 8005692:	bf00      	nop
 8005694:	e7fe      	b.n	8005694 <prvTaskExitError+0x28>
	__asm volatile
 8005696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	60bb      	str	r3, [r7, #8]
}
 80056a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80056aa:	bf00      	nop
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0fc      	beq.n	80056ac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80056b2:	bf00      	nop
 80056b4:	bf00      	nop
 80056b6:	3714      	adds	r7, #20
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	2000002c 	.word	0x2000002c
	...

080056d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80056d0:	4b07      	ldr	r3, [pc, #28]	; (80056f0 <pxCurrentTCBConst2>)
 80056d2:	6819      	ldr	r1, [r3, #0]
 80056d4:	6808      	ldr	r0, [r1, #0]
 80056d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056da:	f380 8809 	msr	PSP, r0
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f04f 0000 	mov.w	r0, #0
 80056e6:	f380 8811 	msr	BASEPRI, r0
 80056ea:	4770      	bx	lr
 80056ec:	f3af 8000 	nop.w

080056f0 <pxCurrentTCBConst2>:
 80056f0:	20000130 	.word	0x20000130
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop

080056f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80056f8:	4808      	ldr	r0, [pc, #32]	; (800571c <prvPortStartFirstTask+0x24>)
 80056fa:	6800      	ldr	r0, [r0, #0]
 80056fc:	6800      	ldr	r0, [r0, #0]
 80056fe:	f380 8808 	msr	MSP, r0
 8005702:	f04f 0000 	mov.w	r0, #0
 8005706:	f380 8814 	msr	CONTROL, r0
 800570a:	b662      	cpsie	i
 800570c:	b661      	cpsie	f
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	f3bf 8f6f 	isb	sy
 8005716:	df00      	svc	0
 8005718:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800571a:	bf00      	nop
 800571c:	e000ed08 	.word	0xe000ed08

08005720 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005726:	4b46      	ldr	r3, [pc, #280]	; (8005840 <xPortStartScheduler+0x120>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a46      	ldr	r2, [pc, #280]	; (8005844 <xPortStartScheduler+0x124>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d10a      	bne.n	8005746 <xPortStartScheduler+0x26>
	__asm volatile
 8005730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005734:	f383 8811 	msr	BASEPRI, r3
 8005738:	f3bf 8f6f 	isb	sy
 800573c:	f3bf 8f4f 	dsb	sy
 8005740:	613b      	str	r3, [r7, #16]
}
 8005742:	bf00      	nop
 8005744:	e7fe      	b.n	8005744 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005746:	4b3e      	ldr	r3, [pc, #248]	; (8005840 <xPortStartScheduler+0x120>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a3f      	ldr	r2, [pc, #252]	; (8005848 <xPortStartScheduler+0x128>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d10a      	bne.n	8005766 <xPortStartScheduler+0x46>
	__asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	60fb      	str	r3, [r7, #12]
}
 8005762:	bf00      	nop
 8005764:	e7fe      	b.n	8005764 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005766:	4b39      	ldr	r3, [pc, #228]	; (800584c <xPortStartScheduler+0x12c>)
 8005768:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	b2db      	uxtb	r3, r3
 8005770:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	22ff      	movs	r2, #255	; 0xff
 8005776:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	b2db      	uxtb	r3, r3
 800577e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005780:	78fb      	ldrb	r3, [r7, #3]
 8005782:	b2db      	uxtb	r3, r3
 8005784:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005788:	b2da      	uxtb	r2, r3
 800578a:	4b31      	ldr	r3, [pc, #196]	; (8005850 <xPortStartScheduler+0x130>)
 800578c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800578e:	4b31      	ldr	r3, [pc, #196]	; (8005854 <xPortStartScheduler+0x134>)
 8005790:	2207      	movs	r2, #7
 8005792:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005794:	e009      	b.n	80057aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005796:	4b2f      	ldr	r3, [pc, #188]	; (8005854 <xPortStartScheduler+0x134>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	3b01      	subs	r3, #1
 800579c:	4a2d      	ldr	r2, [pc, #180]	; (8005854 <xPortStartScheduler+0x134>)
 800579e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80057a0:	78fb      	ldrb	r3, [r7, #3]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b2:	2b80      	cmp	r3, #128	; 0x80
 80057b4:	d0ef      	beq.n	8005796 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80057b6:	4b27      	ldr	r3, [pc, #156]	; (8005854 <xPortStartScheduler+0x134>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f1c3 0307 	rsb	r3, r3, #7
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d00a      	beq.n	80057d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80057c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	60bb      	str	r3, [r7, #8]
}
 80057d4:	bf00      	nop
 80057d6:	e7fe      	b.n	80057d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80057d8:	4b1e      	ldr	r3, [pc, #120]	; (8005854 <xPortStartScheduler+0x134>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	021b      	lsls	r3, r3, #8
 80057de:	4a1d      	ldr	r2, [pc, #116]	; (8005854 <xPortStartScheduler+0x134>)
 80057e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80057e2:	4b1c      	ldr	r3, [pc, #112]	; (8005854 <xPortStartScheduler+0x134>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80057ea:	4a1a      	ldr	r2, [pc, #104]	; (8005854 <xPortStartScheduler+0x134>)
 80057ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80057f6:	4b18      	ldr	r3, [pc, #96]	; (8005858 <xPortStartScheduler+0x138>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a17      	ldr	r2, [pc, #92]	; (8005858 <xPortStartScheduler+0x138>)
 80057fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005800:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005802:	4b15      	ldr	r3, [pc, #84]	; (8005858 <xPortStartScheduler+0x138>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a14      	ldr	r2, [pc, #80]	; (8005858 <xPortStartScheduler+0x138>)
 8005808:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800580c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800580e:	f000 f8dd 	bl	80059cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005812:	4b12      	ldr	r3, [pc, #72]	; (800585c <xPortStartScheduler+0x13c>)
 8005814:	2200      	movs	r2, #0
 8005816:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005818:	f000 f8fc 	bl	8005a14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800581c:	4b10      	ldr	r3, [pc, #64]	; (8005860 <xPortStartScheduler+0x140>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a0f      	ldr	r2, [pc, #60]	; (8005860 <xPortStartScheduler+0x140>)
 8005822:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005826:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005828:	f7ff ff66 	bl	80056f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800582c:	f7fe fe9c 	bl	8004568 <vTaskSwitchContext>
	prvTaskExitError();
 8005830:	f7ff ff1c 	bl	800566c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	e000ed00 	.word	0xe000ed00
 8005844:	410fc271 	.word	0x410fc271
 8005848:	410fc270 	.word	0x410fc270
 800584c:	e000e400 	.word	0xe000e400
 8005850:	200012cc 	.word	0x200012cc
 8005854:	200012d0 	.word	0x200012d0
 8005858:	e000ed20 	.word	0xe000ed20
 800585c:	2000002c 	.word	0x2000002c
 8005860:	e000ef34 	.word	0xe000ef34

08005864 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	607b      	str	r3, [r7, #4]
}
 800587c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800587e:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <vPortEnterCritical+0x58>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	3301      	adds	r3, #1
 8005884:	4a0d      	ldr	r2, [pc, #52]	; (80058bc <vPortEnterCritical+0x58>)
 8005886:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005888:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <vPortEnterCritical+0x58>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d10f      	bne.n	80058b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <vPortEnterCritical+0x5c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	603b      	str	r3, [r7, #0]
}
 80058ac:	bf00      	nop
 80058ae:	e7fe      	b.n	80058ae <vPortEnterCritical+0x4a>
	}
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	2000002c 	.word	0x2000002c
 80058c0:	e000ed04 	.word	0xe000ed04

080058c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80058ca:	4b12      	ldr	r3, [pc, #72]	; (8005914 <vPortExitCritical+0x50>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10a      	bne.n	80058e8 <vPortExitCritical+0x24>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	607b      	str	r3, [r7, #4]
}
 80058e4:	bf00      	nop
 80058e6:	e7fe      	b.n	80058e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80058e8:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <vPortExitCritical+0x50>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	4a09      	ldr	r2, [pc, #36]	; (8005914 <vPortExitCritical+0x50>)
 80058f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80058f2:	4b08      	ldr	r3, [pc, #32]	; (8005914 <vPortExitCritical+0x50>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d105      	bne.n	8005906 <vPortExitCritical+0x42>
 80058fa:	2300      	movs	r3, #0
 80058fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	f383 8811 	msr	BASEPRI, r3
}
 8005904:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	2000002c 	.word	0x2000002c
	...

08005920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005920:	f3ef 8009 	mrs	r0, PSP
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	4b15      	ldr	r3, [pc, #84]	; (8005980 <pxCurrentTCBConst>)
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	f01e 0f10 	tst.w	lr, #16
 8005930:	bf08      	it	eq
 8005932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593a:	6010      	str	r0, [r2, #0]
 800593c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005940:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005944:	f380 8811 	msr	BASEPRI, r0
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f7fe fe0a 	bl	8004568 <vTaskSwitchContext>
 8005954:	f04f 0000 	mov.w	r0, #0
 8005958:	f380 8811 	msr	BASEPRI, r0
 800595c:	bc09      	pop	{r0, r3}
 800595e:	6819      	ldr	r1, [r3, #0]
 8005960:	6808      	ldr	r0, [r1, #0]
 8005962:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005966:	f01e 0f10 	tst.w	lr, #16
 800596a:	bf08      	it	eq
 800596c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005970:	f380 8809 	msr	PSP, r0
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	f3af 8000 	nop.w

08005980 <pxCurrentTCBConst>:
 8005980:	20000130 	.word	0x20000130
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop

08005988 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	607b      	str	r3, [r7, #4]
}
 80059a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80059a2:	f7fe fd29 	bl	80043f8 <xTaskIncrementTick>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059ac:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <xPortSysTickHandler+0x40>)
 80059ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	2300      	movs	r3, #0
 80059b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	f383 8811 	msr	BASEPRI, r3
}
 80059be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80059c0:	bf00      	nop
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	e000ed04 	.word	0xe000ed04

080059cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80059d0:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <vPortSetupTimerInterrupt+0x34>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80059d6:	4b0b      	ldr	r3, [pc, #44]	; (8005a04 <vPortSetupTimerInterrupt+0x38>)
 80059d8:	2200      	movs	r2, #0
 80059da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80059dc:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <vPortSetupTimerInterrupt+0x3c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a0a      	ldr	r2, [pc, #40]	; (8005a0c <vPortSetupTimerInterrupt+0x40>)
 80059e2:	fba2 2303 	umull	r2, r3, r2, r3
 80059e6:	099b      	lsrs	r3, r3, #6
 80059e8:	4a09      	ldr	r2, [pc, #36]	; (8005a10 <vPortSetupTimerInterrupt+0x44>)
 80059ea:	3b01      	subs	r3, #1
 80059ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80059ee:	4b04      	ldr	r3, [pc, #16]	; (8005a00 <vPortSetupTimerInterrupt+0x34>)
 80059f0:	2207      	movs	r2, #7
 80059f2:	601a      	str	r2, [r3, #0]
}
 80059f4:	bf00      	nop
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	e000e010 	.word	0xe000e010
 8005a04:	e000e018 	.word	0xe000e018
 8005a08:	20000020 	.word	0x20000020
 8005a0c:	10624dd3 	.word	0x10624dd3
 8005a10:	e000e014 	.word	0xe000e014

08005a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005a24 <vPortEnableVFP+0x10>
 8005a18:	6801      	ldr	r1, [r0, #0]
 8005a1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005a1e:	6001      	str	r1, [r0, #0]
 8005a20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a22:	bf00      	nop
 8005a24:	e000ed88 	.word	0xe000ed88

08005a28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005a2e:	f3ef 8305 	mrs	r3, IPSR
 8005a32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2b0f      	cmp	r3, #15
 8005a38:	d914      	bls.n	8005a64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a3a:	4a17      	ldr	r2, [pc, #92]	; (8005a98 <vPortValidateInterruptPriority+0x70>)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4413      	add	r3, r2
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a44:	4b15      	ldr	r3, [pc, #84]	; (8005a9c <vPortValidateInterruptPriority+0x74>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	7afa      	ldrb	r2, [r7, #11]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d20a      	bcs.n	8005a64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	607b      	str	r3, [r7, #4]
}
 8005a60:	bf00      	nop
 8005a62:	e7fe      	b.n	8005a62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a64:	4b0e      	ldr	r3, [pc, #56]	; (8005aa0 <vPortValidateInterruptPriority+0x78>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a6c:	4b0d      	ldr	r3, [pc, #52]	; (8005aa4 <vPortValidateInterruptPriority+0x7c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d90a      	bls.n	8005a8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	603b      	str	r3, [r7, #0]
}
 8005a86:	bf00      	nop
 8005a88:	e7fe      	b.n	8005a88 <vPortValidateInterruptPriority+0x60>
	}
 8005a8a:	bf00      	nop
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	e000e3f0 	.word	0xe000e3f0
 8005a9c:	200012cc 	.word	0x200012cc
 8005aa0:	e000ed0c 	.word	0xe000ed0c
 8005aa4:	200012d0 	.word	0x200012d0

08005aa8 <memset>:
 8005aa8:	4402      	add	r2, r0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d100      	bne.n	8005ab2 <memset+0xa>
 8005ab0:	4770      	bx	lr
 8005ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ab6:	e7f9      	b.n	8005aac <memset+0x4>

08005ab8 <__errno>:
 8005ab8:	4b01      	ldr	r3, [pc, #4]	; (8005ac0 <__errno+0x8>)
 8005aba:	6818      	ldr	r0, [r3, #0]
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	2000007c 	.word	0x2000007c

08005ac4 <__libc_init_array>:
 8005ac4:	b570      	push	{r4, r5, r6, lr}
 8005ac6:	4d0d      	ldr	r5, [pc, #52]	; (8005afc <__libc_init_array+0x38>)
 8005ac8:	4c0d      	ldr	r4, [pc, #52]	; (8005b00 <__libc_init_array+0x3c>)
 8005aca:	1b64      	subs	r4, r4, r5
 8005acc:	10a4      	asrs	r4, r4, #2
 8005ace:	2600      	movs	r6, #0
 8005ad0:	42a6      	cmp	r6, r4
 8005ad2:	d109      	bne.n	8005ae8 <__libc_init_array+0x24>
 8005ad4:	4d0b      	ldr	r5, [pc, #44]	; (8005b04 <__libc_init_array+0x40>)
 8005ad6:	4c0c      	ldr	r4, [pc, #48]	; (8005b08 <__libc_init_array+0x44>)
 8005ad8:	f000 f872 	bl	8005bc0 <_init>
 8005adc:	1b64      	subs	r4, r4, r5
 8005ade:	10a4      	asrs	r4, r4, #2
 8005ae0:	2600      	movs	r6, #0
 8005ae2:	42a6      	cmp	r6, r4
 8005ae4:	d105      	bne.n	8005af2 <__libc_init_array+0x2e>
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}
 8005ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aec:	4798      	blx	r3
 8005aee:	3601      	adds	r6, #1
 8005af0:	e7ee      	b.n	8005ad0 <__libc_init_array+0xc>
 8005af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af6:	4798      	blx	r3
 8005af8:	3601      	adds	r6, #1
 8005afa:	e7f2      	b.n	8005ae2 <__libc_init_array+0x1e>
 8005afc:	08005d70 	.word	0x08005d70
 8005b00:	08005d70 	.word	0x08005d70
 8005b04:	08005d70 	.word	0x08005d70
 8005b08:	08005d74 	.word	0x08005d74

08005b0c <memcpy>:
 8005b0c:	440a      	add	r2, r1
 8005b0e:	4291      	cmp	r1, r2
 8005b10:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b14:	d100      	bne.n	8005b18 <memcpy+0xc>
 8005b16:	4770      	bx	lr
 8005b18:	b510      	push	{r4, lr}
 8005b1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b22:	4291      	cmp	r1, r2
 8005b24:	d1f9      	bne.n	8005b1a <memcpy+0xe>
 8005b26:	bd10      	pop	{r4, pc}

08005b28 <abort>:
 8005b28:	b508      	push	{r3, lr}
 8005b2a:	2006      	movs	r0, #6
 8005b2c:	f000 f82c 	bl	8005b88 <raise>
 8005b30:	2001      	movs	r0, #1
 8005b32:	f7fd fa23 	bl	8002f7c <_exit>

08005b36 <_raise_r>:
 8005b36:	291f      	cmp	r1, #31
 8005b38:	b538      	push	{r3, r4, r5, lr}
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	460d      	mov	r5, r1
 8005b3e:	d904      	bls.n	8005b4a <_raise_r+0x14>
 8005b40:	2316      	movs	r3, #22
 8005b42:	6003      	str	r3, [r0, #0]
 8005b44:	f04f 30ff 	mov.w	r0, #4294967295
 8005b48:	bd38      	pop	{r3, r4, r5, pc}
 8005b4a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005b4c:	b112      	cbz	r2, 8005b54 <_raise_r+0x1e>
 8005b4e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b52:	b94b      	cbnz	r3, 8005b68 <_raise_r+0x32>
 8005b54:	4620      	mov	r0, r4
 8005b56:	f000 f831 	bl	8005bbc <_getpid_r>
 8005b5a:	462a      	mov	r2, r5
 8005b5c:	4601      	mov	r1, r0
 8005b5e:	4620      	mov	r0, r4
 8005b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b64:	f000 b818 	b.w	8005b98 <_kill_r>
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d00a      	beq.n	8005b82 <_raise_r+0x4c>
 8005b6c:	1c59      	adds	r1, r3, #1
 8005b6e:	d103      	bne.n	8005b78 <_raise_r+0x42>
 8005b70:	2316      	movs	r3, #22
 8005b72:	6003      	str	r3, [r0, #0]
 8005b74:	2001      	movs	r0, #1
 8005b76:	e7e7      	b.n	8005b48 <_raise_r+0x12>
 8005b78:	2400      	movs	r4, #0
 8005b7a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005b7e:	4628      	mov	r0, r5
 8005b80:	4798      	blx	r3
 8005b82:	2000      	movs	r0, #0
 8005b84:	e7e0      	b.n	8005b48 <_raise_r+0x12>
	...

08005b88 <raise>:
 8005b88:	4b02      	ldr	r3, [pc, #8]	; (8005b94 <raise+0xc>)
 8005b8a:	4601      	mov	r1, r0
 8005b8c:	6818      	ldr	r0, [r3, #0]
 8005b8e:	f7ff bfd2 	b.w	8005b36 <_raise_r>
 8005b92:	bf00      	nop
 8005b94:	2000007c 	.word	0x2000007c

08005b98 <_kill_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4d07      	ldr	r5, [pc, #28]	; (8005bb8 <_kill_r+0x20>)
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	602b      	str	r3, [r5, #0]
 8005ba6:	f7fd f9d9 	bl	8002f5c <_kill>
 8005baa:	1c43      	adds	r3, r0, #1
 8005bac:	d102      	bne.n	8005bb4 <_kill_r+0x1c>
 8005bae:	682b      	ldr	r3, [r5, #0]
 8005bb0:	b103      	cbz	r3, 8005bb4 <_kill_r+0x1c>
 8005bb2:	6023      	str	r3, [r4, #0]
 8005bb4:	bd38      	pop	{r3, r4, r5, pc}
 8005bb6:	bf00      	nop
 8005bb8:	2000140c 	.word	0x2000140c

08005bbc <_getpid_r>:
 8005bbc:	f7fd b9c6 	b.w	8002f4c <_getpid>

08005bc0 <_init>:
 8005bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc2:	bf00      	nop
 8005bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bc6:	bc08      	pop	{r3}
 8005bc8:	469e      	mov	lr, r3
 8005bca:	4770      	bx	lr

08005bcc <_fini>:
 8005bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bce:	bf00      	nop
 8005bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd2:	bc08      	pop	{r3}
 8005bd4:	469e      	mov	lr, r3
 8005bd6:	4770      	bx	lr
